#start_Series-__init__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__init__()

#start_Series-from_concat()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> s = sf.Series.from_concat((s1, s2))
>>> s
<Series>
<Index>
a        10
b        2
c        8
d        4
e        3
f        12
<<U1>    <int64>
#end_Series-from_concat()

#start_Series-from_concat_items()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> s = sf.Series.from_concat_items((('x', s1), ('y', s2)))
>>> s
<Series>
<IndexHierarchy>
x                a     10
x                b     2
x                c     8
y                d     4
y                e     3
y                f     12
<<U1>            <<U1> <int64>
#end_Series-from_concat_items()

#start_Series-from_dict()
>>> s = sf.Series.from_dict(dict(a=10, b=2, c=8))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-from_dict()

#start_Series-from_element()
>>> s = sf.Series.from_element(-1, index=('a', 'b', 'c'), name='x')
>>> s
<Series: x>
<Index>
a           -1
b           -1
c           -1
<<U1>       <int64>
#end_Series-from_element()

#start_Series-from_items()
>>> s = sf.Series.from_items((('a', 10), ('b', 2), ('c', 8)), name='x')
>>> s
<Series: x>
<Index>
a           10
b           2
c           8
<<U1>       <int64>
#end_Series-from_items()

#start_Series-from_overlay()
>>> s1 = sf.Series((11, 1, None), index=('a', 'b', 'c'))
>>> s1
<Series>
<Index>
a        11
b        1
c        None
<<U1>    <object>
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s = sf.Series.from_overlay((s1, s2))
>>> s
<Series>
<Index>
a        11
b        1
c        8
d        19
<<U1>    <object>
#end_Series-from_overlay()

#start_Series-from_pandas()
>>> df = pd.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s = sf.Series.from_pandas(df)
>>> s
<Series>
<Index>
a        10
b        2
c        8
<object> <int64>
#end_Series-from_pandas()

#start_Series-to_frame()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame()
<Frame>
<Index> 0       <int64>
<Index>
a       10
b       2
c       8
<<U1>   <int64>
#end_Series-to_frame()

#start_Series-to_frame_go()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_go()
<FrameGO>
<IndexGO> 0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_Series-to_frame_go()

#start_Series-to_frame_he()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_he()
<FrameHE>
<Index>   0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_Series-to_frame_he()

#start_Series-to_pairs()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pairs()
(('a', 10), ('b', 2), ('c', 8))
#end_Series-to_pairs()

#start_Series-to_pandas()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pandas()
a    10
b     2
c     8
dtype: int64
#end_Series-to_pandas()

#start_Series-to_series_he()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_series_he()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_Series-to_series_he()

#start_Series-STATIC
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.STATIC
True
#end_Series-STATIC

#start_Series-T
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.T
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-T

#start_Series-dtype
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.dtype
int64
#end_Series-dtype

#start_Series-index
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.index
<Index>
a
b
c
<<U1>
#end_Series-index

#start_Series-mloc
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.mloc
140297217788752
#end_Series-mloc

#start_Series-name
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.name
#end_Series-name

#start_Series-nbytes
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.nbytes
24
#end_Series-nbytes

#start_Series-ndim
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.ndim
1
#end_Series-ndim

#start_Series-shape
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.shape
(3,)
#end_Series-shape

#start_Series-size
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.size
3
#end_Series-size

#start_Series-__array__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__array__()
[10  2  8]
#end_Series-__array__()

#start_Series-__array_ufunc__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> np.array((0, 1, 0)) * s
<Series>
<Index>
a        0
b        2
c        0
<<U1>    <int64>
#end_Series-__array_ufunc__()

#start_Series-__bool__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Series-__bool__()

#start_Series-__deepcopy__()
>>> import copy
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> copy.deepcopy(s)
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__deepcopy__()

#start_Series-__len__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> len(s)
3
#end_Series-__len__()

#start_Series-__round__()
>>> s = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
<<U1>    <float64>
>>> round(s, 1)
<Series>
<Index>
a        10.2
b        2.1
c        8.7
<<U1>    <float64>
#end_Series-__round__()

#start_Series-all()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s.all()
False
#end_Series-all()

#start_Series-any()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s.any()
True
#end_Series-any()

#start_Series-astype()
>>> s = sf.Series((11, 1, None), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        11
b        1
c        None
<<U1>    <object>
>>> s.astype(float)
<Series>
<Index>
a        11.0
b        1.0
c        nan
<<U1>    <float64>
#end_Series-astype()

#start_Series-clip()
>>> s = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
<<U1>    <float64>
>>> s.clip(lower=2.5, upper=10.1)
<Series>
<Index>
a        10.1
b        2.5
c        8.734
<<U1>    <float64>
#end_Series-clip()

#start_Series-count()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s.count(skipna=True)
3
>>> s.count(unique=True)
2
#end_Series-count()

#start_Series-cov()
>>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.cov(s2)
17.924999999999997
#end_Series-cov()

#start_Series-cumprod()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumprod()
<Series>
<Index>
a        10
b        20
c        160
<<U1>    <int64>
#end_Series-cumprod()

#start_Series-cumsum()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumsum()
<Series>
<Index>
a        10
b        12
c        20
<<U1>    <int64>
#end_Series-cumsum()

#start_Series-drop_duplicated()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.drop_duplicated()
<Series>
<Index>
b        5
c        None
<<U1>    <object>
#end_Series-drop_duplicated()

#start_Series-dropfalsy()
>>> s = sf.Series(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        q
b        r
c
d        s
<<U1>    <<U1>
>>> s.dropfalsy()
<Series>
<Index>
a        q
b        r
d        s
<<U1>    <<U1>
#end_Series-dropfalsy()

#start_Series-dropna()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.dropna()
<Series>
<Index>
a        8
b        5
d        8
<<U1>    <object>
#end_Series-dropna()

#start_Series-duplicated()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.duplicated()
<Series>
<Index>
a        True
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-duplicated()

#start_Series-equals()
>>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.equals(s2)
False
#end_Series-equals()

#start_Series-fillfalsy()
>>> s = sf.Series(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        q
b        r
c
d        s
<<U1>    <<U1>
>>> s.fillfalsy('missing')
<Series>
<Index>
a        q
b        r
c        missing
d        s
<<U1>    <<U7>
#end_Series-fillfalsy()

#start_Series-fillfalsy_backward()
>>> s = sf.Series(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a
b
c        r
d        s
<<U1>    <<U1>
>>> s.fillfalsy_backward()
<Series>
<Index>
a        r
b        r
c        r
d        s
<<U1>    <<U1>
#end_Series-fillfalsy_backward()

#start_Series-fillfalsy_forward()
>>> s = sf.Series(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        p
b        q
c
d
<<U1>    <<U1>
>>> s.fillfalsy_forward()
<Series>
<Index>
a        p
b        q
c        q
d        q
<<U1>    <<U1>
#end_Series-fillfalsy_forward()

#start_Series-fillfalsy_leading()
>>> s = sf.Series(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a
b
c        r
d        s
<<U1>    <<U1>
>>> s.fillfalsy_leading('missing')
<Series>
<Index>
a        missing
b        missing
c        r
d        s
<<U1>    <<U7>
#end_Series-fillfalsy_leading()

#start_Series-fillfalsy_trailing()
>>> s = sf.Series(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        p
b        q
c
d
<<U1>    <<U1>
>>> s.fillfalsy_trailing('missing')
<Series>
<Index>
a        p
b        q
c        missing
d        missing
<<U1>    <<U7>
#end_Series-fillfalsy_trailing()

#start_Series-fillna()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.fillna(0.0)
<Series>
<Index>
a        10.235
b        2.124
c        0.0
d        8.734
e        0.0
<<U1>    <float64>
#end_Series-fillna()

#start_Series-fillna_backward()
>>> s = sf.Series((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        nan
b        nan
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
>>> s.fillna_backward()
<Series>
<Index>
a        10.235
b        10.235
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
#end_Series-fillna_backward()

#start_Series-fillna_forward()
>>> s = sf.Series((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        nan
e        nan
<<U1>    <float64>
>>> s.fillna_forward()
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        8.734
e        8.734
<<U1>    <float64>
#end_Series-fillna_forward()

#start_Series-fillna_leading()
>>> s = sf.Series((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        nan
b        nan
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
>>> s.fillna_leading(0.0)
<Series>
<Index>
a        0.0
b        0.0
c        10.235
d        2.124
e        8.734
<<U1>    <float64>
#end_Series-fillna_leading()

#start_Series-fillna_trailing()
>>> s = sf.Series((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        nan
e        nan
<<U1>    <float64>
>>> s.fillna_trailing(0.0)
<Series>
<Index>
a        10.235
b        2.124
c        8.734
d        0.0
e        0.0
<<U1>    <float64>
#end_Series-fillna_trailing()

#start_Series-head()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.head(2)
<Series>
<Index>
a        10.235
b        2.124
<<U1>    <float64>
#end_Series-head()

#start_Series-iloc_max()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.iloc_max()
0
#end_Series-iloc_max()

#start_Series-iloc_min()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.iloc_min()
1
#end_Series-iloc_min()

#start_Series-iloc_searchsorted()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.iloc_searchsorted(18)
2
#end_Series-iloc_searchsorted()

#start_Series-insert_after()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_after('b', s2)
<Series>
<Index>
a        10
b        2
d        4
e        3
f        12
c        8
<<U1>    <int64>
#end_Series-insert_after()

#start_Series-insert_before()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_before('b', s2)
<Series>
<Index>
a        10
d        4
e        3
f        12
b        2
c        8
<<U1>    <int64>
#end_Series-insert_before()

#start_Series-isfalsy()
>>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b
c        19
d        0
e        None
<<U1>    <object>
>>> s.isfalsy()
<Series>
<Index>
a        False
b        True
c        False
d        True
e        True
<<U1>    <bool>
#end_Series-isfalsy()

#start_Series-isin()
>>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s.isin((2, 19))
<Series>
<Index>
a        True
b        False
c        True
d        False
e        False
<<U1>    <bool>
#end_Series-isin()

#start_Series-isna()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.isna()
<Series>
<Index>
a        False
b        False
c        True
d        False
e        True
<<U1>    <bool>
#end_Series-isna()

#start_Series-loc_max()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.loc_max()
a
#end_Series-loc_max()

#start_Series-loc_min()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.loc_min()
b
#end_Series-loc_min()

#start_Series-loc_searchsorted()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.loc_searchsorted(18)
c
#end_Series-loc_searchsorted()

#start_Series-max()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.max()
10
#end_Series-max()

#start_Series-mean()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.mean()
6.666666666666667
#end_Series-mean()

#start_Series-median()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.median()
8.0
#end_Series-median()

#start_Series-min()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.min()
2
#end_Series-min()

#start_Series-notfalsy()
>>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b
c        19
d        0
e        None
<<U1>    <object>
>>> s.notfalsy()
<Series>
<Index>
a        True
b        False
c        True
d        False
e        False
<<U1>    <bool>
#end_Series-notfalsy()

#start_Series-notna()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.notna()
<Series>
<Index>
a        True
b        True
c        False
d        True
e        False
<<U1>    <bool>
#end_Series-notna()

#start_Series-prod()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.prod()
160
#end_Series-prod()

#start_Series-rank_dense()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_dense()
<Series>
<Index>
a        2
b        1
c        0
d        2
<<U1>    <int64>
#end_Series-rank_dense()

#start_Series-rank_max()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_max()
<Series>
<Index>
a        3
b        1
c        0
d        3
<<U1>    <int64>
#end_Series-rank_max()

#start_Series-rank_mean()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_mean()
<Series>
<Index>
a        2.5
b        1.0
c        0.0
d        2.5
<<U1>    <float64>
#end_Series-rank_mean()

#start_Series-rank_min()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_min()
<Series>
<Index>
a        2
b        1
c        0
d        2
<<U1>    <int64>
#end_Series-rank_min()

#start_Series-rank_ordinal()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.rank_ordinal()
<Series>
<Index>
a        2
b        1
c        0
d        3
<<U1>    <int64>
#end_Series-rank_ordinal()

#start_Series-rehierarch()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.rehierarch((1, 0))
<Series>
<IndexHierarchy>
a                1       3
a                2       8
b                1       2
b                2       7
<<U1>            <int64> <int64>
#end_Series-rehierarch()

#start_Series-reindex()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.reindex(('d', 'f', 'e', 'c'), fill_value=-1)
<Series>
<Index>
d        8
f        -1
e        -1
c        0
<<U1>    <int64>
#end_Series-reindex()

#start_Series-relabel()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.relabel(('x', 'y', 'z'))
<Series>
<Index>
x        10
y        2
z        8
<<U1>    <int64>
>>> s.relabel(dict(a='x', b='y'))
<Series>
<Index>
x        10
y        2
c        8
<<U1>    <int64>
>>> s.relabel(lambda l: f'+{l.upper()}+')
<Series>
<Index>
+A+      10
+B+      2
+C+      8
<<U3>    <int64>
#end_Series-relabel()

#start_Series-relabel_flat()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_flat()
<Series>
<Index>
(1, 'a') 3
(1, 'b') 2
(2, 'a') 8
(2, 'b') 7
<object> <int64>
#end_Series-relabel_flat()

#start_Series-relabel_level_add()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_level_add('x')
<Series>
<IndexHierarchy>
x                1       a     3
x                1       b     2
x                2       a     8
x                2       b     7
<<U1>            <int64> <<U1> <int64>
#end_Series-relabel_level_add()

#start_Series-relabel_level_drop()
>>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<Series>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.iloc[:2].relabel_level_drop(1)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_Series-relabel_level_drop()

#start_Series-rename()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> s
<Series: x>
<Index>
a           10
b           2
c           8
<<U1>       <int64>
>>> s.rename('y')
<Series: y>
<Index>
a           10
b           2
c           8
<<U1>       <int64>
#end_Series-rename()

#start_Series-roll()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.roll(2)
<Series>
<Index>
a        34
b        54
c        2
d        8
e        19
<<U1>    <int64>
#end_Series-roll()

#start_Series-sample()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.sample(2, seed=0)
<Series>
<Index>
a        10.235
c        nan
<<U1>    <float64>
#end_Series-sample()

#start_Series-shift()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.shift(2)
<Series>
<Index>
a        nan
b        nan
c        2.0
d        8.0
e        19.0
<<U1>    <float64>
#end_Series-shift()

#start_Series-sort_index()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.sort_index()
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.sort_index(ascending=False)
<Series>
<Index>
d        8
c        0
b        5
a        8
<<U1>    <int64>
#end_Series-sort_index()

#start_Series-sort_values()
>>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        0
d        8
<<U1>    <int64>
>>> s.sort_values()
<Series>
<Index>
c        0
b        5
a        8
d        8
<<U1>    <int64>
>>> s.sort_values(ascending=False)
<Series>
<Index>
d        8
a        8
b        5
c        0
<<U1>    <int64>
#end_Series-sort_values()

#start_Series-std()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.std()
3.39934634239519
#end_Series-std()

#start_Series-sum()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.sum()
20
#end_Series-sum()

#start_Series-tail()
>>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        10.235
b        2.124
c        nan
d        8.734
e        nan
<<U1>    <float64>
>>> s.tail(2)
<Series>
<Index>
d        8.734
e        nan
<<U1>    <float64>
#end_Series-tail()

#start_Series-transpose()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.transpose()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-transpose()

#start_Series-unique()
>>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        8
b        5
c        None
d        8
<<U1>    <object>
>>> s.unique()
[8 5 None]
#end_Series-unique()

#start_Series-var()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.var()
11.555555555555557
#end_Series-var()

#start_Series-__contains__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__contains__('a')
True
#end_Series-__contains__()

#start_Series-__iter__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__iter__())
('a', 'b', 'c')
#end_Series-__iter__()

#start_Series-__reversed__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__reversed__())
('c', 'b', 'a')
#end_Series-__reversed__()

#start_Series-get()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.get('a')
10
>>> s.get('z', -1)
-1
#end_Series-get()

#start_Series-items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.items())
(('a', 10), ('b', 2), ('c', 8))
#end_Series-items()

#start_Series-keys()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.keys()
<Index>
a
b
c
<<U1>
#end_Series-keys()

#start_Series-values
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.values
[10  2  8]
#end_Series-values

#start_Series-interface
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.interface
<Frame: Series>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(values, *, index, name, ... Series   Constructor          Initializer. Args...
from_concat(containers, *, index,... Series   Constructor          Concatenate multi...
from_concat_items(items, *, name,... Series   Constructor          Produce a Series ...
from_dict(mapping, *, dtype, name... Series   Constructor          Series constructi...
from_element(element, *, index, d... Series   Constructor          Create a Series f...
from_items(pairs, *, dtype, name,... Series   Constructor          Series constructi...
from_overlay(containers, *, index... Series   Constructor          Return a new Seri...
from_pandas(value, *, index, inde... Series   Constructor          Given a Pandas Se...
to_frame(axis, *, index, index_co... Series   Exporter             Return a Frame vi...
to_frame_go(axis, *, index, index... Series   Exporter             Return FrameGO vi...
to_frame_he(axis, *, index, index... Series   Exporter             Return FrameHE vi...
to_html(config, style_config)        Series   Exporter             Return an HTML ta...
to_html_datatables(fp, show, config) Series   Exporter             Return a complete...
to_pairs()                           Series   Exporter             Return a tuple of...
to_pandas()                          Series   Exporter             Return a Pandas S...
to_series_he()                       Series   Exporter             Return a SeriesHE...
to_visidata()                        Series   Exporter             Open an interacti...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... Series   Accessor Fill Value
via_fill_value(fill_value).__eq__... Series   Accessor Fill Value
via_fill_value(fill_value).__ne__... Series   Accessor Fill Value
via_fill_value(fill_value).__gt__... Series   Accessor Fill Value
via_fill_value(fill_value).__ge__... Series   Accessor Fill Value
via_fill_value(fill_value).__radd... Series   Accessor Fill Value
via_fill_value(fill_value).__rsub... Series   Accessor Fill Value
via_fill_value(fill_value).__rmul... Series   Accessor Fill Value
via_fill_value(fill_value).__rtru... Series   Accessor Fill Value
via_fill_value(fill_value).__rflo... Series   Accessor Fill Value
via_re(pattern, flags).search(pos... Series   Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... Series   Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... Series   Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... Series   Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... Series   Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... Series   Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... Series   Accessor Regular ... Perform the same ...
<<U87>                               <<U6>    <<U27>               <<U83>
#end_Series-interface

#start_Series-__repr__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> repr(s)
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__repr__()

#start_Series-__str__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> str(s)
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__str__()

#start_Series-display()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-display()

#start_Series-display_tall()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_tall()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-display_tall()

#start_Series-display_wide()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_wide()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-display_wide()

#start_Series-assign[]()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign['c']('x')
<Series>
<Index>
a        2
b        8
c        x
d        34
e        54
<<U1>    <object>
>>> s.assign['c':]('x')
<Series>
<Index>
a        2
b        8
c        x
d        x
e        x
<<U1>    <object>
>>> s.assign[['a', 'd']](('x', 'y'))
<Series>
<Index>
a        x
b        8
c        19
d        y
e        54
<<U1>    <object>
#end_Series-assign[]()

#start_Series-assign[].apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign['c':].apply(lambda s: s / 100)
<Series>
<Index>
a        2.0
b        8.0
c        0.19
d        0.34
e        0.54
<<U1>    <float64>
#end_Series-assign[].apply()

#start_Series-assign.iloc[]()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.iloc[2]('x')
<Series>
<Index>
a        2
b        8
c        x
d        34
e        54
<<U1>    <object>
>>> s.assign.iloc[2:]('x')
<Series>
<Index>
a        2
b        8
c        x
d        x
e        x
<<U1>    <object>
>>> s.assign.iloc[[0, 4]](('x', 'y'))
<Series>
<Index>
a        x
b        8
c        19
d        34
e        y
<<U1>    <object>
#end_Series-assign.iloc[]()

#start_Series-assign.iloc[].apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.iloc[2:].apply(lambda s: s / 100)
<Series>
<Index>
a        2.0
b        8.0
c        0.19
d        0.34
e        0.54
<<U1>    <float64>
#end_Series-assign.iloc[].apply()

#start_Series-assign.loc[]()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.loc['c']('x')
<Series>
<Index>
a        2
b        8
c        x
d        34
e        54
<<U1>    <object>
>>> s.assign.loc['c':]('x')
<Series>
<Index>
a        2
b        8
c        x
d        x
e        x
<<U1>    <object>
>>> s.assign.loc[['a', 'd']](('x', 'y'))
<Series>
<Index>
a        x
b        8
c        19
d        y
e        54
<<U1>    <object>
#end_Series-assign.loc[]()

#start_Series-assign.loc[].apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<Series>
<Index>
a        2
b        8
c        19
d        34
e        54
<<U1>    <int64>
>>> s.assign.loc['c':].apply(lambda s: s / 100)
<Series>
<Index>
a        2.0
b        8.0
c        0.19
d        0.34
e        0.54
<<U1>    <float64>
#end_Series-assign.loc[].apply()

#start_Series-drop[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop['c']
<Series>
<Index>
a        2
b        8
d        34
e        54
<<U1>    <int64>
>>> s.drop['c':]
<Series>
<Index>
a        2
b        8
<<U1>    <int64>
>>> s.drop[['a', 'd']]
<Series>
<Index>
b        8
c        19
e        54
<<U1>    <int64>
#end_Series-drop[]

#start_Series-drop.iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.iloc[2]
<Series>
<Index>
a        2
b        8
d        34
e        54
<<U1>    <int64>
>>> s.drop.iloc[2:]
<Series>
<Index>
a        2
b        8
<<U1>    <int64>
>>> s.drop.iloc[[0, 4]]
<Series>
<Index>
b        8
c        19
d        34
<<U1>    <int64>
#end_Series-drop.iloc[]

#start_Series-drop.loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.loc['c']
<Series>
<Index>
a        2
b        8
d        34
e        54
<<U1>    <int64>
>>> s.drop.loc['c':]
<Series>
<Index>
a        2
b        8
<<U1>    <int64>
>>> s.drop.loc[['a', 'd']]
<Series>
<Index>
b        8
c        19
e        54
<<U1>    <int64>
#end_Series-drop.loc[]

#start_Series-mask[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask['c']
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
>>> s.mask['c':]
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
>>> s.mask[['a', 'd']]
<Series>
<Index>
a        True
b        False
c        False
d        True
e        False
<<U1>    <bool>
#end_Series-mask[]

#start_Series-mask.iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.iloc[2]
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
>>> s.mask.iloc[2:]
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
>>> s.mask.iloc[[0, 4]]
<Series>
<Index>
a        True
b        False
c        False
d        False
e        True
<<U1>    <bool>
#end_Series-mask.iloc[]

#start_Series-mask.loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.loc['c']
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
>>> s.mask.loc['c':]
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
>>> s.mask.loc[['a', 'd']]
<Series>
<Index>
a        True
b        False
c        False
d        True
e        False
<<U1>    <bool>
#end_Series-mask.loc[]

#start_Series-masked_array[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array['c']
[2 8 -- 34 54]
>>> s.masked_array['c':]
[2 8 -- -- --]
>>> s.masked_array[['a', 'd']]
[-- 8 19 -- 54]
#end_Series-masked_array[]

#start_Series-masked_array.iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.iloc[2]
[2 8 -- 34 54]
>>> s.masked_array.iloc[2:]
[2 8 -- -- --]
>>> s.masked_array.iloc[[0, 4]]
[-- 8 19 34 --]
#end_Series-masked_array.iloc[]

#start_Series-masked_array.loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.loc['c']
[2 8 -- 34 54]
>>> s.masked_array.loc['c':]
[2 8 -- -- --]
>>> s.masked_array.loc[['a', 'd']]
[-- 8 19 -- 54]
#end_Series-masked_array.loc[]

#start_Series-[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s['c']
19
>>> s['c':]
<Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>
>>> s[['a', 'd']]
<Series>
<Index>
a        2
d        34
<<U1>    <int64>
#end_Series-[]

#start_Series-iloc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iloc[2]
19
>>> s.iloc[2:]
<Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>
>>> s.iloc[[0, 4]]
<Series>
<Index>
a        2
e        54
<<U1>    <int64>
#end_Series-iloc[]

#start_Series-loc[]
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.loc['c']
19
>>> s.loc['c':]
<Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>
>>> s.loc[['a', 'd']]
<Series>
<Index>
a        2
d        34
<<U1>    <int64>
#end_Series-loc[]

#start_Series-iter_element()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element())
(2, 8, 19, 34, 54)
#end_Series-iter_element()

#start_Series-iter_element().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply(lambda e: e > 10)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_Series-iter_element().apply()

#start_Series-iter_element().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter(lambda e: e > 10))
(False, False, True, True, True)
#end_Series-iter_element().apply_iter()

#start_Series-iter_element().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter_items(lambda e: e > 10))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', True))
#end_Series-iter_element().apply_iter_items()

#start_Series-iter_element().apply_pool()
>>> def func(e): return e > 10
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_Series-iter_element().apply_pool()

#start_Series-iter_element().map_all()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element().map_all({2: 200, 10: -1, 8: 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_Series-iter_element().map_all()

#start_Series-iter_element().map_all_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_all_iter({2: 200, 10: -1, 8: 45}))
(-1, 200, 45)
#end_Series-iter_element().map_all_iter()

#start_Series-iter_element().map_all_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_all_iter_items({2: 200, 10: -1, 8: 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_Series-iter_element().map_all_iter_items()

#start_Series-iter_element().map_any()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element().map_any({10: -1, 8: 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_Series-iter_element().map_any()

#start_Series-iter_element().map_any_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_any_iter({10: -1, 8: 45}))
(-1, 2, 45)
#end_Series-iter_element().map_any_iter()

#start_Series-iter_element().map_any_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_any_iter_items({10: -1, 8: 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_Series-iter_element().map_any_iter_items()

#start_Series-iter_element().map_fill()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element().map_fill({10: -1, 8: 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_Series-iter_element().map_fill()

#start_Series-iter_element().map_fill_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_fill_iter({10: -1, 8: 45}, fill_value=np.nan))
(-1, nan, 45)
#end_Series-iter_element().map_fill_iter()

#start_Series-iter_element().map_fill_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element().map_fill_iter_items({10: -1, 8: 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_Series-iter_element().map_fill_iter_items()

#start_Series-iter_element_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items())
(('a', 2), ('b', 8), ('c', 19), ('d', 34), ('e', 54))
#end_Series-iter_element_items()

#start_Series-iter_element_items().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply(lambda l, e: e > 10 if l != 'c' else 0)
<Series>
<Index>
a        0
b        0
c        0
d        1
e        1
<<U1>    <int64>
#end_Series-iter_element_items().apply()

#start_Series-iter_element_items().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter(lambda l, e: e > 10 and l != 'e'))
(False, False, True, True, False)
#end_Series-iter_element_items().apply_iter()

#start_Series-iter_element_items().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter_items(lambda l, e: e > 10 and l != 'e'))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', False))
#end_Series-iter_element_items().apply_iter_items()

#start_Series-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 10 and pair[0] != 'e'
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_Series-iter_element_items().apply_pool()

#start_Series-iter_element_items().map_all()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element_items().map_all({('b', 2): 200, ('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_Series-iter_element_items().map_all()

#start_Series-iter_element_items().map_all_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_all_iter({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(-1, 200, 45)
#end_Series-iter_element_items().map_all_iter()

#start_Series-iter_element_items().map_all_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_all_iter_items({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_Series-iter_element_items().map_all_iter_items()

#start_Series-iter_element_items().map_any()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element_items().map_any({('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_Series-iter_element_items().map_any()

#start_Series-iter_element_items().map_any_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_any_iter({('a', 10): -1, ('c', 8): 45}))
(-1, 2, 45)
#end_Series-iter_element_items().map_any_iter()

#start_Series-iter_element_items().map_any_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_any_iter_items({('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_Series-iter_element_items().map_any_iter_items()

#start_Series-iter_element_items().map_fill()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.iter_element_items().map_fill({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_Series-iter_element_items().map_fill()

#start_Series-iter_element_items().map_fill_iter()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_fill_iter({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(-1, nan, 45)
#end_Series-iter_element_items().map_fill_iter()

#start_Series-iter_element_items().map_fill_iter_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> tuple(s.iter_element_items().map_fill_iter_items({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_Series-iter_element_items().map_fill_iter_items()

#start_Series-iter_group()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group())
(<Series>
<Index>
a        -2
d        -2
<<U1>    <int64>, <Series>
<Index>
b        8
e        8
<<U1>    <int64>, <Series>
<Index>
c        19
<<U1>    <int64>)
#end_Series-iter_group()

#start_Series-iter_group().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group().apply()

#start_Series-iter_group().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_Series-iter_group().apply_iter()

#start_Series-iter_group().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_Series-iter_group().apply_iter_items()

#start_Series-iter_group().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group().apply_pool()

#start_Series-iter_group_array()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array())
(array([-2, -2]), array([8, 8]), array([19]))
#end_Series-iter_group_array()

#start_Series-iter_group_array().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_array().apply()

#start_Series-iter_group_array().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_Series-iter_group_array().apply_iter()

#start_Series-iter_group_array().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_Series-iter_group_array().apply_iter_items()

#start_Series-iter_group_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_array().apply_pool()

#start_Series-iter_group_array_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items())
((-2, array([-2, -2])), (8, array([8, 8])), (19, array([19])))
#end_Series-iter_group_array_items()

#start_Series-iter_group_array_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_Series-iter_group_array_items().apply()

#start_Series-iter_group_array_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_Series-iter_group_array_items().apply_iter()

#start_Series-iter_group_array_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_Series-iter_group_array_items().apply_iter_items()

#start_Series-iter_group_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_array_items().apply_pool()

#start_Series-iter_group_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items())
((-2, <Series>
<Index>
a        -2
d        -2
<<U1>    <int64>), (8, <Series>
<Index>
b        8
e        8
<<U1>    <int64>), (19, <Series>
<Index>
c        19
<<U1>    <int64>))
#end_Series-iter_group_items()

#start_Series-iter_group_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_Series-iter_group_items().apply()

#start_Series-iter_group_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_Series-iter_group_items().apply_iter()

#start_Series-iter_group_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_Series-iter_group_items().apply_iter_items()

#start_Series-iter_group_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_Series-iter_group_items().apply_pool()

#start_Series-iter_group_labels()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels())
(<Series>
<Index>
a        10
<<U1>    <int64>, <Series>
<Index>
b        2
<<U1>    <int64>, <Series>
<Index>
c        8
<<U1>    <int64>)
#end_Series-iter_group_labels()

#start_Series-iter_group_labels().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels().apply()

#start_Series-iter_group_labels().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels().apply_iter()

#start_Series-iter_group_labels().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels().apply_iter_items()

#start_Series-iter_group_labels().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels().apply_pool()

#start_Series-iter_group_labels_array()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array())
(array([10]), array([2]), array([8]))
#end_Series-iter_group_labels_array()

#start_Series-iter_group_labels_array().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array().apply()

#start_Series-iter_group_labels_array().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels_array().apply_iter()

#start_Series-iter_group_labels_array().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels_array().apply_iter_items()

#start_Series-iter_group_labels_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array().apply_pool()

#start_Series-iter_group_labels_array_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array_items())
(('a', array([10])), ('b', array([2])), ('c', array([8])))
#end_Series-iter_group_labels_array_items()

#start_Series-iter_group_labels_array_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array_items().apply()

#start_Series-iter_group_labels_array_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels_array_items().apply_iter()

#start_Series-iter_group_labels_array_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels_array_items().apply_iter_items()

#start_Series-iter_group_labels_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_array_items().apply_pool()

#start_Series-iter_group_labels_items()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_items())
(('a', <Series>
<Index>
a        10
<<U1>    <int64>), ('b', <Series>
<Index>
b        2
<<U1>    <int64>), ('c', <Series>
<Index>
c        8
<<U1>    <int64>))
#end_Series-iter_group_labels_items()

#start_Series-iter_group_labels_items().apply()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_items().apply()

#start_Series-iter_group_labels_items().apply_iter()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_Series-iter_group_labels_items().apply_iter()

#start_Series-iter_group_labels_items().apply_iter_items()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_Series-iter_group_labels_items().apply_iter_items()

#start_Series-iter_group_labels_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_Series-iter_group_labels_items().apply_pool()

#start_Series-iter_window()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1))
(<Series>
<Index>
a        2
b        8
c        19
<<U1>    <int64>, <Series>
<Index>
b        8
c        19
d        34
<<U1>    <int64>, <Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>)
#end_Series-iter_window()

#start_Series-iter_window().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window().apply()

#start_Series-iter_window().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_Series-iter_window().apply_iter()

#start_Series-iter_window().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_Series-iter_window().apply_iter_items()

#start_Series-iter_window().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window().apply_pool()

#start_Series-iter_window_array()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1))
(array([ 2,  8, 19]), array([ 8, 19, 34]), array([19, 34, 54]))
#end_Series-iter_window_array()

#start_Series-iter_window_array().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_array().apply()

#start_Series-iter_window_array().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_Series-iter_window_array().apply_iter()

#start_Series-iter_window_array().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_Series-iter_window_array().apply_iter_items()

#start_Series-iter_window_array().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_array().apply_pool()

#start_Series-iter_window_array_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1))
(('c', array([ 2,  8, 19])), ('d', array([ 8, 19, 34])), ('e', array([19, 34, 54])))
#end_Series-iter_window_array_items()

#start_Series-iter_window_array_items().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_Series-iter_window_array_items().apply()

#start_Series-iter_window_array_items().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_Series-iter_window_array_items().apply_iter()

#start_Series-iter_window_array_items().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_Series-iter_window_array_items().apply_iter_items()

#start_Series-iter_window_array_items().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_array_items().apply_pool()

#start_Series-iter_window_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1))
(('c', <Series>
<Index>
a        2
b        8
c        19
<<U1>    <int64>), ('d', <Series>
<Index>
b        8
c        19
d        34
<<U1>    <int64>), ('e', <Series>
<Index>
c        19
d        34
e        54
<<U1>    <int64>))
#end_Series-iter_window_items()

#start_Series-iter_window_items().apply()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_Series-iter_window_items().apply()

#start_Series-iter_window_items().apply_iter()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_Series-iter_window_items().apply_iter()

#start_Series-iter_window_items().apply_iter_items()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_Series-iter_window_items().apply_iter_items()

#start_Series-iter_window_items().apply_pool()
>>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_Series-iter_window_items().apply_pool()

#start_Series-__add__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s + 8
<Series>
<Index>
a        18
b        10
c        16
<<U1>    <int64>
>>> s + s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        4.0
c        16.0
<<U1>    <float64>
#end_Series-__add__()

#start_Series-__and__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s & True
<Series>
<Index>
a        False
b        False
c        True
<<U1>    <bool>
>>> s & (True, False, True)
<Series>
<Index>
a        False
b        False
c        True
<<U1>    <bool>
#end_Series-__and__()

#start_Series-__eq__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s == 8
<Series>
<Index>
a        False
b        False
c        True
<<U1>    <bool>
>>> s == s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
#end_Series-__eq__()

#start_Series-__floordiv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s // 8
<Series>
<Index>
a        1
b        0
c        1
<<U1>    <int64>
>>> s // s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        1.0
c        1.0
<<U1>    <float64>
#end_Series-__floordiv__()

#start_Series-__ge__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s >= 8
<Series>
<Index>
a        True
b        False
c        True
<<U1>    <bool>
>>> s >= s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
#end_Series-__ge__()

#start_Series-__gt__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s > 8
<Series>
<Index>
a        True
b        False
c        False
<<U1>    <bool>
>>> s > s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        False
c        False
<<U1>    <bool>
#end_Series-__gt__()

#start_Series-__le__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s <= 8
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
>>> s <= s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        True
c        True
<<U1>    <bool>
#end_Series-__le__()

#start_Series-__lt__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s < 8
<Series>
<Index>
a        False
b        True
c        False
<<U1>    <bool>
>>> s < s.reindex(('c', 'b'))
<Series>
<Index>
a        False
b        False
c        False
<<U1>    <bool>
#end_Series-__lt__()

#start_Series-__matmul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_Series-__matmul__()

#start_Series-__mod__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s % 8
<Series>
<Index>
a        2
b        2
c        0
<<U1>    <int64>
>>> s % s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        0.0
c        0.0
<<U1>    <float64>
#end_Series-__mod__()

#start_Series-__mul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s * 8
<Series>
<Index>
a        80
b        16
c        64
<<U1>    <int64>
>>> s * s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        4.0
c        64.0
<<U1>    <float64>
#end_Series-__mul__()

#start_Series-__ne__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s != 8
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
>>> s != s.reindex(('c', 'b'))
<Series>
<Index>
a        True
b        False
c        False
<<U1>    <bool>
#end_Series-__ne__()

#start_Series-__or__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s | True
<Series>
<Index>
a        True
b        True
c        True
<<U1>    <bool>
>>> s | (True, False, True)
<Series>
<Index>
a        True
b        False
c        True
<<U1>    <bool>
#end_Series-__or__()

#start_Series-__pow__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s ** 8
<Series>
<Index>
a        100000000
b        256
c        16777216
<<U1>    <int64>
>>> s ** s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        4.0
c        16777216.0
<<U1>    <float64>
#end_Series-__pow__()

#start_Series-__radd__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 + s
<Series>
<Index>
a        18
b        10
c        16
<<U1>    <int64>
#end_Series-__radd__()

#start_Series-__rfloordiv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 // s
<Series>
<Index>
a        0
b        4
c        1
<<U1>    <int64>
#end_Series-__rfloordiv__()

#start_Series-__rmatmul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_Series-__rmatmul__()

#start_Series-__rmul__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 * s
<Series>
<Index>
a        80
b        16
c        64
<<U1>    <int64>
#end_Series-__rmul__()

#start_Series-__rshift__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s >> 1
<Series>
<Index>
a        5
b        1
c        4
<<U1>    <int64>
#end_Series-__rshift__()

#start_Series-__rsub__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 - s
<Series>
<Index>
a        -2
b        6
c        0
<<U1>    <int64>
#end_Series-__rsub__()

#start_Series-__rtruediv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 / s
<Series>
<Index>
a        0.8
b        4.0
c        1.0
<<U1>    <float64>
#end_Series-__rtruediv__()

#start_Series-__sub__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s - 8
<Series>
<Index>
a        2
b        -6
c        0
<<U1>    <int64>
>>> s - s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        0.0
c        0.0
<<U1>    <float64>
#end_Series-__sub__()

#start_Series-__truediv__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s / 8
<Series>
<Index>
a        1.25
b        0.25
c        1.0
<<U1>    <float64>
>>> s / s.reindex(('c', 'b'))
<Series>
<Index>
a        nan
b        1.0
c        1.0
<<U1>    <float64>
#end_Series-__truediv__()

#start_Series-__xor__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s ^ True
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
>>> s ^ (True, False, True)
<Series>
<Index>
a        True
b        False
c        False
<<U1>    <bool>
#end_Series-__xor__()

#start_Series-__abs__()
>>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> abs(s)
<Series>
<Index>
a        2
b        8
c        19
d        2
e        8
<<U1>    <int64>
#end_Series-__abs__()

#start_Series-__invert__()
>>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> ~s
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
#end_Series-__invert__()

#start_Series-__neg__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> -s
<Series>
<Index>
a        -10
b        -2
c        -8
<<U1>    <int64>
#end_Series-__neg__()

#start_Series-__pos__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> +s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_Series-__pos__()

#start_Series-via_dt.year
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.year
<Series>
<Index>
a        1517
b        1517
c        1517
d        1517
e        1517
<<U1>    <int64>
#end_Series-via_dt.year

#start_Series-via_dt.month
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.month
<Series>
<Index>
a        1
b        4
c        12
d        6
e        10
<<U1>    <int64>
#end_Series-via_dt.month

#start_Series-via_dt.day
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.day
<Series>
<Index>
a        1
b        1
c        31
d        30
e        1
<<U1>    <int64>
#end_Series-via_dt.day

#start_Series-via_dt.hour
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.hour
<Series>
<Index>
a        0
b        0
c        0
d        0
e        0
<<U1>    <int64>
#end_Series-via_dt.hour

#start_Series-via_dt.minute
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.minute
<Series>
<Index>
a        0
b        0
c        0
d        0
e        0
<<U1>    <int64>
#end_Series-via_dt.minute

#start_Series-via_dt.second
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.second
<Series>
<Index>
a        0
b        0
c        0
d        0
e        0
<<U1>    <int64>
#end_Series-via_dt.second

#start_Series-via_dt.weekday()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.weekday()
<Series>
<Index>
a        0
b        6
c        0
d        5
e        0
<<U1>    <int64>
#end_Series-via_dt.weekday()

#start_Series-via_dt.quarter()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.quarter()
<Series>
<Index>
a        1
b        2
c        4
d        2
e        4
<<U1>    <int64>
#end_Series-via_dt.quarter()

#start_Series-via_dt.is_month_end()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_end()
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_Series-via_dt.is_month_end()

#start_Series-via_dt.is_month_start()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_start()
<Series>
<Index>
a        True
b        True
c        False
d        False
e        True
<<U1>    <bool>
#end_Series-via_dt.is_month_start()

#start_Series-via_dt.is_year_end()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_end()
<Series>
<Index>
a        False
b        False
c        True
d        False
e        False
<<U1>    <bool>
#end_Series-via_dt.is_year_end()

#start_Series-via_dt.is_year_start()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_start()
<Series>
<Index>
a        True
b        False
c        False
d        False
e        False
<<U1>    <bool>
#end_Series-via_dt.is_year_start()

#start_Series-via_dt.is_quarter_end()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_end()
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_Series-via_dt.is_quarter_end()

#start_Series-via_dt.is_quarter_start()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_start()
<Series>
<Index>
a        True
b        True
c        False
d        False
e        True
<<U1>    <bool>
#end_Series-via_dt.is_quarter_start()

#start_Series-via_dt.timetuple()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.timetuple()
<Series>
<Index>
a        time.struct_time(...
b        time.struct_time(...
c        time.struct_time(...
d        time.struct_time(...
e        time.struct_time(...
<<U1>    <object>
#end_Series-via_dt.timetuple()

#start_Series-via_dt.isoformat()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.isoformat()
<Series>
<Index>
a        1517-01-01
b        1517-04-01
c        1517-12-31
d        1517-06-30
e        1517-10-01
<<U1>    <<U10>
#end_Series-via_dt.isoformat()

#start_Series-via_dt.fromisoformat()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'))
>>> s.via_dt.fromisoformat()
<Series>
<Index>
a        1517-01-01
b        1517-04-01
c        1517-12-31
d        1517-06-30
e        1517-10-01
<<U1>    <object>
#end_Series-via_dt.fromisoformat()

#start_Series-via_dt.strftime()
>>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<Series>
<Index>
a        Monday | January
b        Sunday | April
c        Monday | December
d        Saturday | June
e        Monday | October
<<U1>    <<U17>
#end_Series-via_dt.strftime()

#start_Series-via_dt.strptime()
>>> s = sf.Series(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strptime("%m/%d/%Y")
<Series>
<Index>
a        1517-01-01 00:00:00
b        1517-04-01 00:00:00
c        1517-06-30 00:00:00
<<U1>    <object>
#end_Series-via_dt.strptime()

#start_Series-via_dt.strpdate()
>>> s = sf.Series(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strpdate("%m/%d/%Y")
<Series>
<Index>
a        1517-01-01
b        1517-04-01
c        1517-06-30
<<U1>    <object>
#end_Series-via_dt.strpdate()

#start_Series-via_str.__getitem__()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str[-1]
<Series>
<Index>
a
b        Z
c        3
d
<<U1>    <<U1>
#end_Series-via_str.__getitem__()

#start_Series-via_str.capitalize()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.capitalize()
<Series>
<Index>
a        Qrs
b        Xyz
c        123
d         wx
<<U1>    <<U4>
#end_Series-via_str.capitalize()

#start_Series-via_str.center()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.center(8)
<Series>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>    <<U8>
#end_Series-via_str.center()

#start_Series-via_str.contains()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.contains('X')
<Series>
<Index>
a        False
b        True
c        False
d        True
<<U1>    <<U5>
#end_Series-via_str.contains()

#start_Series-via_str.count()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.count('X')
<Series>
<Index>
a        0
b        1
c        0
d        1
<<U1>    <int64>
#end_Series-via_str.count()

#start_Series-via_str.decode()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd')).astype(bytes)
>>> s
<Series>
<Index>
a        b'qrs '
b        b'XYZ'
c        b'123'
d        b' wX '
<<U1>    <|S4>
>>> s.via_str.decode()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
#end_Series-via_str.decode()

#start_Series-via_str.encode()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.encode()
<Series>
<Index>
a        b'qrs '
b        b'XYZ'
c        b'123'
d        b' wX '
<<U1>    <|S4>
#end_Series-via_str.encode()

#start_Series-via_str.endswith()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.endswith(' ')
<Series>
<Index>
a        True
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-via_str.endswith()

#start_Series-via_str.find()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.find('X')
<Series>
<Index>
a        -1
b        0
c        -1
d        2
<<U1>    <int64>
#end_Series-via_str.find()

#start_Series-via_str.index()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.index('X')
ValueError('substring not found')
#end_Series-via_str.index()

#start_Series-via_str.isalnum()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isalnum()
<Series>
<Index>
a        False
b        True
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isalnum()

#start_Series-via_str.isalpha()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isalpha()
<Series>
<Index>
a        False
b        True
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.isalpha()

#start_Series-via_str.isdecimal()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isdecimal()
<Series>
<Index>
a        False
b        False
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isdecimal()

#start_Series-via_str.isdigit()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isdigit()
<Series>
<Index>
a        False
b        False
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isdigit()

#start_Series-via_str.islower()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.islower()
<Series>
<Index>
a        True
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.islower()

#start_Series-via_str.isnumeric()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isnumeric()
<Series>
<Index>
a        False
b        False
c        True
d        False
<<U1>    <bool>
#end_Series-via_str.isnumeric()

#start_Series-via_str.isspace()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isspace()
<Series>
<Index>
a        False
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.isspace()

#start_Series-via_str.istitle()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.istitle()
<Series>
<Index>
a        False
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.istitle()

#start_Series-via_str.isupper()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.isupper()
<Series>
<Index>
a        False
b        True
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.isupper()

#start_Series-via_str.ljust()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.ljust(8)
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U8>
#end_Series-via_str.ljust()

#start_Series-via_str.len()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.len()
<Series>
<Index>
a        4
b        3
c        3
d        4
<<U1>    <int64>
#end_Series-via_str.len()

#start_Series-via_str.lower()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.lower()
<Series>
<Index>
a        qrs
b        xyz
c        123
d         wx
<<U1>    <<U4>
#end_Series-via_str.lower()

#start_Series-via_str.lstrip()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.lstrip()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d        wX
<<U1>    <<U4>
#end_Series-via_str.lstrip()

#start_Series-via_str.partition()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.partition('X')
<Series>
<Index>
a        ('qrs ', '', '')
b        ('', 'X', 'YZ')
c        ('123', '', '')
d        (' w', 'X', ' ')
<<U1>    <object>
#end_Series-via_str.partition()

#start_Series-via_str.replace()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.replace('X', '*')
<Series>
<Index>
a        qrs
b        *YZ
c        123
d         w*
<<U1>    <<U4>
#end_Series-via_str.replace()

#start_Series-via_str.rfind()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rfind('X')
<Series>
<Index>
a        -1
b        0
c        -1
d        2
<<U1>    <int64>
#end_Series-via_str.rfind()

#start_Series-via_str.rindex()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rindex('X')
ValueError('substring not found')
#end_Series-via_str.rindex()

#start_Series-via_str.rjust()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rjust(8)
<Series>
<Index>
a            qrs
b             XYZ
c             123
d             wX
<<U1>    <<U8>
#end_Series-via_str.rjust()

#start_Series-via_str.rpartition()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rpartition('X')
<Series>
<Index>
a        ('', '', 'qrs ')
b        ('', 'X', 'YZ')
c        ('', '', '123')
d        (' w', 'X', ' ')
<<U1>    <object>
#end_Series-via_str.rpartition()

#start_Series-via_str.rsplit()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rsplit('X')
<Series>
<Index>
a        ('qrs ',)
b        ('', 'YZ')
c        ('123',)
d        (' w', ' ')
<<U1>    <object>
#end_Series-via_str.rsplit()

#start_Series-via_str.rstrip()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.rstrip()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
#end_Series-via_str.rstrip()

#start_Series-via_str.split()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.split('X')
<Series>
<Index>
a        ('qrs ',)
b        ('', 'YZ')
c        ('123',)
d        (' w', ' ')
<<U1>    <object>
#end_Series-via_str.split()

#start_Series-via_str.startswith()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.startswith('X')
<Series>
<Index>
a        False
b        True
c        False
d        False
<<U1>    <bool>
#end_Series-via_str.startswith()

#start_Series-via_str.strip()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.strip()
<Series>
<Index>
a        qrs
b        XYZ
c        123
d        wX
<<U1>    <<U4>
#end_Series-via_str.strip()

#start_Series-via_str.swapcase()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.swapcase()
<Series>
<Index>
a        QRS
b        xyz
c        123
d         Wx
<<U1>    <<U4>
#end_Series-via_str.swapcase()

#start_Series-via_str.title()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.title()
<Series>
<Index>
a        Qrs
b        Xyz
c        123
d         Wx
<<U1>    <<U4>
#end_Series-via_str.title()

#start_Series-via_str.upper()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.upper()
<Series>
<Index>
a        QRS
b        XYZ
c        123
d         WX
<<U1>    <<U4>
#end_Series-via_str.upper()

#start_Series-via_str.zfill()
>>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<Series>
<Index>
a        qrs
b        XYZ
c        123
d         wX
<<U1>    <<U4>
>>> s.via_str.zfill(8)
<Series>
<Index>
a        0000qrs
b        00000XYZ
c        00000123
d        0000 wX
<<U1>    <<U8>
#end_Series-via_str.zfill()

#start_Series-via_fill_value().loc
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0).loc[['a', 'c', 'd', 'e']]
<Series>
<Index>
a        10
c        8
d        0
e        0
<<U1>    <int64>
#end_Series-via_fill_value().loc

#start_Series-via_fill_value().__getitem__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0)[['a', 'c', 'd', 'e']]
<Series>
<Index>
a        10
c        8
d        0
e        0
<<U1>    <int64>
#end_Series-via_fill_value().__getitem__()

#start_Series-via_fill_value().via_T
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value().via_T
NotImplementedError('via_T functionality only available on Frame')
#end_Series-via_fill_value().via_T

#start_Series-via_fill_value().__add__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) + s2
<Series>
<Index>
a        10
b        4
c        16
d        19
<<U1>    <int64>
#end_Series-via_fill_value().__add__()

#start_Series-via_fill_value().__sub__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) - s2
<Series>
<Index>
a        10
b        0
c        0
d        -19
<<U1>    <int64>
#end_Series-via_fill_value().__sub__()

#start_Series-via_fill_value().__mul__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) * s2
<Series>
<Index>
a        0
b        4
c        64
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__mul__()

#start_Series-via_fill_value().__truediv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) / s2
<Series>
<Index>
a        inf
b        1.0
c        1.0
d        0.0
<<U1>    <float64>
#end_Series-via_fill_value().__truediv__()

#start_Series-via_fill_value().__floordiv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) // s2
<Series>
<Index>
a        0
b        1
c        1
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__floordiv__()

#start_Series-via_fill_value().__mod__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) % s2
<Series>
<Index>
a        0
b        0
c        0
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__mod__()

#start_Series-via_fill_value().__pow__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) ** s2
<Series>
<Index>
a        1
b        4
c        16777216
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__pow__()

#start_Series-via_fill_value().__lshift__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) << s2
<Series>
<Index>
a        10
b        8
c        2048
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__lshift__()

#start_Series-via_fill_value().__rshift__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >> s2
<Series>
<Index>
a        10
b        0
c        0
d        0
<<U1>    <int64>
#end_Series-via_fill_value().__rshift__()

#start_Series-via_fill_value().__and__()
>>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) & s2
<Series>
<Index>
a        False
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__and__()

#start_Series-via_fill_value().__xor__()
>>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) ^ s2
<Series>
<Index>
a        False
b        False
c        True
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__xor__()

#start_Series-via_fill_value().__or__()
>>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) | s2
<Series>
<Index>
a        False
b        False
c        True
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__or__()

#start_Series-via_fill_value().__lt__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) < s2
<Series>
<Index>
a        False
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__lt__()

#start_Series-via_fill_value().__le__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) <= s2
<Series>
<Index>
a        False
b        True
c        True
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__le__()

#start_Series-via_fill_value().__eq__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) == s2
<Series>
<Index>
a        False
b        True
c        True
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__eq__()

#start_Series-via_fill_value().__ne__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) != s2
<Series>
<Index>
a        True
b        False
c        False
d        True
<<U1>    <bool>
#end_Series-via_fill_value().__ne__()

#start_Series-via_fill_value().__gt__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) > s2
<Series>
<Index>
a        True
b        False
c        False
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__gt__()

#start_Series-via_fill_value().__ge__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >= s2
<Series>
<Index>
a        True
b        True
c        True
d        False
<<U1>    <bool>
#end_Series-via_fill_value().__ge__()

#start_Series-via_fill_value().__radd__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 + s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__radd__()

#start_Series-via_fill_value().__rsub__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 - s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rsub__()

#start_Series-via_fill_value().__rmul__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 * s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rmul__()

#start_Series-via_fill_value().__rtruediv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 / s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rtruediv__()

#start_Series-via_fill_value().__rfloordiv__()
>>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 // s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Series-via_fill_value().__rfloordiv__()

#start_Series-via_re().search()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').search()
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
#end_Series-via_re().search()

#start_Series-via_re().match()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').match()
<Series>
<Index>
a        True
b        True
c        False
<<U1>    <bool>
#end_Series-via_re().match()

#start_Series-via_re().fullmatch()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('123').fullmatch()
<Series>
<Index>
a        False
b        False
c        False
<<U1>    <bool>
#end_Series-via_re().fullmatch()

#start_Series-via_re().split()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').split()
<Series>
<Index>
a        ('', '0')
b        ('', '')
c        ('8',)
<<U1>    <object>
#end_Series-via_re().split()

#start_Series-via_re().findall()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').findall()
<Series>
<Index>
a        ('1',)
b        ('2',)
c        ()
<<U1>    <object>
#end_Series-via_re().findall()

#start_Series-via_re().sub()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').sub('==')
<Series>
<Index>
a        ==0
b        ==
c        8
<<U1>    <<U3>
#end_Series-via_re().sub()

#start_Series-via_re().subn()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
>>> s.via_re('[X123]').subn('==', 1)
<Series>
<Index>
a        ('==0', 1)
b        ('==', 1)
c        ('8', 0)
<<U1>    <object>
#end_Series-via_re().subn()

#start_Series-via_values.apply()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_values.apply(np.sin)
<Series>
<Index>
a        -0.5440211108893699
b        0.9092974268256817
c        0.9893582466233818
<<U1>    <float64>
#end_Series-via_values.apply()

#start_Series-via_values.__array_ufunc__()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> np.sin(s.via_values)
[-0.54402111  0.90929743  0.98935825]
#end_Series-via_values.__array_ufunc__()

#start_SeriesHE-__init__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__init__()

#start_SeriesHE-from_concat()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> s = sf.SeriesHE.from_concat((s1, s2))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
d          4
e          3
f          12
<<U1>      <int64>
#end_SeriesHE-from_concat()

#start_SeriesHE-from_concat_items()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> s = sf.SeriesHE.from_concat_items((('x', s1), ('y', s2)))
>>> s
<SeriesHE>
<IndexHierarchy>
x                a     10
x                b     2
x                c     8
y                d     4
y                e     3
y                f     12
<<U1>            <<U1> <int64>
#end_SeriesHE-from_concat_items()

#start_SeriesHE-from_dict()
>>> s = sf.SeriesHE.from_dict(dict(a=10, b=2, c=8))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-from_dict()

#start_SeriesHE-from_element()
>>> s = sf.SeriesHE.from_element(-1, index=('a', 'b', 'c'), name='x')
>>> s
<SeriesHE: x>
<Index>
a             -1
b             -1
c             -1
<<U1>         <int64>
#end_SeriesHE-from_element()

#start_SeriesHE-from_items()
>>> s = sf.SeriesHE.from_items((('a', 10), ('b', 2), ('c', 8)), name='x')
>>> s
<SeriesHE: x>
<Index>
a             10
b             2
c             8
<<U1>         <int64>
#end_SeriesHE-from_items()

#start_SeriesHE-from_overlay()
>>> s1 = sf.SeriesHE((11, 1, None), index=('a', 'b', 'c'))
>>> s1
<SeriesHE>
<Index>
a          11
b          1
c          None
<<U1>      <object>
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s = sf.SeriesHE.from_overlay((s1, s2))
>>> s
<SeriesHE>
<Index>
a          11
b          1
c          8
d          19
<<U1>      <object>
#end_SeriesHE-from_overlay()

#start_SeriesHE-from_pandas()
>>> df = pd.Series((10, 2, 8), index=('a', 'b', 'c'))
>>> s = sf.SeriesHE.from_pandas(df)
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<object>   <int64>
#end_SeriesHE-from_pandas()

#start_SeriesHE-to_frame()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame()
<Frame>
<Index> 0       <int64>
<Index>
a       10
b       2
c       8
<<U1>   <int64>
#end_SeriesHE-to_frame()

#start_SeriesHE-to_frame_go()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_go()
<FrameGO>
<IndexGO> 0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_SeriesHE-to_frame_go()

#start_SeriesHE-to_frame_he()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_frame_he()
<FrameHE>
<Index>   0       <int64>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_SeriesHE-to_frame_he()

#start_SeriesHE-to_pairs()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pairs()
(('a', 10), ('b', 2), ('c', 8))
#end_SeriesHE-to_pairs()

#start_SeriesHE-to_pandas()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_pandas()
a    10
b     2
c     8
dtype: int64
#end_SeriesHE-to_pandas()

#start_SeriesHE-to_series()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_series()
<Series>
<Index>
a        10
b        2
c        8
<<U1>    <int64>
#end_SeriesHE-to_series()

#start_SeriesHE-to_series_he()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.to_series_he()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-to_series_he()

#start_SeriesHE-STATIC
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.STATIC
True
#end_SeriesHE-STATIC

#start_SeriesHE-T
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.T
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-T

#start_SeriesHE-dtype
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.dtype
int64
#end_SeriesHE-dtype

#start_SeriesHE-index
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.index
<Index>
a
b
c
<<U1>
#end_SeriesHE-index

#start_SeriesHE-mloc
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.mloc
140297251062176
#end_SeriesHE-mloc

#start_SeriesHE-name
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.name
#end_SeriesHE-name

#start_SeriesHE-nbytes
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.nbytes
24
#end_SeriesHE-nbytes

#start_SeriesHE-ndim
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.ndim
1
#end_SeriesHE-ndim

#start_SeriesHE-shape
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.shape
(3,)
#end_SeriesHE-shape

#start_SeriesHE-size
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.size
3
#end_SeriesHE-size

#start_SeriesHE-__array__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__array__()
[10  2  8]
#end_SeriesHE-__array__()

#start_SeriesHE-__array_ufunc__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> np.array((0, 1, 0)) * s
<SeriesHE>
<Index>
a          0
b          2
c          0
<<U1>      <int64>
#end_SeriesHE-__array_ufunc__()

#start_SeriesHE-__bool__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> bool(s)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_SeriesHE-__bool__()

#start_SeriesHE-__deepcopy__()
>>> import copy
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> copy.deepcopy(s)
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__deepcopy__()

#start_SeriesHE-__len__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> len(s)
3
#end_SeriesHE-__len__()

#start_SeriesHE-__round__()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
<<U1>      <float64>
>>> round(s, 1)
<SeriesHE>
<Index>
a          10.2
b          2.1
c          8.7
<<U1>      <float64>
#end_SeriesHE-__round__()

#start_SeriesHE-all()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s.all()
False
#end_SeriesHE-all()

#start_SeriesHE-any()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s.any()
True
#end_SeriesHE-any()

#start_SeriesHE-astype()
>>> s = sf.SeriesHE((11, 1, None), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          11
b          1
c          None
<<U1>      <object>
>>> s.astype(float)
<SeriesHE>
<Index>
a          11.0
b          1.0
c          nan
<<U1>      <float64>
#end_SeriesHE-astype()

#start_SeriesHE-clip()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
<<U1>      <float64>
>>> s.clip(lower=2.5, upper=10.1)
<SeriesHE>
<Index>
a          10.1
b          2.5
c          8.734
<<U1>      <float64>
#end_SeriesHE-clip()

#start_SeriesHE-count()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s.count(skipna=True)
3
>>> s.count(unique=True)
2
#end_SeriesHE-count()

#start_SeriesHE-cov()
>>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.cov(s2)
17.924999999999997
#end_SeriesHE-cov()

#start_SeriesHE-cumprod()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumprod()
<SeriesHE>
<Index>
a          10
b          20
c          160
<<U1>      <int64>
#end_SeriesHE-cumprod()

#start_SeriesHE-cumsum()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.cumsum()
<SeriesHE>
<Index>
a          10
b          12
c          20
<<U1>      <int64>
#end_SeriesHE-cumsum()

#start_SeriesHE-drop_duplicated()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.drop_duplicated()
<SeriesHE>
<Index>
b          5
c          None
<<U1>      <object>
#end_SeriesHE-drop_duplicated()

#start_SeriesHE-dropfalsy()
>>> s = sf.SeriesHE(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          q
b          r
c
d          s
<<U1>      <<U1>
>>> s.dropfalsy()
<SeriesHE>
<Index>
a          q
b          r
d          s
<<U1>      <<U1>
#end_SeriesHE-dropfalsy()

#start_SeriesHE-dropna()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.dropna()
<SeriesHE>
<Index>
a          8
b          5
d          8
<<U1>      <object>
#end_SeriesHE-dropna()

#start_SeriesHE-duplicated()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.duplicated()
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-duplicated()

#start_SeriesHE-equals()
>>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s1.equals(s2)
False
#end_SeriesHE-equals()

#start_SeriesHE-fillfalsy()
>>> s = sf.SeriesHE(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          q
b          r
c
d          s
<<U1>      <<U1>
>>> s.fillfalsy('missing')
<SeriesHE>
<Index>
a          q
b          r
c          missing
d          s
<<U1>      <<U7>
#end_SeriesHE-fillfalsy()

#start_SeriesHE-fillfalsy_backward()
>>> s = sf.SeriesHE(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a
b
c          r
d          s
<<U1>      <<U1>
>>> s.fillfalsy_backward()
<SeriesHE>
<Index>
a          r
b          r
c          r
d          s
<<U1>      <<U1>
#end_SeriesHE-fillfalsy_backward()

#start_SeriesHE-fillfalsy_forward()
>>> s = sf.SeriesHE(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          p
b          q
c
d
<<U1>      <<U1>
>>> s.fillfalsy_forward()
<SeriesHE>
<Index>
a          p
b          q
c          q
d          q
<<U1>      <<U1>
#end_SeriesHE-fillfalsy_forward()

#start_SeriesHE-fillfalsy_leading()
>>> s = sf.SeriesHE(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a
b
c          r
d          s
<<U1>      <<U1>
>>> s.fillfalsy_leading('missing')
<SeriesHE>
<Index>
a          missing
b          missing
c          r
d          s
<<U1>      <<U7>
#end_SeriesHE-fillfalsy_leading()

#start_SeriesHE-fillfalsy_trailing()
>>> s = sf.SeriesHE(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          p
b          q
c
d
<<U1>      <<U1>
>>> s.fillfalsy_trailing('missing')
<SeriesHE>
<Index>
a          p
b          q
c          missing
d          missing
<<U1>      <<U7>
#end_SeriesHE-fillfalsy_trailing()

#start_SeriesHE-fillna()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.fillna(0.0)
<SeriesHE>
<Index>
a          10.235
b          2.124
c          0.0
d          8.734
e          0.0
<<U1>      <float64>
#end_SeriesHE-fillna()

#start_SeriesHE-fillna_backward()
>>> s = sf.SeriesHE((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          nan
b          nan
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
>>> s.fillna_backward()
<SeriesHE>
<Index>
a          10.235
b          10.235
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
#end_SeriesHE-fillna_backward()

#start_SeriesHE-fillna_forward()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          nan
e          nan
<<U1>      <float64>
>>> s.fillna_forward()
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          8.734
e          8.734
<<U1>      <float64>
#end_SeriesHE-fillna_forward()

#start_SeriesHE-fillna_leading()
>>> s = sf.SeriesHE((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          nan
b          nan
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
>>> s.fillna_leading(0.0)
<SeriesHE>
<Index>
a          0.0
b          0.0
c          10.235
d          2.124
e          8.734
<<U1>      <float64>
#end_SeriesHE-fillna_leading()

#start_SeriesHE-fillna_trailing()
>>> s = sf.SeriesHE((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          nan
e          nan
<<U1>      <float64>
>>> s.fillna_trailing(0.0)
<SeriesHE>
<Index>
a          10.235
b          2.124
c          8.734
d          0.0
e          0.0
<<U1>      <float64>
#end_SeriesHE-fillna_trailing()

#start_SeriesHE-head()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.head(2)
<SeriesHE>
<Index>
a          10.235
b          2.124
<<U1>      <float64>
#end_SeriesHE-head()

#start_SeriesHE-iloc_max()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.iloc_max()
0
#end_SeriesHE-iloc_max()

#start_SeriesHE-iloc_min()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.iloc_min()
1
#end_SeriesHE-iloc_min()

#start_SeriesHE-iloc_searchsorted()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.iloc_searchsorted(18)
2
#end_SeriesHE-iloc_searchsorted()

#start_SeriesHE-insert_after()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_after('b', s2)
<SeriesHE>
<Index>
a          10
b          2
d          4
e          3
f          12
c          8
<<U1>      <int64>
#end_SeriesHE-insert_after()

#start_SeriesHE-insert_before()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))
>>> s1.insert_before('b', s2)
<SeriesHE>
<Index>
a          10
d          4
e          3
f          12
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-insert_before()

#start_SeriesHE-isfalsy()
>>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b
c          19
d          0
e          None
<<U1>      <object>
>>> s.isfalsy()
<SeriesHE>
<Index>
a          False
b          True
c          False
d          True
e          True
<<U1>      <bool>
#end_SeriesHE-isfalsy()

#start_SeriesHE-isin()
>>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s.isin((2, 19))
<SeriesHE>
<Index>
a          True
b          False
c          True
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-isin()

#start_SeriesHE-isna()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.isna()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-isna()

#start_SeriesHE-loc_max()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.loc_max()
a
#end_SeriesHE-loc_max()

#start_SeriesHE-loc_min()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.loc_min()
b
#end_SeriesHE-loc_min()

#start_SeriesHE-loc_searchsorted()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.loc_searchsorted(18)
c
#end_SeriesHE-loc_searchsorted()

#start_SeriesHE-max()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.max()
10
#end_SeriesHE-max()

#start_SeriesHE-mean()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.mean()
6.666666666666667
#end_SeriesHE-mean()

#start_SeriesHE-median()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.median()
8.0
#end_SeriesHE-median()

#start_SeriesHE-min()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.min()
2
#end_SeriesHE-min()

#start_SeriesHE-notfalsy()
>>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b
c          19
d          0
e          None
<<U1>      <object>
>>> s.notfalsy()
<SeriesHE>
<Index>
a          True
b          False
c          True
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-notfalsy()

#start_SeriesHE-notna()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.notna()
<SeriesHE>
<Index>
a          True
b          True
c          False
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-notna()

#start_SeriesHE-prod()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.prod()
160
#end_SeriesHE-prod()

#start_SeriesHE-rank_dense()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_dense()
<SeriesHE>
<Index>
a          2
b          1
c          0
d          2
<<U1>      <int64>
#end_SeriesHE-rank_dense()

#start_SeriesHE-rank_max()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_max()
<SeriesHE>
<Index>
a          3
b          1
c          0
d          3
<<U1>      <int64>
#end_SeriesHE-rank_max()

#start_SeriesHE-rank_mean()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_mean()
<SeriesHE>
<Index>
a          2.5
b          1.0
c          0.0
d          2.5
<<U1>      <float64>
#end_SeriesHE-rank_mean()

#start_SeriesHE-rank_min()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_min()
<SeriesHE>
<Index>
a          2
b          1
c          0
d          2
<<U1>      <int64>
#end_SeriesHE-rank_min()

#start_SeriesHE-rank_ordinal()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.rank_ordinal()
<SeriesHE>
<Index>
a          2
b          1
c          0
d          3
<<U1>      <int64>
#end_SeriesHE-rank_ordinal()

#start_SeriesHE-rehierarch()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.rehierarch((1, 0))
<SeriesHE>
<IndexHierarchy>
a                1       3
a                2       8
b                1       2
b                2       7
<<U1>            <int64> <int64>
#end_SeriesHE-rehierarch()

#start_SeriesHE-reindex()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.reindex(('d', 'f', 'e', 'c'), fill_value=-1)
<SeriesHE>
<Index>
d          8
f          -1
e          -1
c          0
<<U1>      <int64>
#end_SeriesHE-reindex()

#start_SeriesHE-relabel()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.relabel(('x', 'y', 'z'))
<SeriesHE>
<Index>
x          10
y          2
z          8
<<U1>      <int64>
>>> s.relabel(dict(a='x', b='y'))
<SeriesHE>
<Index>
x          10
y          2
c          8
<<U1>      <int64>
>>> s.relabel(lambda l: f'+{l.upper()}+')
<SeriesHE>
<Index>
+A+        10
+B+        2
+C+        8
<<U3>      <int64>
#end_SeriesHE-relabel()

#start_SeriesHE-relabel_flat()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_flat()
<SeriesHE>
<Index>
(1, 'a')   3
(1, 'b')   2
(2, 'a')   8
(2, 'b')   7
<object>   <int64>
#end_SeriesHE-relabel_flat()

#start_SeriesHE-relabel_level_add()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.relabel_level_add('x')
<SeriesHE>
<IndexHierarchy>
x                1       a     3
x                1       b     2
x                2       a     8
x                2       b     7
<<U1>            <int64> <<U1> <int64>
#end_SeriesHE-relabel_level_add()

#start_SeriesHE-relabel_level_drop()
>>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))
>>> s
<SeriesHE>
<IndexHierarchy>
1                a     3
1                b     2
2                a     8
2                b     7
<int64>          <<U1> <int64>
>>> s.iloc[:2].relabel_level_drop(1)
<SeriesHE>
<Index>
a          3
b          2
<<U1>      <int64>
#end_SeriesHE-relabel_level_drop()

#start_SeriesHE-rename()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> s
<SeriesHE: x>
<Index>
a             10
b             2
c             8
<<U1>         <int64>
>>> s.rename('y')
<SeriesHE: y>
<Index>
a             10
b             2
c             8
<<U1>         <int64>
#end_SeriesHE-rename()

#start_SeriesHE-roll()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.roll(2)
<SeriesHE>
<Index>
a          34
b          54
c          2
d          8
e          19
<<U1>      <int64>
#end_SeriesHE-roll()

#start_SeriesHE-sample()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.sample(2, seed=0)
<SeriesHE>
<Index>
a          10.235
c          nan
<<U1>      <float64>
#end_SeriesHE-sample()

#start_SeriesHE-shift()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.shift(2)
<SeriesHE>
<Index>
a          nan
b          nan
c          2.0
d          8.0
e          19.0
<<U1>      <float64>
#end_SeriesHE-shift()

#start_SeriesHE-sort_index()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.sort_index()
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.sort_index(ascending=False)
<SeriesHE>
<Index>
d          8
c          0
b          5
a          8
<<U1>      <int64>
#end_SeriesHE-sort_index()

#start_SeriesHE-sort_values()
>>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          0
d          8
<<U1>      <int64>
>>> s.sort_values()
<SeriesHE>
<Index>
c          0
b          5
a          8
d          8
<<U1>      <int64>
>>> s.sort_values(ascending=False)
<SeriesHE>
<Index>
d          8
a          8
b          5
c          0
<<U1>      <int64>
#end_SeriesHE-sort_values()

#start_SeriesHE-std()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.std()
3.39934634239519
#end_SeriesHE-std()

#start_SeriesHE-sum()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.sum()
20
#end_SeriesHE-sum()

#start_SeriesHE-tail()
>>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          10.235
b          2.124
c          nan
d          8.734
e          nan
<<U1>      <float64>
>>> s.tail(2)
<SeriesHE>
<Index>
d          8.734
e          nan
<<U1>      <float64>
#end_SeriesHE-tail()

#start_SeriesHE-transpose()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.transpose()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-transpose()

#start_SeriesHE-unique()
>>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          8
b          5
c          None
d          8
<<U1>      <object>
>>> s.unique()
[8 5 None]
#end_SeriesHE-unique()

#start_SeriesHE-var()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.var()
11.555555555555557
#end_SeriesHE-var()

#start_SeriesHE-__contains__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.__contains__('a')
True
#end_SeriesHE-__contains__()

#start_SeriesHE-__iter__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__iter__())
('a', 'b', 'c')
#end_SeriesHE-__iter__()

#start_SeriesHE-__reversed__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.__reversed__())
('c', 'b', 'a')
#end_SeriesHE-__reversed__()

#start_SeriesHE-get()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.get('a')
10
>>> s.get('z', -1)
-1
#end_SeriesHE-get()

#start_SeriesHE-items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.items())
(('a', 10), ('b', 2), ('c', 8))
#end_SeriesHE-items()

#start_SeriesHE-keys()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.keys()
<Index>
a
b
c
<<U1>
#end_SeriesHE-keys()

#start_SeriesHE-values
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.values
[10  2  8]
#end_SeriesHE-values

#start_SeriesHE-interface
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.interface
<Frame: SeriesHE>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(values, *, index, name, ... SeriesHE Constructor          Initializer. Args...
from_concat(containers, *, index,... SeriesHE Constructor          Concatenate multi...
from_concat_items(items, *, name,... SeriesHE Constructor          Produce a Series ...
from_dict(mapping, *, dtype, name... SeriesHE Constructor          Series constructi...
from_element(element, *, index, d... SeriesHE Constructor          Create a Series f...
from_items(pairs, *, dtype, name,... SeriesHE Constructor          Series constructi...
from_overlay(containers, *, index... SeriesHE Constructor          Return a new Seri...
from_pandas(value, *, index, inde... SeriesHE Constructor          Given a Pandas Se...
to_frame(axis, *, index, index_co... SeriesHE Exporter             Return a Frame vi...
to_frame_go(axis, *, index, index... SeriesHE Exporter             Return FrameGO vi...
to_frame_he(axis, *, index, index... SeriesHE Exporter             Return FrameHE vi...
to_html(config, style_config)        SeriesHE Exporter             Return an HTML ta...
to_html_datatables(fp, show, config) SeriesHE Exporter             Return a complete...
to_pairs()                           SeriesHE Exporter             Return a tuple of...
to_pandas()                          SeriesHE Exporter             Return a Pandas S...
to_series()                          SeriesHE Exporter             Return a Series f...
to_series_he()                       SeriesHE Exporter             Return a SeriesHE...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__eq__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__ne__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__gt__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__ge__... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__radd... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rsub... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rmul... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rtru... SeriesHE Accessor Fill Value
via_fill_value(fill_value).__rflo... SeriesHE Accessor Fill Value
via_re(pattern, flags).search(pos... SeriesHE Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... SeriesHE Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... SeriesHE Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... SeriesHE Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... SeriesHE Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... SeriesHE Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... SeriesHE Accessor Regular ... Perform the same ...
<<U87>                               <<U8>    <<U27>               <<U83>
#end_SeriesHE-interface

#start_SeriesHE-__repr__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> repr(s)
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__repr__()

#start_SeriesHE-__str__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> str(s)
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__str__()

#start_SeriesHE-display()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-display()

#start_SeriesHE-display_tall()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_tall()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-display_tall()

#start_SeriesHE-display_wide()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.display_wide()
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-display_wide()

#start_SeriesHE-assign[]()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign['c']('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          34
e          54
<<U1>      <object>
>>> s.assign['c':]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          x
e          x
<<U1>      <object>
>>> s.assign[['a', 'd']](('x', 'y'))
<SeriesHE>
<Index>
a          x
b          8
c          19
d          y
e          54
<<U1>      <object>
#end_SeriesHE-assign[]()

#start_SeriesHE-assign[].apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign['c':].apply(lambda s: s / 100)
<SeriesHE>
<Index>
a          2.0
b          8.0
c          0.19
d          0.34
e          0.54
<<U1>      <float64>
#end_SeriesHE-assign[].apply()

#start_SeriesHE-assign.iloc[]()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.iloc[2]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          34
e          54
<<U1>      <object>
>>> s.assign.iloc[2:]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          x
e          x
<<U1>      <object>
>>> s.assign.iloc[[0, 4]](('x', 'y'))
<SeriesHE>
<Index>
a          x
b          8
c          19
d          34
e          y
<<U1>      <object>
#end_SeriesHE-assign.iloc[]()

#start_SeriesHE-assign.iloc[].apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.iloc[2:].apply(lambda s: s / 100)
<SeriesHE>
<Index>
a          2.0
b          8.0
c          0.19
d          0.34
e          0.54
<<U1>      <float64>
#end_SeriesHE-assign.iloc[].apply()

#start_SeriesHE-assign.loc[]()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.assign.loc['c']('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          34
e          54
<<U1>      <object>
>>> s.assign.loc['c':]('x')
<SeriesHE>
<Index>
a          2
b          8
c          x
d          x
e          x
<<U1>      <object>
>>> s.assign.loc[['a', 'd']](('x', 'y'))
<SeriesHE>
<Index>
a          x
b          8
c          19
d          y
e          54
<<U1>      <object>
#end_SeriesHE-assign.loc[]()

#start_SeriesHE-assign.loc[].apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s
<SeriesHE>
<Index>
a          2
b          8
c          19
d          34
e          54
<<U1>      <int64>
>>> s.assign.loc['c':].apply(lambda s: s / 100)
<SeriesHE>
<Index>
a          2.0
b          8.0
c          0.19
d          0.34
e          0.54
<<U1>      <float64>
#end_SeriesHE-assign.loc[].apply()

#start_SeriesHE-drop[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop['c']
<SeriesHE>
<Index>
a          2
b          8
d          34
e          54
<<U1>      <int64>
>>> s.drop['c':]
<SeriesHE>
<Index>
a          2
b          8
<<U1>      <int64>
>>> s.drop[['a', 'd']]
<SeriesHE>
<Index>
b          8
c          19
e          54
<<U1>      <int64>
#end_SeriesHE-drop[]

#start_SeriesHE-drop.iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.iloc[2]
<SeriesHE>
<Index>
a          2
b          8
d          34
e          54
<<U1>      <int64>
>>> s.drop.iloc[2:]
<SeriesHE>
<Index>
a          2
b          8
<<U1>      <int64>
>>> s.drop.iloc[[0, 4]]
<SeriesHE>
<Index>
b          8
c          19
d          34
<<U1>      <int64>
#end_SeriesHE-drop.iloc[]

#start_SeriesHE-drop.loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.drop.loc['c']
<SeriesHE>
<Index>
a          2
b          8
d          34
e          54
<<U1>      <int64>
>>> s.drop.loc['c':]
<SeriesHE>
<Index>
a          2
b          8
<<U1>      <int64>
>>> s.drop.loc[['a', 'd']]
<SeriesHE>
<Index>
b          8
c          19
e          54
<<U1>      <int64>
#end_SeriesHE-drop.loc[]

#start_SeriesHE-mask[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask['c']
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
>>> s.mask['c':]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          True
<<U1>      <bool>
>>> s.mask[['a', 'd']]
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-mask[]

#start_SeriesHE-mask.iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.iloc[2]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
>>> s.mask.iloc[2:]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          True
<<U1>      <bool>
>>> s.mask.iloc[[0, 4]]
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-mask.iloc[]

#start_SeriesHE-mask.loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.mask.loc['c']
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
>>> s.mask.loc['c':]
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          True
<<U1>      <bool>
>>> s.mask.loc[['a', 'd']]
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-mask.loc[]

#start_SeriesHE-masked_array[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array['c']
[2 8 -- 34 54]
>>> s.masked_array['c':]
[2 8 -- -- --]
>>> s.masked_array[['a', 'd']]
[-- 8 19 -- 54]
#end_SeriesHE-masked_array[]

#start_SeriesHE-masked_array.iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.iloc[2]
[2 8 -- 34 54]
>>> s.masked_array.iloc[2:]
[2 8 -- -- --]
>>> s.masked_array.iloc[[0, 4]]
[-- 8 19 34 --]
#end_SeriesHE-masked_array.iloc[]

#start_SeriesHE-masked_array.loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.masked_array.loc['c']
[2 8 -- 34 54]
>>> s.masked_array.loc['c':]
[2 8 -- -- --]
>>> s.masked_array.loc[['a', 'd']]
[-- 8 19 -- 54]
#end_SeriesHE-masked_array.loc[]

#start_SeriesHE-[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s['c']
19
>>> s['c':]
<SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>
>>> s[['a', 'd']]
<SeriesHE>
<Index>
a          2
d          34
<<U1>      <int64>
#end_SeriesHE-[]

#start_SeriesHE-iloc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iloc[2]
19
>>> s.iloc[2:]
<SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>
>>> s.iloc[[0, 4]]
<SeriesHE>
<Index>
a          2
e          54
<<U1>      <int64>
#end_SeriesHE-iloc[]

#start_SeriesHE-loc[]
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.loc['c']
19
>>> s.loc['c':]
<SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>
>>> s.loc[['a', 'd']]
<SeriesHE>
<Index>
a          2
d          34
<<U1>      <int64>
#end_SeriesHE-loc[]

#start_SeriesHE-iter_element()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element())
(2, 8, 19, 34, 54)
#end_SeriesHE-iter_element()

#start_SeriesHE-iter_element().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply(lambda e: e > 10)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_SeriesHE-iter_element().apply()

#start_SeriesHE-iter_element().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter(lambda e: e > 10))
(False, False, True, True, True)
#end_SeriesHE-iter_element().apply_iter()

#start_SeriesHE-iter_element().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element().apply_iter_items(lambda e: e > 10))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', True))
#end_SeriesHE-iter_element().apply_iter_items()

#start_SeriesHE-iter_element().apply_pool()
>>> def func(e): return e > 10
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        True
<<U1>    <bool>
#end_SeriesHE-iter_element().apply_pool()

#start_SeriesHE-iter_element().map_all()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element().map_all({2: 200, 10: -1, 8: 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element().map_all()

#start_SeriesHE-iter_element().map_all_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_all_iter({2: 200, 10: -1, 8: 45}))
(-1, 200, 45)
#end_SeriesHE-iter_element().map_all_iter()

#start_SeriesHE-iter_element().map_all_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_all_iter_items({2: 200, 10: -1, 8: 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_SeriesHE-iter_element().map_all_iter_items()

#start_SeriesHE-iter_element().map_any()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element().map_any({10: -1, 8: 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element().map_any()

#start_SeriesHE-iter_element().map_any_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_any_iter({10: -1, 8: 45}))
(-1, 2, 45)
#end_SeriesHE-iter_element().map_any_iter()

#start_SeriesHE-iter_element().map_any_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_any_iter_items({10: -1, 8: 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_SeriesHE-iter_element().map_any_iter_items()

#start_SeriesHE-iter_element().map_fill()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element().map_fill({10: -1, 8: 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_SeriesHE-iter_element().map_fill()

#start_SeriesHE-iter_element().map_fill_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_fill_iter({10: -1, 8: 45}, fill_value=np.nan))
(-1, nan, 45)
#end_SeriesHE-iter_element().map_fill_iter()

#start_SeriesHE-iter_element().map_fill_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element().map_fill_iter_items({10: -1, 8: 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_SeriesHE-iter_element().map_fill_iter_items()

#start_SeriesHE-iter_element_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items())
(('a', 2), ('b', 8), ('c', 19), ('d', 34), ('e', 54))
#end_SeriesHE-iter_element_items()

#start_SeriesHE-iter_element_items().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply(lambda l, e: e > 10 if l != 'c' else 0)
<Series>
<Index>
a        0
b        0
c        0
d        1
e        1
<<U1>    <int64>
#end_SeriesHE-iter_element_items().apply()

#start_SeriesHE-iter_element_items().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter(lambda l, e: e > 10 and l != 'e'))
(False, False, True, True, False)
#end_SeriesHE-iter_element_items().apply_iter()

#start_SeriesHE-iter_element_items().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_element_items().apply_iter_items(lambda l, e: e > 10 and l != 'e'))
(('a', False), ('b', False), ('c', True), ('d', True), ('e', False))
#end_SeriesHE-iter_element_items().apply_iter_items()

#start_SeriesHE-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 10 and pair[0] != 'e'
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_element_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        False
b        False
c        True
d        True
e        False
<<U1>    <bool>
#end_SeriesHE-iter_element_items().apply_pool()

#start_SeriesHE-iter_element_items().map_all()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element_items().map_all({('b', 2): 200, ('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        200
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element_items().map_all()

#start_SeriesHE-iter_element_items().map_all_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_all_iter({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(-1, 200, 45)
#end_SeriesHE-iter_element_items().map_all_iter()

#start_SeriesHE-iter_element_items().map_all_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_all_iter_items({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 200), ('c', 45))
#end_SeriesHE-iter_element_items().map_all_iter_items()

#start_SeriesHE-iter_element_items().map_any()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element_items().map_any({('a', 10): -1, ('c', 8): 45})
<Series>
<Index>
a        -1
b        2
c        45
<<U1>    <int64>
#end_SeriesHE-iter_element_items().map_any()

#start_SeriesHE-iter_element_items().map_any_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_any_iter({('a', 10): -1, ('c', 8): 45}))
(-1, 2, 45)
#end_SeriesHE-iter_element_items().map_any_iter()

#start_SeriesHE-iter_element_items().map_any_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_any_iter_items({('a', 10): -1, ('c', 8): 45}))
(('a', -1), ('b', 2), ('c', 45))
#end_SeriesHE-iter_element_items().map_any_iter_items()

#start_SeriesHE-iter_element_items().map_fill()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.iter_element_items().map_fill({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
c        45.0
<<U1>    <float64>
#end_SeriesHE-iter_element_items().map_fill()

#start_SeriesHE-iter_element_items().map_fill_iter()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_fill_iter({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(-1, nan, 45)
#end_SeriesHE-iter_element_items().map_fill_iter()

#start_SeriesHE-iter_element_items().map_fill_iter_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> tuple(s.iter_element_items().map_fill_iter_items({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))
(('a', -1), ('b', nan), ('c', 45))
#end_SeriesHE-iter_element_items().map_fill_iter_items()

#start_SeriesHE-iter_group()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group())
(<SeriesHE>
<Index>
a          -2
d          -2
<<U1>      <int64>, <SeriesHE>
<Index>
b          8
e          8
<<U1>      <int64>, <SeriesHE>
<Index>
c          19
<<U1>      <int64>)
#end_SeriesHE-iter_group()

#start_SeriesHE-iter_group().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group().apply()

#start_SeriesHE-iter_group().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_SeriesHE-iter_group().apply_iter()

#start_SeriesHE-iter_group().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_SeriesHE-iter_group().apply_iter_items()

#start_SeriesHE-iter_group().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group().apply_pool()

#start_SeriesHE-iter_group_array()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array())
(array([-2, -2]), array([8, 8]), array([19]))
#end_SeriesHE-iter_group_array()

#start_SeriesHE-iter_group_array().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply(lambda s: s.sum())
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_array().apply()

#start_SeriesHE-iter_group_array().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter(lambda s: s.sum()))
(-4, 16, 19)
#end_SeriesHE-iter_group_array().apply_iter()

#start_SeriesHE-iter_group_array().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array().apply_iter_items(lambda s: s.sum()))
((-2, -4), (8, 16), (19, 19))
#end_SeriesHE-iter_group_array().apply_iter_items()

#start_SeriesHE-iter_group_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_array().apply_pool()

#start_SeriesHE-iter_group_array_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items())
((-2, array([-2, -2])), (8, array([8, 8])), (19, array([19])))
#end_SeriesHE-iter_group_array_items()

#start_SeriesHE-iter_group_array_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_SeriesHE-iter_group_array_items().apply()

#start_SeriesHE-iter_group_array_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_SeriesHE-iter_group_array_items().apply_iter()

#start_SeriesHE-iter_group_array_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_SeriesHE-iter_group_array_items().apply_iter_items()

#start_SeriesHE-iter_group_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_array_items().apply_pool()

#start_SeriesHE-iter_group_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items())
((-2, <SeriesHE>
<Index>
a          -2
d          -2
<<U1>      <int64>), (8, <SeriesHE>
<Index>
b          8
e          8
<<U1>      <int64>), (19, <SeriesHE>
<Index>
c          19
<<U1>      <int64>))
#end_SeriesHE-iter_group_items()

#start_SeriesHE-iter_group_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
-2       -4
8        (2,)
19       19
<int64>  <object>
#end_SeriesHE-iter_group_items().apply()

#start_SeriesHE-iter_group_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-4, -1, 19)
#end_SeriesHE-iter_group_items().apply_iter()

#start_SeriesHE-iter_group_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
((-2, -4), (8, -1), (19, 19))
#end_SeriesHE-iter_group_items().apply_iter_items()

#start_SeriesHE-iter_group_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_items().apply_pool(func, use_threads=True)
<Series>
<Index>
-2       -4
8        16
19       19
<int64>  <int64>
#end_SeriesHE-iter_group_items().apply_pool()

#start_SeriesHE-iter_group_labels()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels())
(<SeriesHE>
<Index>
a          10
<<U1>      <int64>, <SeriesHE>
<Index>
b          2
<<U1>      <int64>, <SeriesHE>
<Index>
c          8
<<U1>      <int64>)
#end_SeriesHE-iter_group_labels()

#start_SeriesHE-iter_group_labels().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels().apply()

#start_SeriesHE-iter_group_labels().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels().apply_iter()

#start_SeriesHE-iter_group_labels().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels().apply_iter_items()

#start_SeriesHE-iter_group_labels().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels().apply_pool()

#start_SeriesHE-iter_group_labels_array()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array())
(array([10]), array([2]), array([8]))
#end_SeriesHE-iter_group_labels_array()

#start_SeriesHE-iter_group_labels_array().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply(lambda s: s.sum())
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array().apply()

#start_SeriesHE-iter_group_labels_array().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter(lambda s: s.sum()))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels_array().apply_iter()

#start_SeriesHE-iter_group_labels_array().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array().apply_iter_items(lambda s: s.sum()))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels_array().apply_iter_items()

#start_SeriesHE-iter_group_labels_array().apply_pool()
>>> def func(s): return s.sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array().apply_pool()

#start_SeriesHE-iter_group_labels_array_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_array_items())
(('a', array([10])), ('b', array([2])), ('c', array([8])))
#end_SeriesHE-iter_group_labels_array_items()

#start_SeriesHE-iter_group_labels_array_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array_items().apply()

#start_SeriesHE-iter_group_labels_array_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels_array_items().apply_iter()

#start_SeriesHE-iter_group_labels_array_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels_array_items().apply_iter_items()

#start_SeriesHE-iter_group_labels_array_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_array_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_array_items().apply_pool()

#start_SeriesHE-iter_group_labels_items()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> tuple(s.iter_group_labels_items())
(('a', <SeriesHE>
<Index>
a          10
<<U1>      <int64>), ('b', <SeriesHE>
<Index>
b          2
<<U1>      <int64>), ('c', <SeriesHE>
<Index>
c          8
<<U1>      <int64>))
#end_SeriesHE-iter_group_labels_items()

#start_SeriesHE-iter_group_labels_items().apply()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_items().apply()

#start_SeriesHE-iter_group_labels_items().apply_iter()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))
(-2, 8, 19, -2, 8)
#end_SeriesHE-iter_group_labels_items().apply_iter()

#start_SeriesHE-iter_group_labels_items().apply_iter_items()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_group_labels_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))
(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))
#end_SeriesHE-iter_group_labels_items().apply_iter_items()

#start_SeriesHE-iter_group_labels_items().apply_pool()
>>> def func(pair): return pair[1].sum()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_group_labels_items().apply_pool(func, use_threads=True)
<Series>
<Index>
a        -2
b        8
c        19
d        -2
e        8
<<U1>    <int64>
#end_SeriesHE-iter_group_labels_items().apply_pool()

#start_SeriesHE-iter_window()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1))
(<SeriesHE>
<Index>
a          2
b          8
c          19
<<U1>      <int64>, <SeriesHE>
<Index>
b          8
c          19
d          34
<<U1>      <int64>, <SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>)
#end_SeriesHE-iter_window()

#start_SeriesHE-iter_window().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window().apply()

#start_SeriesHE-iter_window().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_SeriesHE-iter_window().apply_iter()

#start_SeriesHE-iter_window().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_SeriesHE-iter_window().apply_iter_items()

#start_SeriesHE-iter_window().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window().apply_pool()

#start_SeriesHE-iter_window_array()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1))
(array([ 2,  8, 19]), array([ 8, 19, 34]), array([19, 34, 54]))
#end_SeriesHE-iter_window_array()

#start_SeriesHE-iter_window_array().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply(lambda s: s.sum())
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array().apply()

#start_SeriesHE-iter_window_array().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter(lambda s: s.sum()))
(29, 61, 107)
#end_SeriesHE-iter_window_array().apply_iter()

#start_SeriesHE-iter_window_array().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array(size=3, step=1).apply_iter_items(lambda s: s.sum()))
(('c', 29), ('d', 61), ('e', 107))
#end_SeriesHE-iter_window_array().apply_iter_items()

#start_SeriesHE-iter_window_array().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array().apply_pool()

#start_SeriesHE-iter_window_array_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1))
(('c', array([ 2,  8, 19])), ('d', array([ 8, 19, 34])), ('e', array([19, 34, 54])))
#end_SeriesHE-iter_window_array_items()

#start_SeriesHE-iter_window_array_items().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array_items().apply()

#start_SeriesHE-iter_window_array_items().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_SeriesHE-iter_window_array_items().apply_iter()

#start_SeriesHE-iter_window_array_items().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_SeriesHE-iter_window_array_items().apply_iter_items()

#start_SeriesHE-iter_window_array_items().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_array_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_array_items().apply_pool()

#start_SeriesHE-iter_window_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1))
(('c', <SeriesHE>
<Index>
a          2
b          8
c          19
<<U1>      <int64>), ('d', <SeriesHE>
<Index>
b          8
c          19
d          34
<<U1>      <int64>), ('e', <SeriesHE>
<Index>
c          19
d          34
e          54
<<U1>      <int64>))
#end_SeriesHE-iter_window_items()

#start_SeriesHE-iter_window_items().apply()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)
<Series>
<Index>
c        29
d        -1
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_items().apply()

#start_SeriesHE-iter_window_items().apply_iter()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))
(29, -1, 107)
#end_SeriesHE-iter_window_items().apply_iter()

#start_SeriesHE-iter_window_items().apply_iter_items()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> tuple(s.iter_window_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))
(('c', 29), ('d', -1), ('e', 107))
#end_SeriesHE-iter_window_items().apply_iter_items()

#start_SeriesHE-iter_window_items().apply_pool()
>>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))
>>> s.iter_window_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)
<Series>
<Index>
c        29
d        61
e        107
<<U1>    <int64>
#end_SeriesHE-iter_window_items().apply_pool()

#start_SeriesHE-__add__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s + 8
<SeriesHE>
<Index>
a          18
b          10
c          16
<<U1>      <int64>
>>> s + s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          4.0
c          16.0
<<U1>      <float64>
#end_SeriesHE-__add__()

#start_SeriesHE-__and__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s & True
<SeriesHE>
<Index>
a          False
b          False
c          True
<<U1>      <bool>
>>> s & (True, False, True)
<SeriesHE>
<Index>
a          False
b          False
c          True
<<U1>      <bool>
#end_SeriesHE-__and__()

#start_SeriesHE-__eq__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s == 8
False
>>> s == s.reindex(('c', 'b'))
False
#end_SeriesHE-__eq__()

#start_SeriesHE-__floordiv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s // 8
<SeriesHE>
<Index>
a          1
b          0
c          1
<<U1>      <int64>
>>> s // s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          1.0
c          1.0
<<U1>      <float64>
#end_SeriesHE-__floordiv__()

#start_SeriesHE-__ge__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s >= 8
<SeriesHE>
<Index>
a          True
b          False
c          True
<<U1>      <bool>
>>> s >= s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          True
c          True
<<U1>      <bool>
#end_SeriesHE-__ge__()

#start_SeriesHE-__gt__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s > 8
<SeriesHE>
<Index>
a          True
b          False
c          False
<<U1>      <bool>
>>> s > s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-__gt__()

#start_SeriesHE-__le__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s <= 8
<SeriesHE>
<Index>
a          False
b          True
c          True
<<U1>      <bool>
>>> s <= s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          True
c          True
<<U1>      <bool>
#end_SeriesHE-__le__()

#start_SeriesHE-__lt__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s < 8
<SeriesHE>
<Index>
a          False
b          True
c          False
<<U1>      <bool>
>>> s < s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          False
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-__lt__()

#start_SeriesHE-__matmul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_SeriesHE-__matmul__()

#start_SeriesHE-__mod__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s % 8
<SeriesHE>
<Index>
a          2
b          2
c          0
<<U1>      <int64>
>>> s % s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          0.0
c          0.0
<<U1>      <float64>
#end_SeriesHE-__mod__()

#start_SeriesHE-__mul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s * 8
<SeriesHE>
<Index>
a          80
b          16
c          64
<<U1>      <int64>
>>> s * s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          4.0
c          64.0
<<U1>      <float64>
#end_SeriesHE-__mul__()

#start_SeriesHE-__ne__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s != 8
True
>>> s != s.reindex(('c', 'b'))
True
#end_SeriesHE-__ne__()

#start_SeriesHE-__or__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s | True
<SeriesHE>
<Index>
a          True
b          True
c          True
<<U1>      <bool>
>>> s | (True, False, True)
<SeriesHE>
<Index>
a          True
b          False
c          True
<<U1>      <bool>
#end_SeriesHE-__or__()

#start_SeriesHE-__pow__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s ** 8
<SeriesHE>
<Index>
a          100000000
b          256
c          16777216
<<U1>      <int64>
>>> s ** s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          4.0
c          16777216.0
<<U1>      <float64>
#end_SeriesHE-__pow__()

#start_SeriesHE-__radd__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 + s
<SeriesHE>
<Index>
a          18
b          10
c          16
<<U1>      <int64>
#end_SeriesHE-__radd__()

#start_SeriesHE-__rfloordiv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 // s
<SeriesHE>
<Index>
a          0
b          4
c          1
<<U1>      <int64>
#end_SeriesHE-__rfloordiv__()

#start_SeriesHE-__rmatmul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s @ (3, 0, 4)
62
#end_SeriesHE-__rmatmul__()

#start_SeriesHE-__rmul__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 * s
<SeriesHE>
<Index>
a          80
b          16
c          64
<<U1>      <int64>
#end_SeriesHE-__rmul__()

#start_SeriesHE-__rshift__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s >> 1
<SeriesHE>
<Index>
a          5
b          1
c          4
<<U1>      <int64>
#end_SeriesHE-__rshift__()

#start_SeriesHE-__rsub__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 - s
<SeriesHE>
<Index>
a          -2
b          6
c          0
<<U1>      <int64>
#end_SeriesHE-__rsub__()

#start_SeriesHE-__rtruediv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> 8 / s
<SeriesHE>
<Index>
a          0.8
b          4.0
c          1.0
<<U1>      <float64>
#end_SeriesHE-__rtruediv__()

#start_SeriesHE-__sub__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s - 8
<SeriesHE>
<Index>
a          2
b          -6
c          0
<<U1>      <int64>
>>> s - s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          0.0
c          0.0
<<U1>      <float64>
#end_SeriesHE-__sub__()

#start_SeriesHE-__truediv__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s / 8
<SeriesHE>
<Index>
a          1.25
b          0.25
c          1.0
<<U1>      <float64>
>>> s / s.reindex(('c', 'b'))
<SeriesHE>
<Index>
a          nan
b          1.0
c          1.0
<<U1>      <float64>
#end_SeriesHE-__truediv__()

#start_SeriesHE-__xor__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s ^ True
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
>>> s ^ (True, False, True)
<SeriesHE>
<Index>
a          True
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-__xor__()

#start_SeriesHE-__abs__()
>>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))
>>> abs(s)
<SeriesHE>
<Index>
a          2
b          8
c          19
d          2
e          8
<<U1>      <int64>
#end_SeriesHE-__abs__()

#start_SeriesHE-__invert__()
>>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> ~s
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
#end_SeriesHE-__invert__()

#start_SeriesHE-__neg__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> -s
<SeriesHE>
<Index>
a          -10
b          -2
c          -8
<<U1>      <int64>
#end_SeriesHE-__neg__()

#start_SeriesHE-__pos__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> +s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
#end_SeriesHE-__pos__()

#start_SeriesHE-via_dt.year
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.year
<SeriesHE>
<Index>
a          1517
b          1517
c          1517
d          1517
e          1517
<<U1>      <int64>
#end_SeriesHE-via_dt.year

#start_SeriesHE-via_dt.month
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.month
<SeriesHE>
<Index>
a          1
b          4
c          12
d          6
e          10
<<U1>      <int64>
#end_SeriesHE-via_dt.month

#start_SeriesHE-via_dt.day
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.day
<SeriesHE>
<Index>
a          1
b          1
c          31
d          30
e          1
<<U1>      <int64>
#end_SeriesHE-via_dt.day

#start_SeriesHE-via_dt.hour
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.hour
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.hour

#start_SeriesHE-via_dt.minute
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.minute
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.minute

#start_SeriesHE-via_dt.second
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.second
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.second

#start_SeriesHE-via_dt.weekday()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.weekday()
<SeriesHE>
<Index>
a          0
b          6
c          0
d          5
e          0
<<U1>      <int64>
#end_SeriesHE-via_dt.weekday()

#start_SeriesHE-via_dt.quarter()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.quarter()
<SeriesHE>
<Index>
a          1
b          2
c          4
d          2
e          4
<<U1>      <int64>
#end_SeriesHE-via_dt.quarter()

#start_SeriesHE-via_dt.is_month_end()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_end()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_month_end()

#start_SeriesHE-via_dt.is_month_start()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_month_start()
<SeriesHE>
<Index>
a          True
b          True
c          False
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-via_dt.is_month_start()

#start_SeriesHE-via_dt.is_year_end()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_end()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_year_end()

#start_SeriesHE-via_dt.is_year_start()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_year_start()
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_year_start()

#start_SeriesHE-via_dt.is_quarter_end()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_end()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
e          False
<<U1>      <bool>
#end_SeriesHE-via_dt.is_quarter_end()

#start_SeriesHE-via_dt.is_quarter_start()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.is_quarter_start()
<SeriesHE>
<Index>
a          True
b          True
c          False
d          False
e          True
<<U1>      <bool>
#end_SeriesHE-via_dt.is_quarter_start()

#start_SeriesHE-via_dt.timetuple()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.timetuple()
<SeriesHE>
<Index>
a          time.struct_time(...
b          time.struct_time(...
c          time.struct_time(...
d          time.struct_time(...
e          time.struct_time(...
<<U1>      <object>
#end_SeriesHE-via_dt.timetuple()

#start_SeriesHE-via_dt.isoformat()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.isoformat()
<SeriesHE>
<Index>
a          1517-01-01
b          1517-04-01
c          1517-12-31
d          1517-06-30
e          1517-10-01
<<U1>      <<U10>
#end_SeriesHE-via_dt.isoformat()

#start_SeriesHE-via_dt.fromisoformat()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'))
>>> s.via_dt.fromisoformat()
<SeriesHE>
<Index>
a          1517-01-01
b          1517-04-01
c          1517-12-31
d          1517-06-30
e          1517-10-01
<<U1>      <object>
#end_SeriesHE-via_dt.fromisoformat()

#start_SeriesHE-via_dt.strftime()
>>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<SeriesHE>
<Index>
a          Monday | January
b          Sunday | April
c          Monday | December
d          Saturday | June
e          Monday | October
<<U1>      <<U17>
#end_SeriesHE-via_dt.strftime()

#start_SeriesHE-via_dt.strptime()
>>> s = sf.SeriesHE(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strptime("%m/%d/%Y")
<SeriesHE>
<Index>
a          1517-01-01 00:00:00
b          1517-04-01 00:00:00
c          1517-06-30 00:00:00
<<U1>      <object>
#end_SeriesHE-via_dt.strptime()

#start_SeriesHE-via_dt.strpdate()
>>> s = sf.SeriesHE(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))
>>> s.via_dt.strpdate("%m/%d/%Y")
<SeriesHE>
<Index>
a          1517-01-01
b          1517-04-01
c          1517-06-30
<<U1>      <object>
#end_SeriesHE-via_dt.strpdate()

#start_SeriesHE-via_str.__getitem__()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str[-1]
<SeriesHE>
<Index>
a
b          Z
c          3
d
<<U1>      <<U1>
#end_SeriesHE-via_str.__getitem__()

#start_SeriesHE-via_str.capitalize()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.capitalize()
<SeriesHE>
<Index>
a          Qrs
b          Xyz
c          123
d           wx
<<U1>      <<U4>
#end_SeriesHE-via_str.capitalize()

#start_SeriesHE-via_str.center()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.center(8)
<SeriesHE>
<Index>
a            qrs
b            XYZ
c            123
d             wX
<<U1>      <<U8>
#end_SeriesHE-via_str.center()

#start_SeriesHE-via_str.contains()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.contains('X')
<SeriesHE>
<Index>
a          False
b          True
c          False
d          True
<<U1>      <<U5>
#end_SeriesHE-via_str.contains()

#start_SeriesHE-via_str.count()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.count('X')
<SeriesHE>
<Index>
a          0
b          1
c          0
d          1
<<U1>      <int64>
#end_SeriesHE-via_str.count()

#start_SeriesHE-via_str.decode()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd')).astype(bytes)
>>> s
<SeriesHE>
<Index>
a          b'qrs '
b          b'XYZ'
c          b'123'
d          b' wX '
<<U1>      <|S4>
>>> s.via_str.decode()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
#end_SeriesHE-via_str.decode()

#start_SeriesHE-via_str.encode()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.encode()
<SeriesHE>
<Index>
a          b'qrs '
b          b'XYZ'
c          b'123'
d          b' wX '
<<U1>      <|S4>
#end_SeriesHE-via_str.encode()

#start_SeriesHE-via_str.endswith()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.endswith(' ')
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-via_str.endswith()

#start_SeriesHE-via_str.find()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.find('X')
<SeriesHE>
<Index>
a          -1
b          0
c          -1
d          2
<<U1>      <int64>
#end_SeriesHE-via_str.find()

#start_SeriesHE-via_str.index()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.index('X')
ValueError('substring not found')
#end_SeriesHE-via_str.index()

#start_SeriesHE-via_str.isalnum()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isalnum()
<SeriesHE>
<Index>
a          False
b          True
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isalnum()

#start_SeriesHE-via_str.isalpha()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isalpha()
<SeriesHE>
<Index>
a          False
b          True
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isalpha()

#start_SeriesHE-via_str.isdecimal()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isdecimal()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isdecimal()

#start_SeriesHE-via_str.isdigit()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isdigit()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isdigit()

#start_SeriesHE-via_str.islower()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.islower()
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.islower()

#start_SeriesHE-via_str.isnumeric()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isnumeric()
<SeriesHE>
<Index>
a          False
b          False
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isnumeric()

#start_SeriesHE-via_str.isspace()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isspace()
<SeriesHE>
<Index>
a          False
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isspace()

#start_SeriesHE-via_str.istitle()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.istitle()
<SeriesHE>
<Index>
a          False
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.istitle()

#start_SeriesHE-via_str.isupper()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.isupper()
<SeriesHE>
<Index>
a          False
b          True
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.isupper()

#start_SeriesHE-via_str.ljust()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.ljust(8)
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U8>
#end_SeriesHE-via_str.ljust()

#start_SeriesHE-via_str.len()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.len()
<SeriesHE>
<Index>
a          4
b          3
c          3
d          4
<<U1>      <int64>
#end_SeriesHE-via_str.len()

#start_SeriesHE-via_str.lower()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.lower()
<SeriesHE>
<Index>
a          qrs
b          xyz
c          123
d           wx
<<U1>      <<U4>
#end_SeriesHE-via_str.lower()

#start_SeriesHE-via_str.lstrip()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.lstrip()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d          wX
<<U1>      <<U4>
#end_SeriesHE-via_str.lstrip()

#start_SeriesHE-via_str.partition()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.partition('X')
<SeriesHE>
<Index>
a          ('qrs ', '', '')
b          ('', 'X', 'YZ')
c          ('123', '', '')
d          (' w', 'X', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.partition()

#start_SeriesHE-via_str.replace()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.replace('X', '*')
<SeriesHE>
<Index>
a          qrs
b          *YZ
c          123
d           w*
<<U1>      <<U4>
#end_SeriesHE-via_str.replace()

#start_SeriesHE-via_str.rfind()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rfind('X')
<SeriesHE>
<Index>
a          -1
b          0
c          -1
d          2
<<U1>      <int64>
#end_SeriesHE-via_str.rfind()

#start_SeriesHE-via_str.rindex()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rindex('X')
ValueError('substring not found')
#end_SeriesHE-via_str.rindex()

#start_SeriesHE-via_str.rjust()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rjust(8)
<SeriesHE>
<Index>
a              qrs
b               XYZ
c               123
d               wX
<<U1>      <<U8>
#end_SeriesHE-via_str.rjust()

#start_SeriesHE-via_str.rpartition()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rpartition('X')
<SeriesHE>
<Index>
a          ('', '', 'qrs ')
b          ('', 'X', 'YZ')
c          ('', '', '123')
d          (' w', 'X', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.rpartition()

#start_SeriesHE-via_str.rsplit()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rsplit('X')
<SeriesHE>
<Index>
a          ('qrs ',)
b          ('', 'YZ')
c          ('123',)
d          (' w', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.rsplit()

#start_SeriesHE-via_str.rstrip()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.rstrip()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
#end_SeriesHE-via_str.rstrip()

#start_SeriesHE-via_str.split()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.split('X')
<SeriesHE>
<Index>
a          ('qrs ',)
b          ('', 'YZ')
c          ('123',)
d          (' w', ' ')
<<U1>      <object>
#end_SeriesHE-via_str.split()

#start_SeriesHE-via_str.startswith()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.startswith('X')
<SeriesHE>
<Index>
a          False
b          True
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_str.startswith()

#start_SeriesHE-via_str.strip()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.strip()
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d          wX
<<U1>      <<U4>
#end_SeriesHE-via_str.strip()

#start_SeriesHE-via_str.swapcase()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.swapcase()
<SeriesHE>
<Index>
a          QRS
b          xyz
c          123
d           Wx
<<U1>      <<U4>
#end_SeriesHE-via_str.swapcase()

#start_SeriesHE-via_str.title()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.title()
<SeriesHE>
<Index>
a          Qrs
b          Xyz
c          123
d           Wx
<<U1>      <<U4>
#end_SeriesHE-via_str.title()

#start_SeriesHE-via_str.upper()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.upper()
<SeriesHE>
<Index>
a          QRS
b          XYZ
c          123
d           WX
<<U1>      <<U4>
#end_SeriesHE-via_str.upper()

#start_SeriesHE-via_str.zfill()
>>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))
>>> s
<SeriesHE>
<Index>
a          qrs
b          XYZ
c          123
d           wX
<<U1>      <<U4>
>>> s.via_str.zfill(8)
<SeriesHE>
<Index>
a          0000qrs
b          00000XYZ
c          00000123
d          0000 wX
<<U1>      <<U8>
#end_SeriesHE-via_str.zfill()

#start_SeriesHE-via_fill_value().loc
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0).loc[['a', 'c', 'd', 'e']]
<SeriesHE>
<Index>
a          10
c          8
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().loc

#start_SeriesHE-via_fill_value().__getitem__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value(0)[['a', 'c', 'd', 'e']]
<SeriesHE>
<Index>
a          10
c          8
d          0
e          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__getitem__()

#start_SeriesHE-via_fill_value().via_T
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_fill_value().via_T
NotImplementedError('via_T functionality only available on Frame')
#end_SeriesHE-via_fill_value().via_T

#start_SeriesHE-via_fill_value().__add__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) + s2
<SeriesHE>
<Index>
a          10
b          4
c          16
d          19
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__add__()

#start_SeriesHE-via_fill_value().__sub__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) - s2
<SeriesHE>
<Index>
a          10
b          0
c          0
d          -19
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__sub__()

#start_SeriesHE-via_fill_value().__mul__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) * s2
<SeriesHE>
<Index>
a          0
b          4
c          64
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__mul__()

#start_SeriesHE-via_fill_value().__truediv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) / s2
<SeriesHE>
<Index>
a          inf
b          1.0
c          1.0
d          0.0
<<U1>      <float64>
#end_SeriesHE-via_fill_value().__truediv__()

#start_SeriesHE-via_fill_value().__floordiv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) // s2
<SeriesHE>
<Index>
a          0
b          1
c          1
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__floordiv__()

#start_SeriesHE-via_fill_value().__mod__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) % s2
<SeriesHE>
<Index>
a          0
b          0
c          0
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__mod__()

#start_SeriesHE-via_fill_value().__pow__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) ** s2
<SeriesHE>
<Index>
a          1
b          4
c          16777216
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__pow__()

#start_SeriesHE-via_fill_value().__lshift__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) << s2
<SeriesHE>
<Index>
a          10
b          8
c          2048
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__lshift__()

#start_SeriesHE-via_fill_value().__rshift__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >> s2
<SeriesHE>
<Index>
a          10
b          0
c          0
d          0
<<U1>      <int64>
#end_SeriesHE-via_fill_value().__rshift__()

#start_SeriesHE-via_fill_value().__and__()
>>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) & s2
<SeriesHE>
<Index>
a          False
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__and__()

#start_SeriesHE-via_fill_value().__xor__()
>>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) ^ s2
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__xor__()

#start_SeriesHE-via_fill_value().__or__()
>>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))
>>> s1.via_fill_value(False) | s2
<SeriesHE>
<Index>
a          False
b          False
c          True
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__or__()

#start_SeriesHE-via_fill_value().__lt__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) < s2
<SeriesHE>
<Index>
a          False
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__lt__()

#start_SeriesHE-via_fill_value().__le__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) <= s2
<SeriesHE>
<Index>
a          False
b          True
c          True
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__le__()

#start_SeriesHE-via_fill_value().__eq__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) == s2
<SeriesHE>
<Index>
a          False
b          True
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__eq__()

#start_SeriesHE-via_fill_value().__ne__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) != s2
<SeriesHE>
<Index>
a          True
b          False
c          False
d          True
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__ne__()

#start_SeriesHE-via_fill_value().__gt__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) > s2
<SeriesHE>
<Index>
a          True
b          False
c          False
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__gt__()

#start_SeriesHE-via_fill_value().__ge__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s1.via_fill_value(0) >= s2
<SeriesHE>
<Index>
a          True
b          True
c          True
d          False
<<U1>      <bool>
#end_SeriesHE-via_fill_value().__ge__()

#start_SeriesHE-via_fill_value().__radd__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 + s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__radd__()

#start_SeriesHE-via_fill_value().__rsub__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 - s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rsub__()

#start_SeriesHE-via_fill_value().__rmul__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 * s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rmul__()

#start_SeriesHE-via_fill_value().__rtruediv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 / s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rtruediv__()

#start_SeriesHE-via_fill_value().__rfloordiv__()
>>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))
>>> s2 // s1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_SeriesHE-via_fill_value().__rfloordiv__()

#start_SeriesHE-via_re().search()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').search()
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
#end_SeriesHE-via_re().search()

#start_SeriesHE-via_re().match()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').match()
<SeriesHE>
<Index>
a          True
b          True
c          False
<<U1>      <bool>
#end_SeriesHE-via_re().match()

#start_SeriesHE-via_re().fullmatch()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('123').fullmatch()
<SeriesHE>
<Index>
a          False
b          False
c          False
<<U1>      <bool>
#end_SeriesHE-via_re().fullmatch()

#start_SeriesHE-via_re().split()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').split()
<SeriesHE>
<Index>
a          ('', '0')
b          ('', '')
c          ('8',)
<<U1>      <object>
#end_SeriesHE-via_re().split()

#start_SeriesHE-via_re().findall()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').findall()
<SeriesHE>
<Index>
a          ('1',)
b          ('2',)
c          ()
<<U1>      <object>
#end_SeriesHE-via_re().findall()

#start_SeriesHE-via_re().sub()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').sub('==')
<SeriesHE>
<Index>
a          ==0
b          ==
c          8
<<U1>      <<U3>
#end_SeriesHE-via_re().sub()

#start_SeriesHE-via_re().subn()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s
<SeriesHE>
<Index>
a          10
b          2
c          8
<<U1>      <int64>
>>> s.via_re('[X123]').subn('==', 1)
<SeriesHE>
<Index>
a          ('==0', 1)
b          ('==', 1)
c          ('8', 0)
<<U1>      <object>
#end_SeriesHE-via_re().subn()

#start_SeriesHE-via_values.apply()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> s.via_values.apply(np.sin)
<SeriesHE>
<Index>
a          -0.5440211108893699
b          0.9092974268256817
c          0.9893582466233818
<<U1>      <float64>
#end_SeriesHE-via_values.apply()

#start_SeriesHE-via_values.__array_ufunc__()
>>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))
>>> np.sin(s.via_values)
[-0.54402111  0.90929743  0.98935825]
#end_SeriesHE-via_values.__array_ufunc__()

#start_Frame-__init__()
>>> sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
#end_Frame-__init__()

#start_Frame-from_arrow()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> aw = f1.to_arrow()
>>> aw
pyarrow.Table
__index0__: string
a: int64
b: int64
----
__index0__: [["p","q","r"]]
a: [[0,2,4]]
b: [[1,3,5]]
>>> sf.Frame.from_arrow(aw, index_depth=1)
<Frame>
<Index>  a       b       <<U1>
<Index>
p        0       1
q        2       3
r        4       5
<object> <int64> <int64>
#end_Frame-from_arrow()

#start_Frame-from_concat()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.Frame.from_concat((f1, f2), axis=1)
<Frame>
<Index> a       b       c      d      <<U1>
<Index>
p       0       1       False  True
q       2       3       False  True
r       4       5       False  True
<<U1>   <int64> <int64> <bool> <bool>
>>> sf.Frame.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)
<Frame>
<Index> a        b        <<U1>
<Index>
0       0        1
1       2        3
2       4        5
3       False    True
4       False    True
5       False    True
<int64> <object> <object>
#end_Frame-from_concat()

#start_Frame-from_concat_items()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.Frame.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)
<Frame>
<IndexHierarchy> x       x       y      y      <<U1>
                 a       b       c      d      <<U1>
<Index>
p                0       1       False  True
q                2       3       False  True
r                4       5       False  True
<<U1>            <int64> <int64> <bool> <bool>
>>> sf.Frame.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)
<Frame>
<Index>                a        b        <<U1>
<IndexHierarchy>
x                p     0        1
x                q     2        3
x                r     4        5
y                p     False    True
y                q     False    True
y                r     False    True
<<U1>            <<U1> <object> <object>
#end_Frame-from_concat_items()

#start_Frame-from_csv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> open('/tmp/f.csv').read()
__index0__,a,b
p,0,1
q,2,3
r,4,5

>>> sf.Frame.from_csv('/tmp/f.csv', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_csv()

#start_Frame-from_delimited()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> open('/tmp/f.psv').read()
__index0__|a|b
p|0|1
q|2|3
r|4|5

>>> sf.Frame.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_delimited()

#start_Frame-from_dict()
>>> sf.Frame.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')
<Frame: x>
<Index>    a       b               <<U1>
<Index>
0          10      1517-01-01
1          2       1517-04-01
2          8       1517-12-31
3          3       1517-06-30
<int64>    <int64> <datetime64[D]>
#end_Frame-from_dict()

#start_Frame-from_dict_records()
>>> sf.Frame.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_dict_records()

#start_Frame-from_dict_records_items()
>>> sf.Frame.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_dict_records_items()

#start_Frame-from_element()
>>> sf.Frame.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       0
q          0       0
r          0       0
<<U1>      <int64> <int64>
#end_Frame-from_element()

#start_Frame-from_element_items()
>>> sf.Frame.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)
ErrorInitTypeBlocks('mismatched row count: 1: 2')
#end_Frame-from_element_items()

#start_Frame-from_elements()
>>> sf.Frame.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')
<Frame: x>
<Index>    a       <<U1>
<Index>
p          10
q          2
r          8
s          3
<<U1>      <int64>
#end_Frame-from_elements()

#start_Frame-from_fields()
>>> sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_fields()

#start_Frame-from_hdf5()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_hdf5('/tmp/f.hdf5')
>>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-from_hdf5()

#start_Frame-from_items()
>>> sf.Frame.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-from_items()

#start_Frame-from_json()
>>> sf.Frame.from_json('[{"a": 10, "b": false, "c": "1517-01-01"}, {"a": 8, "b": true, "c": "1517-04-01"}]', dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          8       True   1517-04-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_json()

#start_Frame-from_msgpack()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> mb = f1.to_msgpack()
>>> mb
b'\x85\xc4\x02sf\xa5Frame\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
>>> sf.Frame.from_msgpack(mb)
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-from_msgpack()

#start_Frame-from_npy()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_npy()

#start_Frame-from_npy_mmap()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> f2, closer = sf.Frame.from_npy_mmap('/tmp/f.npy')
>>> f2
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> closer() # close mmaps after usage
#end_Frame-from_npy_mmap()

#start_Frame-from_npz()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_npz()

#start_Frame-from_overlay()
>>> f1 = sf.Frame.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f1
<Frame: x>
<Index>    a         b        <<U1>
<Index>
p          10.0      qrs
q          2.0       XYZ
r          nan       None
s          3.0       None
<<U1>      <float64> <object>
>>> f2 = sf.Frame.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')
>>> f2
<Frame: y>
<Index>    a       b     <<U1>
<Index>
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> sf.Frame.from_overlay((f1, f2))
<Frame>
<Index> a         b        <<U1>
<Index>
p       10.0      qrs
q       2.0       XYZ
r       8.0       123
s       3.0        wX
<<U1>   <float64> <object>
#end_Frame-from_overlay()

#start_Frame-from_pandas()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> df = f1.to_pandas()
>>> df
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
>>> sf.Frame.from_pandas(df, dtypes=dict(b=str))
<Frame: x>
<Index>    a       b     <object>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<object>   <int64> <<U4>
#end_Frame-from_pandas()

#start_Frame-from_parquet()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
>>> sf.Frame.from_parquet('/tmp/f.parquet', index_depth=1)
<Frame>
<Index>  a       b        <<U1>
<Index>
p        10      qrs
q        2       XYZ
r        8       123
s        3        wX
<object> <int64> <object>
#end_Frame-from_parquet()

#start_Frame-from_pickle()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-from_pickle()

#start_Frame-from_records()
>>> sf.Frame.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_records()

#start_Frame-from_records_items()
>>> sf.Frame.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-from_records_items()

#start_Frame-from_series()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> sf.Frame.from_series(s)
<Frame>
<Index> x       <<U1>
<Index>
a       10
b       2
c       8
<<U1>   <int64>
#end_Frame-from_series()

#start_Frame-from_sql()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_Frame-from_sql()

#start_Frame-from_sqlite()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> sf.Frame.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)
<Frame: x>
<Index>    a       b      c          <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <<U10>
#end_Frame-from_sqlite()

#start_Frame-from_structured_array()
>>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])
>>> sa
[(False,  8) ( True, 19)]
>>> sf.Frame.from_structured_array(sa)
<Frame>
<Index> a      b       <<U1>
<Index>
0       False  8
1       True   19
<int64> <bool> <int64>
#end_Frame-from_structured_array()

#start_Frame-from_tsv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> open('/tmp/f.tsv').read()
__index0__	a	b
p	0	1
q	2	3
r	4	5

>>> sf.Frame.from_tsv('/tmp/f.tsv', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_tsv()

#start_Frame-from_xlsx()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
>>> sf.Frame.from_xlsx('/tmp/f.xlsx', index_depth=1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       3
r       4       5
<<U1>   <int64> <int64>
#end_Frame-from_xlsx()

#start_Frame-to_arrow()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_arrow()
pyarrow.Table
__index0__: string
a: int64
b: string
----
__index0__: [["p","q","r","s"]]
a: [[10,2,8,3]]
b: [["qrs ","XYZ","123"," wX "]]
#end_Frame-to_arrow()

#start_Frame-to_csv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> open('/tmp/f.csv').read()
__index0__,a,b
p,0,1
q,2,3
r,4,5

#end_Frame-to_csv()

#start_Frame-to_delimited()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> open('/tmp/f.psv').read()
__index0__|a|b
p|0|1
q|2|3
r|4|5

#end_Frame-to_delimited()

#start_Frame-to_frame()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame()
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_Frame-to_frame()

#start_Frame-to_frame_go()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_go()
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_Frame-to_frame_go()

#start_Frame-to_frame_he()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_he()
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_Frame-to_frame_he()

#start_Frame-to_hdf5()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_hdf5('/tmp/f.h5')
#end_Frame-to_hdf5()

#start_Frame-to_latex()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_latex()
\begin{table}[ht]
\centering
\begin{tabular}{c c c}
\hline\hline
   & a   & b    \\
\hline
p  & 10  & qrs  \\
q  & 2   & XYZ  \\
r  & 8   & 123  \\
s  & 3   &  wX  \\
\hline\end{tabular}
\end{table}
#end_Frame-to_latex()

#start_Frame-to_markdown()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_markdown()
|  |a  |b   |
|--|---|----|
|p |10 |qrs |
|q |2  |XYZ |
|r |8  |123 |
|s |3  | wX |
#end_Frame-to_markdown()

#start_Frame-to_msgpack()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_msgpack()
b'\x85\xc4\x02sf\xa5Frame\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
#end_Frame-to_msgpack()

#start_Frame-to_npy()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-to_npy()

#start_Frame-to_npz()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-to_npz()

#start_Frame-to_pairs()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pairs()
(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))
#end_Frame-to_pairs()

#start_Frame-to_pandas()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pandas()
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
#end_Frame-to_pandas()

#start_Frame-to_parquet()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
#end_Frame-to_parquet()

#start_Frame-to_pickle()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-to_pickle()

#start_Frame-to_rst()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_rst()
+--+---+----+
|  |a  |b   |
+==+===+====+
|p |10 |qrs |
+--+---+----+
|q |2  |XYZ |
+--+---+----+
|r |8  |123 |
+--+---+----+
|s |3  | wX |
+--+---+----+
#end_Frame-to_rst()

#start_Frame-to_series()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_series()
<Series: x>
<Index>
('p', 'a')  10
('p', 'b')  qrs
('q', 'a')  2
('q', 'b')  XYZ
('r', 'a')  8
('r', 'b')  123
('s', 'a')  3
('s', 'b')   wX
<object>    <object>
#end_Frame-to_series()

#start_Frame-to_sqlite()
>>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_Frame-to_sqlite()

#start_Frame-to_tsv()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> open('/tmp/f.tsv').read()
__index0__	a	b
p	0	1
q	2	3
r	4	5

#end_Frame-to_tsv()

#start_Frame-to_xarray()
>>> s = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_xarray()
<xarray.Dataset>
Dimensions:     (__index0__: 4)
Coordinates:
  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'
Data variables:
    a           (__index0__) int64 10 2 8 3
    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '
#end_Frame-to_xarray()

#start_Frame-to_xlsx()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
#end_Frame-to_xlsx()

#start_Frame-STATIC
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.STATIC
True
#end_Frame-STATIC

#start_Frame-T
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.T
<Frame: x>
<Index>    0          1          2          3          <int64>
<Index>
a          10         2          8          3
b          False      True       True       False
c          1517-01-01 1517-04-01 1517-12-31 1517-06-30
<<U1>      <object>   <object>   <object>   <object>
#end_Frame-T

#start_Frame-columns
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.columns
<Index>
a
b
c
<<U1>
#end_Frame-columns

#start_Frame-dtypes
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.dtypes
<Series: x>
<Index>
a           int64
b           bool
c           datetime64[D]
<<U1>       <object>
#end_Frame-dtypes

#start_Frame-index
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.index
<Index>
0
1
2
3
<int64>
#end_Frame-index

#start_Frame-mloc
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.mloc
[140297248201216 140297216561808 140297249199008]
#end_Frame-mloc

#start_Frame-name
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.name
x
#end_Frame-name

#start_Frame-nbytes
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.nbytes
68
#end_Frame-nbytes

#start_Frame-ndim
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.ndim
2
#end_Frame-ndim

#start_Frame-shape
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.shape
(4, 3)
#end_Frame-shape

#start_Frame-size
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.size
12
#end_Frame-size

#start_Frame-__array__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.__array__()
[[0 1]
 [2 3]
 [4 5]]
#end_Frame-__array__()

#start_Frame-__array_ufunc__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> np.array((1, 0)) * f
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       2       0
r       4       0
<<U1>   <int64> <int64>
#end_Frame-__array_ufunc__()

#start_Frame-__bool__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> bool(f)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_Frame-__bool__()

#start_Frame-__deepcopy__()
>>> import copy
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> copy.deepcopy(f)
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
#end_Frame-__deepcopy__()

#start_Frame-__len__()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> len(f)
3
#end_Frame-__len__()

#start_Frame-__round__()
>>> f = sf.Frame((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f
<Frame: y>
<Index>    a                  b                  <<U1>
<Index>
p          0.0                1.3333333333333333
q          2.6666666666666665 4.0
r          5.333333333333333  6.666666666666667
<<U1>      <float64>          <float64>
>>> round(f, 1)
<Frame: y>
<Index>    a         b         <<U1>
<Index>
p          0.0       1.3
q          2.7       4.0
r          5.3       6.7
<<U1>      <float64> <float64>
#end_Frame-__round__()

#start_Frame-all()
>>> f = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.all()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_Frame-all()

#start_Frame-any()
>>> f = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.any()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_Frame-any()

#start_Frame-astype[]()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.astype['c'](object)
<Frame: x>
<Index>    a       b      c          <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <object>
#end_Frame-astype[]()

#start_Frame-astype()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
>>> f.astype(float)
<Frame: x>
<Index>    a         b         <<U1>
<Index>
p          0.0       1.0
q          2.0       3.0
r          4.0       5.0
<<U1>      <float64> <float64>
#end_Frame-astype()

#start_Frame-clip()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
>>> f.clip(lower=2, upper=4)
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       2
q          2       3
r          4       4
<<U1>      <int64> <int64>
#end_Frame-clip()

#start_Frame-count()
>>> f = sf.Frame.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a         b        <<U1>
<Index>
p          10.0      qrs
q          2.0       XYZ
r          nan       None
s          3.0       None
<<U1>      <float64> <object>
>>> f.count(skipna=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
>>> f.count(unique=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_Frame-count()

#start_Frame-cov()
>>> f1 = sf.Frame((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.cov()
<Frame: x>
<Index>    a                  b                  c                  d                  <<U1>
<Index>
a          58.666666666666664 84.0               112.0              142.66666666666666
b          84.0               123.0              166.66666666666666 215.0
c          112.0              166.66666666666666 229.33333333333331 300.0
d          142.66666666666666 215.0              300.0              397.66666666666663
<<U1>      <float64>          <float64>          <float64>          <float64>
#end_Frame-cov()

#start_Frame-cumprod()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumprod()
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       0       3
r       0       15
<<U1>   <int64> <int64>
#end_Frame-cumprod()

#start_Frame-cumsum()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumsum()
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       1
q       2       4
r       6       9
<<U1>   <int64> <int64>
#end_Frame-cumsum()

#start_Frame-drop_duplicated()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.drop_duplicated()
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
2          nan       None     NaT
<int64>    <float64> <object> <datetime64[D]>
#end_Frame-drop_duplicated()

#start_Frame-dropfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.dropfalsy()
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
#end_Frame-dropfalsy()

#start_Frame-dropna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.dropna()
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
#end_Frame-dropna()

#start_Frame-duplicated()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.duplicated()
<Series>
<Index>
0        False
1        True
2        False
3        True
<int64>  <bool>
#end_Frame-duplicated()

#start_Frame-equals()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f1.equals(f2)
False
#end_Frame-equals()

#start_Frame-fillfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          1       abc   2022-01-10
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
#end_Frame-fillfalsy()

#start_Frame-fillfalsy_backward()
>>> f = sf.Frame.from_fields(((0, 0, 10, 2), (0, 8, 3, 8), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          0       0       0
1          0       8       0
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_backward()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          10      8       1
2          10      3       1
3          2       8       1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_backward()

#start_Frame-fillfalsy_forward()
>>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       0
2          0       8       0
3          0       0       0
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_forward()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       1
2          2       8       1
3          2       8       1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_forward()

#start_Frame-fillfalsy_leading()
>>> f = sf.Frame.from_fields(((0, 0, 10, 2), (0, 8, 3, 8), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          0       0       0
1          0       8       0
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_leading(-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          -1      -1      -1
1          -1      8       -1
2          10      3       -1
3          2       8       1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_leading()

#start_Frame-fillfalsy_trailing()
>>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       0
2          0       8       0
3          0       0       0
<int64>    <int64> <int64> <int64>
>>> f.fillfalsy_trailing(-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          10      8       1
1          2       3       -1
2          -1      8       -1
3          -1      -1      -1
<int64>    <int64> <int64> <int64>
#end_Frame-fillfalsy_trailing()

#start_Frame-fillna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b     c               <<U1>
<Index>
0          10.0      qrs   1517-01-01
1          2.0       XYZ   1517-04-01
2          nan             NaT
3          2.0       123   1517-04-01
<int64>    <float64> <<U4> <datetime64[D]>
>>> f.fillna(-1)
<Frame: x>
<Index>    a         b     c          <<U1>
<Index>
0          10.0      qrs   1517-01-01
1          2.0       XYZ   1517-04-01
2          -1.0            -1
3          2.0       123   1517-04-01
<int64>    <float64> <<U4> <object>
#end_Frame-fillna()

#start_Frame-fillna_backward()
>>> f = sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          nan       nan       nan
1          nan       8.0       nan
2          10.0      3.0       nan
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
>>> f.fillna_backward()
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          10.0      8.0       1.0
2          10.0      3.0       1.0
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_backward()

#start_Frame-fillna_forward()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.fillna_forward()
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       1.0
2          2.0       8.0       1.0
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_forward()

#start_Frame-fillna_leading()
>>> f = sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          nan       nan       nan
1          nan       8.0       nan
2          10.0      3.0       nan
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
>>> f.fillna_leading(-1)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          -1.0      -1.0      -1.0
1          -1.0      8.0       -1.0
2          10.0      3.0       -1.0
3          2.0       8.0       1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_leading()

#start_Frame-fillna_trailing()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.fillna_trailing(-1)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       -1.0
2          -1.0      8.0       -1.0
3          -1.0      -1.0      -1.0
<int64>    <float64> <float64> <float64>
#end_Frame-fillna_trailing()

#start_Frame-head()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.head(2)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-head()

#start_Frame-iloc_max()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.iloc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_Frame-iloc_max()

#start_Frame-iloc_min()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.iloc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_Frame-iloc_min()

#start_Frame-insert_after()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_after('b', f2)
<Frame: x>
<Index>    a       b       c      d      <<U1>
<Index>
p          0       1       False  True
q          2       3       False  True
r          4       5       False  True
<<U1>      <int64> <int64> <bool> <bool>
#end_Frame-insert_after()

#start_Frame-insert_before()
>>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_before('b', f2)
<Frame: x>
<Index>    a       c      d      b       <<U1>
<Index>
p          0       False  True   1
q          2       False  True   3
r          4       False  True   5
<<U1>      <int64> <bool> <bool> <int64>
#end_Frame-insert_before()

#start_Frame-isfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.isfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  False
2       True   True   True
3       False  False  False
<int64> <bool> <bool> <bool>
#end_Frame-isfalsy()

#start_Frame-isin()
>>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f.isin((0, 8))
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          False  True   False
1          False  False  True
2          True   True   True
3          True   True   True
<int64>    <bool> <bool> <bool>
#end_Frame-isin()

#start_Frame-isna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.isna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  True
2       True   False  True
3       True   True   True
<int64> <bool> <bool> <bool>
#end_Frame-isna()

#start_Frame-join_inner()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_inner(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_inner()

#start_Frame-join_left()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_left(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_left()

#start_Frame-join_outer()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_outer(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_outer()

#start_Frame-join_right()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_right(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_Frame-join_right()

#start_Frame-loc_max()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.loc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_Frame-loc_max()

#start_Frame-loc_min()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.loc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_Frame-loc_min()

#start_Frame-max()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.max()
<Series>
<Index>
a        4
b        5
<<U1>    <int64>
#end_Frame-max()

#start_Frame-mean()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.mean()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_Frame-mean()

#start_Frame-median()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.median()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_Frame-median()

#start_Frame-min()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.min()
<Series>
<Index>
a        0
b        1
<<U1>    <int64>
#end_Frame-min()

#start_Frame-notfalsy()
>>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          0             NaT
3          2       123   1517-04-01
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.notfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   True
2       False  False  False
3       True   True   True
<int64> <bool> <bool> <bool>
#end_Frame-notfalsy()

#start_Frame-notna()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          10.0      8.0       1.0
1          2.0       3.0       nan
2          nan       8.0       nan
3          nan       nan       nan
<int64>    <float64> <float64> <float64>
>>> f.notna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   False
2       False  True   False
3       False  False  False
<int64> <bool> <bool> <bool>
#end_Frame-notna()

#start_Frame-pivot()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot(index_fields='b', columns_fields='c')
<Frame>
<Index: c> 0         1         <int64>
<Index: b>
0          11.0      nan
3          10.0      nan
8          nan       6.0
<int64>    <float64> <float64>
#end_Frame-pivot()

#start_Frame-pivot_stack()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot_stack()
<Frame: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
#end_Frame-pivot_stack()

#start_Frame-pivot_unstack()
>>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = f1.pivot_stack()
>>> f2
<Frame: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
>>> f2.pivot_unstack()
<Frame: x>
<IndexHierarchy> 0       0       0       <int64>
                 a       b       c       <<U1>
<Index>
0                11      0       0
1                4       8       1
2                10      3       0
3                2       8       1
<int64>          <int64> <int64> <int64>
#end_Frame-pivot_unstack()

#start_Frame-prod()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.prod()
<Series>
<Index>
a        0
b        15
<<U1>    <int64>
#end_Frame-prod()

#start_Frame-rank_dense()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_dense()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       0
1          1       2       1
2          2       1       0
3          0       2       1
<int64>    <int64> <int64> <int64>
#end_Frame-rank_dense()

#start_Frame-rank_max()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_max()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       1
1          1       3       3
2          2       1       1
3          0       3       3
<int64>    <int64> <int64> <int64>
#end_Frame-rank_max()

#start_Frame-rank_mean()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_mean()
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
0          3.0       0.0       0.5
1          1.0       2.5       2.5
2          2.0       1.0       0.5
3          0.0       2.5       2.5
<int64>    <float64> <float64> <float64>
#end_Frame-rank_mean()

#start_Frame-rank_min()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_min()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       0
1          1       2       2
2          2       1       0
3          0       2       2
<int64>    <int64> <int64> <int64>
#end_Frame-rank_min()

#start_Frame-rank_ordinal()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          11      0       0
1          4       8       1
2          10      3       0
3          2       8       1
<int64>    <int64> <int64> <int64>
>>> f.rank_ordinal()
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
0          3       0       0
1          1       2       2
2          2       1       1
3          0       3       3
<int64>    <int64> <int64> <int64>
#end_Frame-rank_ordinal()

#start_Frame-rehierarch()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rehierarch((1, 0))
<Frame: x>
<Index>                  a       b      c               <<U1>
<IndexHierarchy>
p                1       10      False  1517-01-01
p                2       8       True   1517-12-31
q                1       2       True   1517-04-01
q                2       3       False  1517-06-30
<<U1>            <int64> <int64> <bool> <datetime64[D]>
#end_Frame-rehierarch()

#start_Frame-reindex()
>>> f = sf.Frame.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))
<Frame: x>
<Index>    a       b     <<U1>
<Index>
q          2       XYZ
t          -1
s          3        wX
r          8       123
<<U1>      <int64> <<U4>
#end_Frame-reindex()

#start_Frame-relabel()
>>> f = sf.Frame.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
>>> f.relabel(('y', 'z'))
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
y          10      False  1517-01-01
z          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
>>> f.relabel(dict(q='x', p='y'))
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
y          10      False  1517-01-01
x          8       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
>>> f.relabel(lambda l: f'+{l.upper()}+')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
+P+        10      False  1517-01-01
+Q+        8       True   1517-04-01
<<U3>      <int64> <bool> <datetime64[D]>
#end_Frame-relabel()

#start_Frame-relabel_flat()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_flat(index=True)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
(1, 'p')   10      False  1517-01-01
(1, 'q')   2       True   1517-04-01
(2, 'p')   8       True   1517-12-31
(2, 'q')   3       False  1517-06-30
<object>   <int64> <bool> <datetime64[D]>
#end_Frame-relabel_flat()

#start_Frame-relabel_level_add()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_level_add('I')
<Frame: x>
<Index>                        a       b      c               <<U1>
<IndexHierarchy>
I                1       p     10      False  1517-01-01
I                1       q     2       True   1517-04-01
I                2       p     8       True   1517-12-31
I                2       q     3       False  1517-06-30
<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-relabel_level_add()

#start_Frame-relabel_level_drop()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.iloc[:2].relabel_level_drop(1)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
p          10      False  1517-01-01
q          2       True   1517-04-01
<<U1>      <int64> <bool> <datetime64[D]>
#end_Frame-relabel_level_drop()

#start_Frame-relabel_shift_in()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_shift_in('a')
<Frame: x>
<Index>                                            b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
1                                    p     10      False  1517-01-01
1                                    q     2       True   1517-04-01
2                                    p     8       True   1517-12-31
2                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-relabel_shift_in()

#start_Frame-relabel_shift_out()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])
<Frame: x>
<Index>    e     d       a       b      c               <<U1>
<Index>
0          p     1       10      False  1517-01-01
1          q     1       2       True   1517-04-01
2          p     2       8       True   1517-12-31
3          q     2       3       False  1517-06-30
<int64>    <<U1> <int64> <int64> <bool> <datetime64[D]>
#end_Frame-relabel_shift_out()

#start_Frame-rename()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename('y', index='p', columns='q')
<Frame: y>
<Index: q>                a       b      c               <<U1>
<IndexHierarchy: p>
1                   p     10      False  1517-01-01
1                   q     2       True   1517-04-01
2                   p     8       True   1517-12-31
2                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-rename()

#start_Frame-roll()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.roll(3)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          2       True   1517-04-01
1          8       True   1517-12-31
2          3       False  1517-06-30
3          10      False  1517-01-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-roll()

#start_Frame-sample()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.sample(2, 2, seed=0)
<Frame: x>
<Index>    b      c               <<U1>
<Index>
2          True   1517-12-31
3          False  1517-06-30
<int64>    <bool> <datetime64[D]>
#end_Frame-sample()

#start_Frame-set_columns()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns((1, 'p'), drop=True)
<Frame: x>
<Index: (1, 'p')>       10      False  1517-01-01      <object>
<IndexHierarchy>
1                 q     2       True   1517-04-01
2                 p     8       True   1517-12-31
2                 q     3       False  1517-06-30
<int64>           <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-set_columns()

#start_Frame-set_columns_hierarchy()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)
<Frame: x>
<IndexHierarchy: ((1, 'p'), (1, '...       10      False  1517-01-01      <object>
                                           2       True   1517-04-01      <object>
<IndexHierarchy>
2                                    p     8       True   1517-12-31
2                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-set_columns_hierarchy()

#start_Frame-set_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)
<Frame: x>
<Index>         a       b      <<U1>
<IndexDate: c>
1517-01-01      10      False
1517-04-01      2       True
1517-12-31      8       True
1517-06-30      3       False
<datetime64[D]> <int64> <bool>
#end_Frame-set_index()

#start_Frame-set_index_hierarchy()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))
<Frame: x>
<Index>                                      a       <<U1>
<IndexHierarchy: ('b', 'c')>
False                        1517-01-01      10
True                         1517-04-01      2
True                         1517-12-31      8
False                        1517-06-30      3
<bool>                       <datetime64[D]> <int64>
#end_Frame-set_index_hierarchy()

#start_Frame-shift()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.shift(3, fill_value=sf.FillValueAuto)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          0       False  NaT
1          0       False  NaT
2          0       False  NaT
3          10      False  1517-01-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-shift()

#start_Frame-sort_columns()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_columns(ascending=False)
<Frame: x>
<Index>                c               b      a       <<U1>
<IndexHierarchy>
1                p     1517-01-01      False  10
1                q     1517-04-01      True   2
2                p     1517-12-31      True   8
2                q     1517-06-30      False  3
<int64>          <<U1> <datetime64[D]> <bool> <int64>
#end_Frame-sort_columns()

#start_Frame-sort_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_index(ascending=False)
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
2                q     3       False  1517-06-30
2                p     8       True   1517-12-31
1                q     2       True   1517-04-01
1                p     10      False  1517-01-01
<int64>          <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-sort_index()

#start_Frame-sort_values()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.sort_values('c')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
3          3       False  1517-06-30
2          8       True   1517-12-31
<int64>    <int64> <bool> <datetime64[D]>
>>> f.sort_values(['c', 'b'], ascending=False)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
2          8       True   1517-12-31
3          3       False  1517-06-30
1          2       True   1517-04-01
0          10      False  1517-01-01
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-sort_values()

#start_Frame-std()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.std()
<Series>
<Index>
a        1.632993161855452
b        1.632993161855452
<<U1>    <float64>
#end_Frame-std()

#start_Frame-sum()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.sum()
<Series>
<Index>
a        6
b        9
<<U1>    <int64>
#end_Frame-sum()

#start_Frame-tail()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
>>> f.tail(2)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-tail()

#start_Frame-transpose()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.transpose()
<Frame: x>
<Index>    p       q       r       <<U1>
<Index>
a          0       2       4
b          1       3       5
<<U1>      <int64> <int64> <int64>
#end_Frame-transpose()

#start_Frame-unique()
>>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a         b        c               <<U1>
<Index>
0          10.0      False    1517-01-01
1          2.0       True     1517-04-01
2          nan       None     NaT
3          2.0       True     1517-04-01
<int64>    <float64> <object> <datetime64[D]>
>>> f.unique()
[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)
 nan None]
#end_Frame-unique()

#start_Frame-unset_columns()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       1
q          2       3
r          4       5
<<U1>      <int64> <int64>
>>> f.rename(columns='o').unset_columns()
<Frame: x>
<Index>    0        1        <int64>
<Index>
o          a        b
p          0        1
q          2        3
r          4        5
<<U1>      <object> <object>
#end_Frame-unset_columns()

#start_Frame-unset_index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=(('d', 'e'))).unset_index()
<Frame: x>
<Index>    d       e     a       b      c               <<U1>
<Index>
0          1       p     10      False  1517-01-01
1          1       q     2       True   1517-04-01
2          2       p     8       True   1517-12-31
3          2       q     3       False  1517-06-30
<int64>    <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_Frame-unset_index()

#start_Frame-var()
>>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.var()
<Series>
<Index>
a        2.6666666666666665
b        2.6666666666666665
<<U1>    <float64>
#end_Frame-var()

#start_Frame-__contains__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.__contains__('a')
True
#end_Frame-__contains__()

#start_Frame-__iter__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__iter__())
('a', 'b', 'c')
#end_Frame-__iter__()

#start_Frame-__reversed__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__reversed__())
('c', 'b', 'a')
#end_Frame-__reversed__()

#start_Frame-get()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.get('a')
<Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>
>>> f.get('z', -1)
-1
#end_Frame-get()

#start_Frame-items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.items())
(('a', <Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>), ('b', <Series: b>
<Index>
0           False
1           True
2           True
3           False
<int64>     <bool>), ('c', <Series: c>
<Index>
0           1517-01-01
1           1517-04-01
2           1517-12-31
3           1517-06-30
<int64>     <datetime64[D]>))
#end_Frame-items()

#start_Frame-keys()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.keys()
<Index>
a
b
c
<<U1>
#end_Frame-keys()

#start_Frame-values
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.values
[[10 False datetime.date(1517, 1, 1)]
 [2 True datetime.date(1517, 4, 1)]
 [8 True datetime.date(1517, 12, 31)]
 [3 False datetime.date(1517, 6, 30)]]
#end_Frame-values

#start_Frame-interface
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.interface
<Frame: Frame>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(data, *, index, columns,... Frame    Constructor          Initializer. Args...
from_arrow(value, *, index_depth,... Frame    Constructor          Realize a Frame f...
from_clipboard(*, delimiter, inde... Frame    Constructor          Create a Frame fr...
from_concat(frames, *, axis, unio... Frame    Constructor          Concatenate multi...
from_concat_items(items, *, axis,... Frame    Constructor          Produce a Frame w...
from_csv(fp, *, index_depth, inde... Frame    Constructor          Specialized versi...
from_delimited(fp, *, delimiter, ... Frame    Constructor          Create a Frame fr...
from_dict(mapping, *, index, fill... Frame    Constructor          Create a Frame fr...
from_dict_records(records, *, ind... Frame    Constructor          Frame constructor...
from_dict_records_items(items, *,... Frame    Constructor          Frame constructor...
from_element(element, *, index, c... Frame    Constructor          Create a Frame fr...
from_element_items(items, *, inde... Frame    Constructor          Create a Frame fr...
from_elements(elements, *, index,... Frame    Constructor          Create a Frame fr...
from_fields(fields, *, index, col... Frame    Constructor          Frame constructor...
from_hdf5(fp, *, label, index_dep... Frame    Constructor          Load Frame from t...
from_items(pairs, *, index, fill_... Frame    Constructor          Frame constructor...
from_json(json_data, *, dtypes, n... Frame    Constructor          Frame constructor...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... Frame    Accessor Fill Value
via_fill_value(fill_value).__eq__... Frame    Accessor Fill Value
via_fill_value(fill_value).__ne__... Frame    Accessor Fill Value
via_fill_value(fill_value).__gt__... Frame    Accessor Fill Value
via_fill_value(fill_value).__ge__... Frame    Accessor Fill Value
via_fill_value(fill_value).__radd... Frame    Accessor Fill Value
via_fill_value(fill_value).__rsub... Frame    Accessor Fill Value
via_fill_value(fill_value).__rmul... Frame    Accessor Fill Value
via_fill_value(fill_value).__rtru... Frame    Accessor Fill Value
via_fill_value(fill_value).__rflo... Frame    Accessor Fill Value
via_re(pattern, flags).search(pos... Frame    Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... Frame    Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... Frame    Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... Frame    Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... Frame    Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... Frame    Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... Frame    Accessor Regular ... Perform the same ...
<<U89>                               <<U5>    <<U27>               <<U83>
#end_Frame-interface

#start_Frame-__repr__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> repr(f)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-__repr__()

#start_Frame-__str__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> str(f)
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-__str__()

#start_Frame-display()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display()
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-display()

#start_Frame-display_tall()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_tall()
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-display_tall()

#start_Frame-display_wide()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_wide()
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_Frame-display_wide()

#start_Frame-assign[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign['a'](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      8       1
q          -1      -3      0
r          -1      8       9
s          -1      0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign[['a', 'c']](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      8       -1
q          -1      -3      -1
r          -1      8       -1
s          -1      0       -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign[]()

#start_Frame-assign[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign['a'].apply(lambda s: s / 100)
<Frame: x>
<Index>    a         b       c       <<U1>
<Index>
p          0.1       8       1
q          -0.02     -3      0
r          0.0       8       9
s          0.0       0       12
<<U1>      <float64> <int64> <int64>
#end_Frame-assign[].apply()

#start_Frame-assign.iloc[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.iloc[2]((-1, -2, -3))
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -2      -3
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[2:](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -1      -1
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[[0, 3]](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      -1      -1
q          -2      -3      0
r          0       8       9
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign.iloc[]()

#start_Frame-assign.iloc[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.iloc[2:].apply(lambda s: s / 100)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          10.0      8.0       1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      0.09
s          0.0       0.0       0.12
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.iloc[].apply()

#start_Frame-assign.loc[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.loc['r'](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -1      -1
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc['r':](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          -1      -1      -1
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc[['p', 's']](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      -1      -1
q          -2      -3      0
r          0       8       9
s          -1      -1      -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign.loc[]()

#start_Frame-assign.loc[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.assign.loc['r':].apply(lambda s: s / 100)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          10.0      8.0       1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      0.09
s          0.0       0.0       0.12
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.loc[].apply()

#start_Frame-assign.bloc[]()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5](-1)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -1      -1      1
q          -2      -3      0
r          0       -1      -1
s          0       0       -1
<<U1>      <int64> <int64> <int64>
#end_Frame-assign.bloc[]()

#start_Frame-assign.bloc[].apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply(lambda s: s * .01)
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          0.1       0.08      1.0
q          -2.0      -3.0      0.0
r          0.0       0.08      0.09
s          0.0       0.0       0.12
<<U1>      <float64> <float64> <float64>
#end_Frame-assign.bloc[].apply()

#start_Frame-bloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.bloc[f > 5]
<Series>
<Index>
('p', 'a') 10
('p', 'b') 8
('r', 'b') 8
('r', 'c') 9
('s', 'c') 12
<object>   <int64>
#end_Frame-bloc[]

#start_Frame-drop[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop['c']
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          10      8
q          -2      -3
r          0       8
s          0       0
<<U1>      <int64> <int64>
>>> f.drop['b':]
<Frame: x>
<Index>    a       <<U1>
<Index>
p          10
q          -2
r          0
s          0
<<U1>      <int64>
>>> f.drop[['a', 'c']]
<Frame: x>
<Index>    b       <<U1>
<Index>
p          8
q          -3
r          8
s          0
<<U1>      <int64>
#end_Frame-drop[]

#start_Frame-drop.iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.iloc[1]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.drop.iloc[1:]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
<<U1>      <int64> <int64> <int64>
>>> f.drop.iloc[[0, 2]]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-drop.iloc[]

#start_Frame-drop.loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.loc['r']
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.drop.loc['r':]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
<<U1>      <int64> <int64> <int64>
>>> f.drop.loc[['p', 's']]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
r          0       8       9
<<U1>      <int64> <int64> <int64>
#end_Frame-drop.loc[]

#start_Frame-mask[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask['c']
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  True
q       False  False  True
r       False  False  True
s       False  False  True
<<U1>   <bool> <bool> <bool>
>>> f.mask['b':]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  True   True
q       False  True   True
r       False  True   True
s       False  True   True
<<U1>   <bool> <bool> <bool>
>>> f.mask[['a', 'c']]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   False  True
q       True   False  True
r       True   False  True
s       True   False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-mask[]

#start_Frame-mask.iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.iloc[1]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   True
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
>>> f.mask.iloc[1:]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   True
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
>>> f.mask.iloc[[0, 2]]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  False  False
r       True   True   True
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-mask.iloc[]

#start_Frame-mask.loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.loc['r']
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  False  False
r       True   True   True
s       False  False  False
<<U1>   <bool> <bool> <bool>
>>> f.mask.loc['r':]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  False  False
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
>>> f.mask.loc[['p', 's']]
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  False  False
r       False  False  False
s       True   True   True
<<U1>   <bool> <bool> <bool>
#end_Frame-mask.loc[]

#start_Frame-masked_array[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array['c']
[[10 8 --]
 [-2 -3 --]
 [0 8 --]
 [0 0 --]]
>>> f.masked_array['b':]
[[10 -- --]
 [-2 -- --]
 [0 -- --]
 [0 -- --]]
>>> f.masked_array[['a', 'c']]
[[-- 8 --]
 [-- -3 --]
 [-- 8 --]
 [-- 0 --]]
#end_Frame-masked_array[]

#start_Frame-masked_array.iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.iloc[1]
[[10 8 1]
 [-- -- --]
 [0 8 9]
 [0 0 12]]
>>> f.masked_array.iloc[1:]
[[10 8 1]
 [-- -- --]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.iloc[[0, 2]]
[[-- -- --]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
#end_Frame-masked_array.iloc[]

#start_Frame-masked_array.loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.loc['r']
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
>>> f.masked_array.loc['r':]
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.loc[['p', 's']]
[[-- -- --]
 [-2 -3 0]
 [0 8 9]
 [-- -- --]]
#end_Frame-masked_array.loc[]

#start_Frame-[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f['b']
<Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>
>>> f['b':]
<Frame: x>
<Index>    b       c       <<U1>
<Index>
p          8       1
q          -3      0
r          8       9
s          0       12
<<U1>      <int64> <int64>
>>> f[['a', 'c']]
<Frame: x>
<Index>    a       c       <<U1>
<Index>
p          10      1
q          -2      0
r          0       9
s          0       12
<<U1>      <int64> <int64>
#end_Frame-[]

#start_Frame-iloc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iloc[2]
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.iloc[2:]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iloc[[0, 3]]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-iloc[]

#start_Frame-loc[]
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.loc['r']
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.loc['r':]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.loc[['p', 's']]
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-loc[]

#start_Frame-iter_array()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array())
(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))
#end_Frame-iter_array()

#start_Frame-iter_array().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_array().apply()

#start_Frame-iter_array().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_Frame-iter_array().apply_iter()

#start_Frame-iter_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_Frame-iter_array().apply_iter_items()

#start_Frame-iter_array().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_array().apply_pool()

#start_Frame-iter_array_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items())
(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))
#end_Frame-iter_array_items()

#start_Frame-iter_array_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_array_items().apply()

#start_Frame-iter_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_Frame-iter_array_items().apply_iter()

#start_Frame-iter_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_Frame-iter_array_items().apply_iter_items()

#start_Frame-iter_array_items().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_array_items().apply_pool()

#start_Frame-iter_element()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element())
(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)
#end_Frame-iter_element()

#start_Frame-iter_element().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply(lambda e: e > 5)
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-iter_element().apply()

#start_Frame-iter_element().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter(lambda e: e > 10))
(False, False, False, False, False, False, False, False, False, False, False, True)
#end_Frame-iter_element().apply_iter()

#start_Frame-iter_element().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))
((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))
#end_Frame-iter_element().apply_iter_items()

#start_Frame-iter_element().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-iter_element().apply_pool()

#start_Frame-iter_element().map_all()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       -1      45      -1
q       45      -1      200
r       200     45      45
s       200     200     -1
<<U1>   <int64> <int64> <int64>
#end_Frame-iter_element().map_all()

#start_Frame-iter_element().map_all_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)
#end_Frame-iter_element().map_all_iter()

#start_Frame-iter_element().map_all_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))
#end_Frame-iter_element().map_all_iter_items()

#start_Frame-iter_element().map_any()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f.iter_element().map_any({1: -1, 2: 45})
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       -1      45      -1
q       45      -1      0
r       0       45      45
s       0       0       -1
<<U1>   <int64> <int64> <int64>
#end_Frame-iter_element().map_any()

#start_Frame-iter_element().map_any_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)
#end_Frame-iter_element().map_any_iter()

#start_Frame-iter_element().map_any_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))
#end_Frame-iter_element().map_any_iter_items()

#start_Frame-iter_element().map_fill()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       -1.0      45.0      -1.0
q       45.0      -1.0      nan
r       nan       45.0      45.0
s       nan       nan       -1.0
<<U1>   <float64> <float64> <float64>
#end_Frame-iter_element().map_fill()

#start_Frame-iter_element().map_fill_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))
(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)
#end_Frame-iter_element().map_fill_iter()

#start_Frame-iter_element().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       2       1
q          2       1       0
r          0       2       2
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))
#end_Frame-iter_element().map_fill_iter_items()

#start_Frame-iter_element_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items())
((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))
#end_Frame-iter_element_items()

#start_Frame-iter_element_items().apply()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')
<Frame>
<Index> a      b        c      <<U1>
<Index>
p       False  True     False
q       True   x        False
r       False  True     True
s       False  False    False
<<U1>   <bool> <object> <bool>
#end_Frame-iter_element_items().apply()

#start_Frame-iter_element_items().apply_iter()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
(False, True, False, True, 'x', False, False, True, True, False, False, False)
#end_Frame-iter_element_items().apply_iter()

#start_Frame-iter_element_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))
#end_Frame-iter_element_items().apply_iter_items()

#start_Frame-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')
>>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply_pool(func, use_threads=True)
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  True   False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-iter_element_items().apply_pool()

#start_Frame-iter_element_items().map_all()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})
<Frame>
<Index> a       b       <<U1>
<Index>
p       200     -1
q       45      1
<<U1>   <int64> <int64>
#end_Frame-iter_element_items().map_all()

#start_Frame-iter_element_items().map_all_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
(200, -1, 45, 1)
#end_Frame-iter_element_items().map_all_iter()

#start_Frame-iter_element_items().map_all_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))
#end_Frame-iter_element_items().map_all_iter_items()

#start_Frame-iter_element_items().map_any()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})
<Frame>
<Index> a       b       <<U1>
<Index>
p       200     3
q       9       1
<<U1>   <int64> <int64>
#end_Frame-iter_element_items().map_any()

#start_Frame-iter_element_items().map_any_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
(200, 3, 9, 1)
#end_Frame-iter_element_items().map_any_iter()

#start_Frame-iter_element_items().map_any_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))
#end_Frame-iter_element_items().map_any_iter_items()

#start_Frame-iter_element_items().map_fill()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)
<Frame>
<Index> a       b       <<U1>
<Index>
p       200     -1
q       -1      1
<<U1>   <int64> <int64>
#end_Frame-iter_element_items().map_fill()

#start_Frame-iter_element_items().map_fill_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
(200, -1, -1, 1)
#end_Frame-iter_element_items().map_fill_iter()

#start_Frame-iter_element_items().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))
#end_Frame-iter_element_items().map_fill_iter_items()

#start_Frame-iter_group()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c'))
(<Frame>
<Index> a       b       c       <<U1>
<Index>
0       11      0       0
2       10      3       0
<int64> <int64> <int64> <int64>, <Frame>
<Index> a       b       c       <<U1>
<Index>
1       4       8       1
3       2       8       1
<int64> <int64> <int64> <int64>)
#end_Frame-iter_group()

#start_Frame-iter_group().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply(lambda f: f['b'].sum())
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_Frame-iter_group().apply()

#start_Frame-iter_group().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))
(3, 16)
#end_Frame-iter_group().apply_iter()

#start_Frame-iter_group().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))
((0, 3), (1, 16))
#end_Frame-iter_group().apply_iter_items()

#start_Frame-iter_group().apply_pool()
>>> def func(f): return f['b'].sum()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_Frame-iter_group().apply_pool()

#start_Frame-iter_group_array()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c'))
(array([[11,  0,  0],
       [10,  3,  0]]), array([[4, 8, 1],
       [2, 8, 1]]))
#end_Frame-iter_group_array()

#start_Frame-iter_group_array().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply(lambda a: np.sum(a))
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_Frame-iter_group_array().apply()

#start_Frame-iter_group_array().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))
(24, 24)
#end_Frame-iter_group_array().apply_iter()

#start_Frame-iter_group_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))
((0, 24), (1, 24))
#end_Frame-iter_group_array().apply_iter_items()

#start_Frame-iter_group_array().apply_pool()
>>> def func(a): return np.sum(a)
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_Frame-iter_group_array().apply_pool()

#start_Frame-iter_group_array_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c'))
((0, array([[11,  0,  0],
       [10,  3,  0]])), (1, array([[4, 8, 1],
       [2, 8, 1]])))
#end_Frame-iter_group_array_items()

#start_Frame-iter_group_array_items().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)
<Series>
<Index: c>
0          24
1          (2, 3)
<int64>    <object>
#end_Frame-iter_group_array_items().apply()

#start_Frame-iter_group_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))
(24, (2, 3))
#end_Frame-iter_group_array_items().apply_iter()

#start_Frame-iter_group_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))
((0, 24), (1, (2, 3)))
#end_Frame-iter_group_array_items().apply_iter_items()

#start_Frame-iter_group_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c'))
((0, <Frame>
<Index> a       b       c       <<U1>
<Index>
0       11      0       0
2       10      3       0
<int64> <int64> <int64> <int64>), (1, <Frame>
<Index> a       b       c       <<U1>
<Index>
1       4       8       1
3       2       8       1
<int64> <int64> <int64> <int64>))
#end_Frame-iter_group_items()

#start_Frame-iter_group_items().apply()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)
<Series>
<Index: c>
0          3
1          (2, 3)
<int64>    <object>
#end_Frame-iter_group_items().apply()

#start_Frame-iter_group_items().apply_iter()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))
(3, (2, 3))
#end_Frame-iter_group_items().apply_iter()

#start_Frame-iter_group_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))
((0, 3), (1, (2, 3)))
#end_Frame-iter_group_items().apply_iter_items()

#start_Frame-iter_group_labels()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1))
(<Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
2                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>, <Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                q     2       True   1517-04-01
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>)
#end_Frame-iter_group_labels()

#start_Frame-iter_group_labels().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())
<Series>
<Index>
p        1
q        1
<<U1>    <int64>
#end_Frame-iter_group_labels().apply()

#start_Frame-iter_group_labels().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum())
<generator object IterNodeDelegate.apply_iter at 0x117b79510>
#end_Frame-iter_group_labels().apply_iter()

#start_Frame-iter_group_labels().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum())
<generator object IterNodeDelegate.apply_iter_items at 0x117b79510>
#end_Frame-iter_group_labels().apply_iter_items()

#start_Frame-iter_group_labels_array()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1))
(array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object))
#end_Frame-iter_group_labels_array()

#start_Frame-iter_group_labels_array().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))
<Series>
<Index>
p        18
q        5
<<U1>    <int64>
#end_Frame-iter_group_labels_array().apply()

#start_Frame-iter_group_labels_array().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))
(18, 5)
#end_Frame-iter_group_labels_array().apply_iter()

#start_Frame-iter_group_labels_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))
(('p', 18), ('q', 5))
#end_Frame-iter_group_labels_array().apply_iter_items()

#start_Frame-iter_group_labels_array_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1))
(('p', array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))
#end_Frame-iter_group_labels_array_items()

#start_Frame-iter_group_labels_array_items().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)
<Series>
<Index>
p        -1
q        5
<<U1>    <int64>
#end_Frame-iter_group_labels_array_items().apply()

#start_Frame-iter_group_labels_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(-1, 5)
#end_Frame-iter_group_labels_array_items().apply_iter()

#start_Frame-iter_group_labels_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(('p', -1), ('q', 5))
#end_Frame-iter_group_labels_array_items().apply_iter_items()

#start_Frame-iter_group_labels_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1))
(('p', <Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
2                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <Frame>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                q     2       True   1517-04-01
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>))
#end_Frame-iter_group_labels_items()

#start_Frame-iter_group_labels_items().apply()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)
<Series>
<Index>
p        1
q        -1
<<U1>    <int64>
#end_Frame-iter_group_labels_items().apply()

#start_Frame-iter_group_labels_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))
(1, -1)
#end_Frame-iter_group_labels_items().apply_iter()

#start_Frame-iter_group_labels_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))
(('p', 1), ('q', -1))
#end_Frame-iter_group_labels_items().apply_iter_items()

#start_Frame-iter_series()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series())
(<Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>, <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>, <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>)
#end_Frame-iter_series()

#start_Frame-iter_series().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_series().apply()

#start_Frame-iter_series().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_Frame-iter_series().apply_iter()

#start_Frame-iter_series().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_Frame-iter_series().apply_iter_items()

#start_Frame-iter_series().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_Frame-iter_series().apply_pool()

#start_Frame-iter_series_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items())
(('a', <Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>), ('b', <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>), ('c', <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>))
#end_Frame-iter_series_items()

#start_Frame-iter_series_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_series_items().apply()

#start_Frame-iter_series_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_Frame-iter_series_items().apply_iter()

#start_Frame-iter_series_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_Frame-iter_series_items().apply_iter_items()

#start_Frame-iter_series_items().apply_pool()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_Frame-iter_series_items().apply_pool()

#start_Frame-iter_tuple()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple())
(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))
#end_Frame-iter_tuple()

#start_Frame-iter_tuple().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple().apply(lambda v: v.p + v.q)
<Series>
<Index>
a        8
b        5
c        1
<<U1>    <int64>
#end_Frame-iter_tuple().apply()

#start_Frame-iter_tuple().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))
(8, 5, 1)
#end_Frame-iter_tuple().apply_iter()

#start_Frame-iter_tuple().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))
(('a', 8), ('b', 5), ('c', 1))
#end_Frame-iter_tuple().apply_iter_items()

#start_Frame-iter_tuple().map_all()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_Frame-iter_tuple().map_all()

#start_Frame-iter_tuple().map_all_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))
(-1, -2)
#end_Frame-iter_tuple().map_all_iter()

#start_Frame-iter_tuple().map_all_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))
(('a', -1), ('b', -2))
#end_Frame-iter_tuple().map_all_iter_items()

#start_Frame-iter_tuple().map_any()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_any({(2, 9): -1}))
('a', 'b')
#end_Frame-iter_tuple().map_any()

#start_Frame-iter_tuple().map_any_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))
(-1, Axis(p=3, q=8))
#end_Frame-iter_tuple().map_any_iter()

#start_Frame-iter_tuple().map_any_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_Frame-iter_tuple().map_any_iter_items()

#start_Frame-iter_tuple().map_fill()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_Frame-iter_tuple().map_fill()

#start_Frame-iter_tuple().map_fill_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))
(-1, nan)
#end_Frame-iter_tuple().map_fill_iter()

#start_Frame-iter_tuple().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_Frame-iter_tuple().map_fill_iter_items()

#start_Frame-iter_tuple_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items())
(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))
#end_Frame-iter_tuple_items()

#start_Frame-iter_tuple_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)
<Series>
<Index>
a        -1
b        5
c        -1
<<U1>    <int64>
#end_Frame-iter_tuple_items().apply()

#start_Frame-iter_tuple_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))
(-1, 5, -1)
#end_Frame-iter_tuple_items().apply_iter()

#start_Frame-iter_tuple_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))
(('a', -1), ('b', 5), ('c', -1))
#end_Frame-iter_tuple_items().apply_iter_items()

#start_Frame-iter_tuple_items().map_all()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_Frame-iter_tuple_items().map_all()

#start_Frame-iter_tuple_items().map_all_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(-1, -2)
#end_Frame-iter_tuple_items().map_all_iter()

#start_Frame-iter_tuple_items().map_all_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(('a', -1), ('b', -2))
#end_Frame-iter_tuple_items().map_all_iter_items()

#start_Frame-iter_tuple_items().map_any()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})
<Series>
<Index>
a        -1
b        Axis(p=3, q=8)
<<U1>    <object>
#end_Frame-iter_tuple_items().map_any()

#start_Frame-iter_tuple_items().map_any_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))
(-1, Axis(p=3, q=8))
#end_Frame-iter_tuple_items().map_any_iter()

#start_Frame-iter_tuple_items().map_any_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_Frame-iter_tuple_items().map_any_iter_items()

#start_Frame-iter_tuple_items().map_fill()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_Frame-iter_tuple_items().map_fill()

#start_Frame-iter_tuple_items().map_fill_iter()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))
(-1, nan)
#end_Frame-iter_tuple_items().map_fill_iter()

#start_Frame-iter_tuple_items().map_fill_iter_items()
>>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       3
q          9       8
<<U1>      <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_Frame-iter_tuple_items().map_fill_iter_items()

#start_Frame-iter_window()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1))
(<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
<<U1>      <int64> <int64> <int64>, <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
r          0       8       9
<<U1>      <int64> <int64> <int64>, <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>)
#end_Frame-iter_window()

#start_Frame-iter_window().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_Frame-iter_window().apply()

#start_Frame-iter_window().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))
(10, 9, 12)
#end_Frame-iter_window().apply_iter()

#start_Frame-iter_window().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))
(('q', 10), ('r', 9), ('s', 12))
#end_Frame-iter_window().apply_iter_items()

#start_Frame-iter_window_array()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1))
(array([[10,  8,  1],
       [-2, -3,  0]]), array([[-2, -3,  0],
       [ 0,  8,  9]]), array([[ 0,  8,  9],
       [ 0,  0, 12]]))
#end_Frame-iter_window_array()

#start_Frame-iter_window_array().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_Frame-iter_window_array().apply()

#start_Frame-iter_window_array().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))
(10, 9, 12)
#end_Frame-iter_window_array().apply_iter()

#start_Frame-iter_window_array().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))
(('q', 10), ('r', 9), ('s', 12))
#end_Frame-iter_window_array().apply_iter_items()

#start_Frame-iter_window_array_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1))
(('q', array([[10,  8,  1],
       [-2, -3,  0]])), ('r', array([[-2, -3,  0],
       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],
       [ 0,  0, 12]])))
#end_Frame-iter_window_array_items()

#start_Frame-iter_window_array_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_Frame-iter_window_array_items().apply()

#start_Frame-iter_window_array_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(-3, 9, 0)
#end_Frame-iter_window_array_items().apply_iter()

#start_Frame-iter_window_array_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(('q', -3), ('r', 9), ('s', 0))
#end_Frame-iter_window_array_items().apply_iter_items()

#start_Frame-iter_window_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1))
(('q', <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
<<U1>      <int64> <int64> <int64>), ('r', <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
q          -2      -3      0
r          0       8       9
<<U1>      <int64> <int64> <int64>), ('s', <Frame: x>
<Index>    a       b       c       <<U1>
<Index>
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>))
#end_Frame-iter_window_items()

#start_Frame-iter_window_items().apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_Frame-iter_window_items().apply()

#start_Frame-iter_window_items().apply_iter()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(-3, 9, 0)
#end_Frame-iter_window_items().apply_iter()

#start_Frame-iter_window_items().apply_iter_items()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(('q', -3), ('r', 9), ('s', 0))
#end_Frame-iter_window_items().apply_iter_items()

#start_Frame-__add__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 + 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          18      16      9
q          6       5       8
r          8       16      17
s          8       8       20
<<U1>      <int64> <int64> <int64>
>>> f1 + f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       12.0      11.0      nan
q       7.0       5.0       nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__add__()

#start_Frame-__and__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f & True
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  True
q          True   True
r          True   False
<<U1>      <bool> <bool>
>>> f & (True, False)
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   False
r       True   False
<<U1>   <bool> <bool>
#end_Frame-__and__()

#start_Frame-__eq__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 == 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          False  True   False
q          False  False  False
r          False  True   False
s          False  False  False
<<U1>      <bool> <bool> <bool>
>>> f1 == f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__eq__()

#start_Frame-__floordiv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 // 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          1       1       0
q          -1      -1      0
r          0       1       1
s          0       0       1
<<U1>      <int64> <int64> <int64>
>>> f1 // f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       5.0       2.0       nan
q       -1.0      -1.0      nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__floordiv__()

#start_Frame-__ge__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 >= 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          True   True   False
q          False  False  False
r          False  True   True
s          False  False  True
<<U1>      <bool> <bool> <bool>
>>> f1 >= f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__ge__()

#start_Frame-__gt__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 > 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          True   False  False
q          False  False  False
r          False  False  True
s          False  False  True
<<U1>      <bool> <bool> <bool>
>>> f1 > f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   False
q       False  False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__gt__()

#start_Frame-__le__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 <= 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          False  True   True
q          True   True   True
r          True   True   False
s          True   True   False
<<U1>      <bool> <bool> <bool>
>>> f1 <= f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__le__()

#start_Frame-__lt__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 < 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          False  False  True
q          True   True   True
r          True   False  False
s          True   True   False
<<U1>      <bool> <bool> <bool>
>>> f1 < f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-__lt__()

#start_Frame-__matmul__()
>>> f1 = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<Frame>
<Index> x       y       <<U1>
<Index>
p       23      14
q       6       4
r       40      24
s       20      12
<<U1>   <int64> <int64>
#end_Frame-__matmul__()

#start_Frame-__mod__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 % 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          2       0       1
q          6       5       0
r          0       0       1
s          0       0       4
<<U1>      <int64> <int64> <int64>
>>> f1 % f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       0.0       2.0       nan
q       7.0       5.0       nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__mod__()

#start_Frame-__mul__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 * 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          80      64      8
q          -16     -24     0
r          0       64      72
s          0       0       96
<<U1>      <int64> <int64> <int64>
>>> f1 * f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       20.0      24.0      nan
q       -18.0     -24.0     nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__mul__()

#start_Frame-__ne__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 != 8
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
p          True   False  True
q          True   True   True
r          True   False  True
s          True   True   True
<<U1>      <bool> <bool> <bool>
>>> f1 != f2
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       True   True   True
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
#end_Frame-__ne__()

#start_Frame-__or__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f | True
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   True
q          True   True
r          True   True
<<U1>      <bool> <bool>
>>> f | (True, False)
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       True   True
r       True   False
<<U1>   <bool> <bool>
#end_Frame-__or__()

#start_Frame-__pow__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 ** 8
<Frame: x>
<Index>    a         b        c         <<U1>
<Index>
p          100000000 16777216 1
q          256       6561     0
r          0         16777216 43046721
s          0         0        429981696
<<U1>      <int64>   <int64>  <int64>
>>> f1 ** f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       100.0     512.0     1.0
q       -512.0    6561.0    nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__pow__()

#start_Frame-__radd__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 + f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          18      16      9
q          6       5       8
r          8       16      17
s          8       8       20
<<U1>      <int64> <int64> <int64>
#end_Frame-__radd__()

#start_Frame-__rfloordiv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 // f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          0       1       8
q          -4      -3      0
r          0       1       0
s          0       0       0
<<U1>      <int64> <int64> <int64>
#end_Frame-__rfloordiv__()

#start_Frame-__rmatmul__()
>>> f1 = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<Frame>
<Index> x       y       <<U1>
<Index>
p       23      14
q       6       4
r       40      24
s       20      12
<<U1>   <int64> <int64>
#end_Frame-__rmatmul__()

#start_Frame-__rmul__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 * f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          80      64      8
q          -16     -24     0
r          0       64      72
s          0       0       96
<<U1>      <int64> <int64> <int64>
#end_Frame-__rmul__()

#start_Frame-__rshift__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f1 >> 1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          5       4       0
q          -1      -2      0
r          0       4       4
s          0       0       6
<<U1>      <int64> <int64> <int64>
#end_Frame-__rshift__()

#start_Frame-__rsub__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 - f1
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -2      0       7
q          10      11      8
r          8       0       -1
s          8       8       -4
<<U1>      <int64> <int64> <int64>
#end_Frame-__rsub__()

#start_Frame-__rtruediv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 / f1
<Frame: x>
<Index>    a         b                   c                  <<U1>
<Index>
p          0.8       1.0                 8.0
q          -4.0      -2.6666666666666665 inf
r          inf       1.0                 0.8888888888888888
s          inf       inf                 0.6666666666666666
<<U1>      <float64> <float64>           <float64>
#end_Frame-__rtruediv__()

#start_Frame-__sub__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 - 8
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          2       0       -7
q          -10     -11     -8
r          -8      0       1
s          -8      -8      4
<<U1>      <int64> <int64> <int64>
>>> f1 - f2
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       8.0       5.0       nan
q       -11.0     -11.0     nan
r       nan       nan       nan
s       nan       nan       nan
<<U1>   <float64> <float64> <float64>
#end_Frame-__sub__()

#start_Frame-__truediv__()
>>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 / 8
<Frame: x>
<Index>    a         b         c         <<U1>
<Index>
p          1.25      1.0       0.125
q          -0.25     -0.375    0.0
r          0.0       1.0       1.125
s          0.0       0.0       1.5
<<U1>      <float64> <float64> <float64>
>>> f1 / f2
<Frame>
<Index> a                   b                  c         <<U1>
<Index>
p       5.0                 2.6666666666666665 nan
q       -0.2222222222222222 -0.375             nan
r       nan                 nan                nan
s       nan                 nan                nan
<<U1>   <float64>           <float64>          <float64>
#end_Frame-__truediv__()

#start_Frame-__xor__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f ^ True
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          False  False
r          False  True
<<U1>      <bool> <bool>
>>> f ^ (True, False)
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       False  True
r       False  False
<<U1>   <bool> <bool>
#end_Frame-__xor__()

#start_Frame-__abs__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> abs(f)
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          2       3       0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-__abs__()

#start_Frame-__invert__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> ~f
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          False  False
r          False  True
<<U1>      <bool> <bool>
#end_Frame-__invert__()

#start_Frame-__neg__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> -f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          -10     -8      -1
q          2       3       0
r          0       -8      -9
s          0       0       -12
<<U1>      <int64> <int64> <int64>
#end_Frame-__neg__()

#start_Frame-__pos__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> +f
<Frame: x>
<Index>    a       b       c       <<U1>
<Index>
p          10      8       1
q          -2      -3      0
r          0       8       9
s          0       0       12
<<U1>      <int64> <int64> <int64>
#end_Frame-__pos__()

#start_Frame-via_dt.year
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.year
<Frame>
<Index> a       b       <<U1>
<Index>
p       1517    2022
q       1517    2021
r       1517    2022
<<U1>   <int64> <int64>
#end_Frame-via_dt.year

#start_Frame-via_dt.month
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.month
<Frame>
<Index> a       b       <<U1>
<Index>
p       4       4
q       12      12
r       6       6
<<U1>   <int64> <int64>
#end_Frame-via_dt.month

#start_Frame-via_dt.day
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.day
<Frame>
<Index> a       b       <<U1>
<Index>
p       1       1
q       31      31
r       30      30
<<U1>   <int64> <int64>
#end_Frame-via_dt.day

#start_Frame-via_dt.hour
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.hour
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       0       0
r       0       0
<<U1>   <int64> <int64>
#end_Frame-via_dt.hour

#start_Frame-via_dt.minute
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.minute
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       0       0
r       0       0
<<U1>   <int64> <int64>
#end_Frame-via_dt.minute

#start_Frame-via_dt.second
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.second
<Frame>
<Index> a       b       <<U1>
<Index>
p       0       0
q       0       0
r       0       0
<<U1>   <int64> <int64>
#end_Frame-via_dt.second

#start_Frame-via_dt.weekday()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.weekday()
<Frame>
<Index> a       b       <<U1>
<Index>
p       6       4
q       0       4
r       5       3
<<U1>   <int64> <int64>
#end_Frame-via_dt.weekday()

#start_Frame-via_dt.quarter()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.quarter()
<Frame>
<Index> a       b       <<U1>
<Index>
p       2       2
q       4       4
r       2       2
<<U1>   <int64> <int64>
#end_Frame-via_dt.quarter()

#start_Frame-via_dt.is_month_end()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_end()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       True   True
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_month_end()

#start_Frame-via_dt.is_month_start()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_start()
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       False  False
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_month_start()

#start_Frame-via_dt.is_year_end()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_end()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_year_end()

#start_Frame-via_dt.is_year_start()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_start()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       False  False
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_year_start()

#start_Frame-via_dt.is_quarter_end()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_end()
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       True   True
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_quarter_end()

#start_Frame-via_dt.is_quarter_start()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_start()
<Frame>
<Index> a      b      <<U1>
<Index>
p       True   True
q       False  False
r       False  False
<<U1>   <bool> <bool>
#end_Frame-via_dt.is_quarter_start()

#start_Frame-via_dt.timetuple()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.timetuple()
<Frame>
<Index> a                    b                    <<U1>
<Index>
p       time.struct_time(... time.struct_time(...
q       time.struct_time(... time.struct_time(...
r       time.struct_time(... time.struct_time(...
<<U1>   <object>             <object>
#end_Frame-via_dt.timetuple()

#start_Frame-via_dt.isoformat()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.isoformat()
<Frame>
<Index> a          b          <<U1>
<Index>
p       1517-04-01 2022-04-01
q       1517-12-31 2021-12-31
r       1517-06-30 2022-06-30
<<U1>   <<U10>     <<U10>
#end_Frame-via_dt.isoformat()

#start_Frame-via_dt.fromisoformat()
>>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.fromisoformat()
<Frame>
<Index> a          b          <<U1>
<Index>
p       1517-04-01 2022-04-01
q       1517-12-31 2021-12-31
r       1517-06-30 2022-06-30
<<U1>   <object>   <object>
#end_Frame-via_dt.fromisoformat()

#start_Frame-via_dt.strftime()
>>> s = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<Frame>
<Index> a                 b                 <<U1>
<Index>
p       Sunday | April    Friday | April
q       Monday | December Friday | December
r       Saturday | June   Thursday | June
<<U1>   <<U17>            <<U17>
#end_Frame-via_dt.strftime()

#start_Frame-via_dt.strptime()
>>> f = sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strptime("%m/%d/%Y")
<Frame>
<Index> a                   b                   <<U1>
<Index>
p       1517-04-01 00:00:00 2022-04-01 00:00:00
q       1517-12-31 00:00:00 2021-12-31 00:00:00
r       1517-06-30 00:00:00 2022-06-30 00:00:00
<<U1>   <object>            <object>
#end_Frame-via_dt.strptime()

#start_Frame-via_dt.strpdate()
>>> f = sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strpdate("%m/%d/%Y")
<Frame>
<Index> a          b          <<U1>
<Index>
p       1517-04-01 2022-04-01
q       1517-12-31 2021-12-31
r       1517-06-30 2022-06-30
<<U1>   <object>   <object>
#end_Frame-via_dt.strpdate()

#start_Frame-via_str.__getitem__()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str[-1]
<Frame: x>
<Index>    a     b     <<U1>
<Index>
p          0
q          2     Z
r          8     3
s          3
<<U1>      <<U1> <<U1>
#end_Frame-via_str.__getitem__()

#start_Frame-via_str.capitalize()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.capitalize()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     Qrs
q          2      Xyz
r          8      123
s          3       wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.capitalize()

#start_Frame-via_str.center()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.center(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p             10      qrs
q             2       XYZ
r             8       123
s             3        wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.center()

#start_Frame-via_str.contains()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.contains('X')
<Frame: x>
<Index>    a     b     <<U1>
<Index>
p          False False
q          False True
r          False False
s          False True
<<U1>      <<U5> <<U5>
#end_Frame-via_str.contains()

#start_Frame-via_str.count()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.count('X')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          0       0
q          0       1
r          0       0
s          0       1
<<U1>      <int64> <int64>
#end_Frame-via_str.count()

#start_Frame-via_str.decode()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)
>>> f
<Frame: x>
<Index>    a      b       <<U1>
<Index>
p          b'10'  b'qrs '
q          b'2'   b'XYZ'
r          b'8'   b'123'
s          b'3'   b' wX '
<<U1>      <|S21> <|S4>
>>> f.via_str.decode()
<Frame: x>
<Index>    a     b     <<U1>
<Index>
p          10    qrs
q          2     XYZ
r          8     123
s          3      wX
<<U1>      <<U2> <<U4>
#end_Frame-via_str.decode()

#start_Frame-via_str.encode()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.encode()
<Frame: x>
<Index>    a     b       <<U1>
<Index>
p          b'10' b'qrs '
q          b'2'  b'XYZ'
r          b'8'  b'123'
s          b'3'  b' wX '
<<U1>      <|S2> <|S4>
#end_Frame-via_str.encode()

#start_Frame-via_str.endswith()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.endswith(' ')
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  True
q          False  False
r          False  False
s          False  True
<<U1>      <bool> <bool>
#end_Frame-via_str.endswith()

#start_Frame-via_str.find()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.find('X')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          -1      -1
q          -1      0
r          -1      -1
s          -1      2
<<U1>      <int64> <int64>
#end_Frame-via_str.find()

#start_Frame-via_str.index()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.index('X')
ValueError('substring not found')
#end_Frame-via_str.index()

#start_Frame-via_str.isalnum()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isalnum()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   True
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isalnum()

#start_Frame-via_str.isalpha()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isalpha()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  True
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.isalpha()

#start_Frame-via_str.isdecimal()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isdecimal()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   False
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isdecimal()

#start_Frame-via_str.isdigit()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isdigit()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   False
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isdigit()

#start_Frame-via_str.islower()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.islower()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  True
q          False  False
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.islower()

#start_Frame-via_str.isnumeric()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isnumeric()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          True   False
q          True   False
r          True   True
s          True   False
<<U1>      <bool> <bool>
#end_Frame-via_str.isnumeric()

#start_Frame-via_str.isspace()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isspace()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  False
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.isspace()

#start_Frame-via_str.istitle()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.istitle()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  False
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.istitle()

#start_Frame-via_str.isupper()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.isupper()
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  True
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.isupper()

#start_Frame-via_str.ljust()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.ljust(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p          10       qrs
q          2        XYZ
r          8        123
s          3         wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.ljust()

#start_Frame-via_str.len()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.len()
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          2       4
q          1       3
r          1       3
s          1       4
<<U1>      <int64> <int64>
#end_Frame-via_str.len()

#start_Frame-via_str.lower()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.lower()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      xyz
r          8      123
s          3       wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.lower()

#start_Frame-via_str.lstrip()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.lstrip()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      XYZ
r          8      123
s          3      wX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.lstrip()

#start_Frame-via_str.partition()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.partition('X')
<Frame: x>
<Index>    a              b                <<U1>
<Index>
p          ('10', '', '') ('qrs ', '', '')
q          ('2', '', '')  ('', 'X', 'YZ')
r          ('8', '', '')  ('123', '', '')
s          ('3', '', '')  (' w', 'X', ' ')
<<U1>      <object>       <object>
#end_Frame-via_str.partition()

#start_Frame-via_str.replace()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.replace('X', '*')
<Frame: x>
<Index>    a     b     <<U1>
<Index>
p          10    qrs
q          2     *YZ
r          8     123
s          3      w*
<<U1>      <<U2> <<U4>
#end_Frame-via_str.replace()

#start_Frame-via_str.rfind()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rfind('X')
<Frame: x>
<Index>    a       b       <<U1>
<Index>
p          -1      -1
q          -1      0
r          -1      -1
s          -1      2
<<U1>      <int64> <int64>
#end_Frame-via_str.rfind()

#start_Frame-via_str.rindex()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rindex('X')
ValueError('substring not found')
#end_Frame-via_str.rindex()

#start_Frame-via_str.rjust()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rjust(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p                10     qrs
q                 2      XYZ
r                 8      123
s                 3      wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.rjust()

#start_Frame-via_str.rpartition()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rpartition('X')
<Frame: x>
<Index>    a              b                <<U1>
<Index>
p          ('', '', '10') ('', '', 'qrs ')
q          ('', '', '2')  ('', 'X', 'YZ')
r          ('', '', '8')  ('', '', '123')
s          ('', '', '3')  (' w', 'X', ' ')
<<U1>      <object>       <object>
#end_Frame-via_str.rpartition()

#start_Frame-via_str.rsplit()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rsplit('X')
<Frame: x>
<Index>    a        b           <<U1>
<Index>
p          ('10',)  ('qrs ',)
q          ('2',)   ('', 'YZ')
r          ('8',)   ('123',)
s          ('3',)   (' w', ' ')
<<U1>      <object> <object>
#end_Frame-via_str.rsplit()

#start_Frame-via_str.rstrip()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.rstrip()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      XYZ
r          8      123
s          3       wX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.rstrip()

#start_Frame-via_str.split()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.split('X')
<Frame: x>
<Index>    a        b           <<U1>
<Index>
p          ('10',)  ('qrs ',)
q          ('2',)   ('', 'YZ')
r          ('8',)   ('123',)
s          ('3',)   (' w', ' ')
<<U1>      <object> <object>
#end_Frame-via_str.split()

#start_Frame-via_str.startswith()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.startswith('X')
<Frame: x>
<Index>    a      b      <<U1>
<Index>
p          False  False
q          False  True
r          False  False
s          False  False
<<U1>      <bool> <bool>
#end_Frame-via_str.startswith()

#start_Frame-via_str.strip()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.strip()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     qrs
q          2      XYZ
r          8      123
s          3      wX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.strip()

#start_Frame-via_str.swapcase()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.swapcase()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     QRS
q          2      xyz
r          8      123
s          3       Wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.swapcase()

#start_Frame-via_str.title()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.title()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     Qrs
q          2      Xyz
r          8      123
s          3       Wx
<<U1>      <<U21> <<U4>
#end_Frame-via_str.title()

#start_Frame-via_str.upper()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.upper()
<Frame: x>
<Index>    a      b     <<U1>
<Index>
p          10     QRS
q          2      XYZ
r          8      123
s          3       WX
<<U1>      <<U21> <<U4>
#end_Frame-via_str.upper()

#start_Frame-via_str.zfill()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
>>> f.via_str.zfill(8)
<Frame: x>
<Index>    a        b        <<U1>
<Index>
p          00000010 0000qrs
q          00000002 00000XYZ
r          00000008 00000123
s          00000003 0000 wX
<<U1>      <<U8>    <<U8>
#end_Frame-via_str.zfill()

#start_Frame-via_T.via_fill_value()
>>> 
#end_Frame-via_T.via_fill_value()

#start_Frame-via_T.__add__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       -4.0      -5.0      -2.0
r       0.5       8.5       9.5
s       1.0       1.0       13.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__add__()

#start_Frame-via_T.__sub__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       0.0       -1.0      2.0
r       -0.5      7.5       8.5
s       -1.0      -1.0      11.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__sub__()

#start_Frame-via_T.__mul__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       0.0       0.0       0.0
q       4.0       6.0       -0.0
r       0.0       4.0       4.5
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__mul__()

#start_Frame-via_T.__truediv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       inf       inf       inf
q       1.0       1.5       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__truediv__()

#start_Frame-via_T.__floordiv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       inf       inf       inf
q       1.0       1.0       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__floordiv__()

#start_Frame-via_T.__mod__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T % s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       nan       nan       nan
q       -0.0      -1.0      -0.0
r       0.0       0.0       0.0
s       0.0       0.0       0.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__mod__()

#start_Frame-via_T.__pow__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T ** s
<Frame>
<Index> a         b                  c         <<U1>
<Index>
p       1.0       1.0                1.0
q       0.25      0.1111111111111111 inf
r       0.0       2.8284271247461903 3.0
s       0.0       0.0                12.0
<<U1>   <float64> <float64>          <float64>
#end_Frame-via_T.__pow__()

#start_Frame-via_T.__lshift__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T << s
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       10      8       1
q       0       0       0
r       0       64      72
s       0       0       24
<<U1>   <int64> <int64> <int64>
#end_Frame-via_T.__lshift__()

#start_Frame-via_T.__rshift__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >> s
<Frame>
<Index> a       b       c       <<U1>
<Index>
p       10      8       1
q       -1      -1      0
r       0       1       1
s       0       0       6
<<U1>   <int64> <int64> <int64>
#end_Frame-via_T.__rshift__()

#start_Frame-via_T.__and__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T & s
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  False
q       True   True
r       True   False
<<U1>   <bool> <bool>
#end_Frame-via_T.__and__()

#start_Frame-via_T.__xor__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T ^ s
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  True
q       False  False
r       False  True
<<U1>   <bool> <bool>
#end_Frame-via_T.__xor__()

#start_Frame-via_T.__or__()
>>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T | s
<Frame>
<Index> a      b      <<U1>
<Index>
p       False  True
q       True   True
r       True   True
<<U1>   <bool> <bool>
#end_Frame-via_T.__or__()

#start_Frame-via_T.__lt__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T < s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       False  True   False
r       True   False  False
s       True   True   False
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__lt__()

#start_Frame-via_T.__le__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T <= s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   True   False
r       True   False  False
s       True   True   False
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__le__()

#start_Frame-via_T.__eq__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T == s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       False  False  False
q       True   False  False
r       False  False  False
s       False  False  False
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__eq__()

#start_Frame-via_T.__ne__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T != s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  True   True
r       True   True   True
s       True   True   True
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__ne__()

#start_Frame-via_T.__gt__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T > s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       False  False  True
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__gt__()

#start_Frame-via_T.__ge__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >= s
<Frame>
<Index> a      b      c      <<U1>
<Index>
p       True   True   True
q       True   False  True
r       False  True   True
s       False  False  True
<<U1>   <bool> <bool> <bool>
#end_Frame-via_T.__ge__()

#start_Frame-via_T.__radd__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       -4.0      -5.0      -2.0
r       0.5       8.5       9.5
s       1.0       1.0       13.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__radd__()

#start_Frame-via_T.__rsub__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       10.0      8.0       1.0
q       0.0       -1.0      2.0
r       -0.5      7.5       8.5
s       -1.0      -1.0      11.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rsub__()

#start_Frame-via_T.__rmul__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       0.0       0.0       0.0
q       4.0       6.0       -0.0
r       0.0       4.0       4.5
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rmul__()

#start_Frame-via_T.__rtruediv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       inf       inf       inf
q       1.0       1.5       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rtruediv__()

#start_Frame-via_T.__rfloordiv__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<Frame>
<Index> a         b         c         <<U1>
<Index>
p       inf       inf       inf
q       1.0       1.0       -0.0
r       0.0       16.0      18.0
s       0.0       0.0       12.0
<<U1>   <float64> <float64> <float64>
#end_Frame-via_T.__rfloordiv__()

#start_Frame-via_fill_value().loc
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1).loc[['a', 'b', 'd']]
<Frame: y>
<Index>    x       y       <<U1>
<Index>
a          3       2
b          0       0
d          -1      -1
<<U1>      <int64> <int64>
#end_Frame-via_fill_value().loc

#start_Frame-via_fill_value().__getitem__()
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1)[['z', 'x']]
<Frame: y>
<Index>    z       x       <<U1>
<Index>
a          -1      3
b          -1      0
c          -1      20
<<U1>      <int64> <int64>
#end_Frame-via_fill_value().__getitem__()

#start_Frame-via_fill_value().via_T
>>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> f.via_fill_value(-1).via_T * s
<Frame>
<Index> x       y       <<U1>
<Index>
a       -3      -2
b       0       0
c       160     96
d       -19     -19
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().via_T

#start_Frame-via_fill_value().__add__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) + f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       2       3
c       24      26
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__add__()

#start_Frame-via_fill_value().__sub__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) - f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       -2      -3
c       16      -2
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__sub__()

#start_Frame-via_fill_value().__mul__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) * f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       0       0
b       0       0
c       80      168
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__mul__()

#start_Frame-via_fill_value().__truediv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) / f2
<Frame>
<Index> x         y                  <<U1>
<Index>
a       inf       inf
b       0.0       0.0
c       5.0       0.8571428571428571
<<U1>   <float64> <float64>
#end_Frame-via_fill_value().__truediv__()

#start_Frame-via_fill_value().__floordiv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) // f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       0       0
b       0       0
c       5       0
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__floordiv__()

#start_Frame-via_fill_value().__mod__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) % f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       0       0
b       0       0
c       0       12
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__mod__()

#start_Frame-via_fill_value().__pow__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) ** f2
<Frame>
<Index> x       y                <<U1>
<Index>
a       1       1
b       0       0
c       160000  1283918464548864
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__pow__()

#start_Frame-via_fill_value().__lshift__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) << f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       0       0
c       40      24
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__lshift__()

#start_Frame-via_fill_value().__rshift__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >> f2
<Frame>
<Index> x       y       <<U1>
<Index>
a       3       2
b       0       0
c       10      6
<<U1>   <int64> <int64>
#end_Frame-via_fill_value().__rshift__()

#start_Frame-via_fill_value().__and__()
>>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) & f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       False  False
c       True   True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__and__()

#start_Frame-via_fill_value().__xor__()
>>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) ^ f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  True
b       True   True
c       False  False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__xor__()

#start_Frame-via_fill_value().__or__()
>>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) | f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  True
b       True   True
c       True   True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__or__()

#start_Frame-via_fill_value().__lt__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) < f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       True   True
c       False  True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__lt__()

#start_Frame-via_fill_value().__le__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) <= f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       True   True
c       False  True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__le__()

#start_Frame-via_fill_value().__eq__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) == f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       False  False
b       False  False
c       False  False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__eq__()

#start_Frame-via_fill_value().__ne__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) != f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       True   True
b       True   True
c       True   True
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__ne__()

#start_Frame-via_fill_value().__gt__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) > f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       True   True
b       False  False
c       True   False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__gt__()

#start_Frame-via_fill_value().__ge__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >= f2
<Frame>
<Index> x      y      <<U1>
<Index>
a       True   True
b       False  False
c       True   False
<<U1>   <bool> <bool>
#end_Frame-via_fill_value().__ge__()

#start_Frame-via_fill_value().__radd__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 + f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__radd__()

#start_Frame-via_fill_value().__rsub__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 - f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rsub__()

#start_Frame-via_fill_value().__rmul__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 * f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rmul__()

#start_Frame-via_fill_value().__rtruediv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 / f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rtruediv__()

#start_Frame-via_fill_value().__rfloordiv__()
>>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 // f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_Frame-via_fill_value().__rfloordiv__()

#start_Frame-via_re().search()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').search()
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          True   False  True
1          True   True   True
2          False  True   True
3          True   True   True
<int64>    <bool> <bool> <bool>
#end_Frame-via_re().search()

#start_Frame-via_re().match()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').match()
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          True   False  True
1          True   True   True
2          False  True   True
3          True   False  True
<int64>    <bool> <bool> <bool>
#end_Frame-via_re().match()

#start_Frame-via_re().fullmatch()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('123').fullmatch()
<Frame: x>
<Index>    a      b      c      <<U1>
<Index>
0          False  False  False
1          False  False  False
2          False  True   False
3          False  False  False
<int64>    <bool> <bool> <bool>
#end_Frame-via_re().fullmatch()

#start_Frame-via_re().split()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').split()
<Frame: x>
<Index>    a         b                c                    <<U1>
<Index>
0          ('', '0') ('qrs ',)        ('', '5', '7-0', ...
1          ('', '')  ('', 'YZ')       ('', '5', '7-04-0...
2          ('8',)    ('', '', '', '') ('', '5', '7-', '...
3          ('', '')  (' w', ' ')      ('', '5', '7-06-'...
<int64>    <object>  <object>         <object>
#end_Frame-via_re().split()

#start_Frame-via_re().findall()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').findall()
<Frame: x>
<Index>    a        b               c                    <<U1>
<Index>
0          ('1',)   ()              ('1', '1', '1', '1')
1          ('2',)   ('X',)          ('1', '1', '1')
2          ()       ('1', '2', '3') ('1', '1', '1', '...
3          ('3',)   ('X',)          ('1', '1', '3')
<int64>    <object> <object>        <object>
#end_Frame-via_re().findall()

#start_Frame-via_re().sub()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').sub('==')
<Frame: x>
<Index>    a     b      c                <<U1>
<Index>
0          ==0   qrs    ==5==7-0==-0==
1          ==    ==YZ   ==5==7-04-0==
2          8     ====== ==5==7-====-====
3          ==     w==   ==5==7-06-==0
<int64>    <<U3> <<U6>  <<U16>
#end_Frame-via_re().sub()

#start_Frame-via_re().subn()
>>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<Frame: x>
<Index>    a       b     c               <<U1>
<Index>
0          10      qrs   1517-01-01
1          2       XYZ   1517-04-01
2          8       123   1517-12-31
3          3        wX   1517-06-30
<int64>    <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').subn('==', 1)
<Frame: x>
<Index>    a          b            c                  <<U1>
<Index>
0          ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)
1          ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)
2          ('8', 0)   ('==23', 1)  ('==517-12-31', 1)
3          ('==', 1)  (' w== ', 1) ('==517-06-30', 1)
<int64>    <object>   <object>     <object>
#end_Frame-via_re().subn()

#start_Frame-via_values.apply()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.via_values.apply(np.sin)
<Frame: x>
<Index>    a                   b                   c                   <<U1>
<Index>
p          -0.5440211108893699 0.9893582466233818  0.8414709848078965
q          -0.9092974268256817 -0.1411200080598672 0.0
r          0.0                 0.9893582466233818  0.4121184852417566
s          0.0                 0.0                 -0.5365729180004349
<<U1>      <float64>           <float64>           <float64>
#end_Frame-via_values.apply()

#start_Frame-via_values.__array_ufunc__()
>>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values)
[[-0.54402111  0.98935825  0.84147098]
 [-0.90929743 -0.14112001  0.        ]
 [ 0.          0.98935825  0.41211849]
 [ 0.          0.         -0.53657292]]
#end_Frame-via_values.__array_ufunc__()

#start_FrameHE-__init__()
>>> sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameHE-__init__()

#start_FrameHE-from_arrow()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> aw = f1.to_arrow()
>>> aw
pyarrow.Table
__index0__: string
a: int64
b: int64
----
__index0__: [["p","q","r"]]
a: [[0,2,4]]
b: [[1,3,5]]
>>> sf.FrameHE.from_arrow(aw, index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<object>  <int64> <int64>
#end_FrameHE-from_arrow()

#start_FrameHE-from_concat()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameHE.from_concat((f1, f2), axis=1)
<FrameHE>
<Index>   a       b       c      d      <<U1>
<Index>
p         0       1       False  True
q         2       3       False  True
r         4       5       False  True
<<U1>     <int64> <int64> <bool> <bool>
>>> sf.FrameHE.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)
<FrameHE>
<Index>   a        b        <<U1>
<Index>
0         0        1
1         2        3
2         4        5
3         False    True
4         False    True
5         False    True
<int64>   <object> <object>
#end_FrameHE-from_concat()

#start_FrameHE-from_concat_items()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameHE.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)
<FrameHE>
<IndexHierarchy> x       x       y      y      <<U1>
                 a       b       c      d      <<U1>
<Index>
p                0       1       False  True
q                2       3       False  True
r                4       5       False  True
<<U1>            <int64> <int64> <bool> <bool>
>>> sf.FrameHE.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)
<FrameHE>
<Index>                a        b        <<U1>
<IndexHierarchy>
x                p     0        1
x                q     2        3
x                r     4        5
y                p     False    True
y                q     False    True
y                r     False    True
<<U1>            <<U1> <object> <object>
#end_FrameHE-from_concat_items()

#start_FrameHE-from_csv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> open('/tmp/f.csv').read()
__index0__,a,b
p,0,1
q,2,3
r,4,5

>>> sf.FrameHE.from_csv('/tmp/f.csv', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_csv()

#start_FrameHE-from_delimited()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> open('/tmp/f.psv').read()
__index0__|a|b
p|0|1
q|2|3
r|4|5

>>> sf.FrameHE.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_delimited()

#start_FrameHE-from_dict()
>>> sf.FrameHE.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b               <<U1>
<Index>
0            10      1517-01-01
1            2       1517-04-01
2            8       1517-12-31
3            3       1517-06-30
<int64>      <int64> <datetime64[D]>
#end_FrameHE-from_dict()

#start_FrameHE-from_dict_records()
>>> sf.FrameHE.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_dict_records()

#start_FrameHE-from_dict_records_items()
>>> sf.FrameHE.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_dict_records_items()

#start_FrameHE-from_element()
>>> sf.FrameHE.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       0
q            0       0
r            0       0
<<U1>        <int64> <int64>
#end_FrameHE-from_element()

#start_FrameHE-from_element_items()
>>> sf.FrameHE.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)
ErrorInitTypeBlocks('mismatched row count: 1: 2')
#end_FrameHE-from_element_items()

#start_FrameHE-from_elements()
>>> sf.FrameHE.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')
<FrameHE: x>
<Index>      a       <<U1>
<Index>
p            10
q            2
r            8
s            3
<<U1>        <int64>
#end_FrameHE-from_elements()

#start_FrameHE-from_fields()
>>> sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_fields()

#start_FrameHE-from_hdf5()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_hdf5('/tmp/f.hdf5')
>>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-from_hdf5()

#start_FrameHE-from_items()
>>> sf.FrameHE.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-from_items()

#start_FrameHE-from_json()
>>> sf.FrameHE.from_json('[{"a": 10, "b": false, "c": "1517-01-01"}, {"a": 8, "b": true, "c": "1517-04-01"}]', dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            8       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_json()

#start_FrameHE-from_msgpack()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> mb = f1.to_msgpack()
>>> mb
b'\x85\xc4\x02sf\xa7FrameHE\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
>>> sf.FrameHE.from_msgpack(mb)
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-from_msgpack()

#start_FrameHE-from_npy()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.FrameHE.from_npy('/tmp/f.npy')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_npy()

#start_FrameHE-from_npy_mmap()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> f2, closer = sf.FrameHE.from_npy_mmap('/tmp/f.npy')
>>> f2
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> closer() # close mmaps after usage
#end_FrameHE-from_npy_mmap()

#start_FrameHE-from_npz()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.FrameHE.from_npz('/tmp/f.npz')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_npz()

#start_FrameHE-from_overlay()
>>> f1 = sf.FrameHE.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f1
<FrameHE: x>
<Index>      a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f2 = sf.FrameHE.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')
>>> f2
<FrameHE: y>
<Index>      a       b     <<U1>
<Index>
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> sf.FrameHE.from_overlay((f1, f2))
<FrameHE>
<Index>   a         b        <<U1>
<Index>
p         10.0      qrs
q         2.0       XYZ
r         8.0       123
s         3.0        wX
<<U1>     <float64> <object>
#end_FrameHE-from_overlay()

#start_FrameHE-from_pandas()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> df = f1.to_pandas()
>>> df
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
>>> sf.FrameHE.from_pandas(df, dtypes=dict(b=str))
<FrameHE: x>
<Index>      a       b     <object>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<object>     <int64> <<U4>
#end_FrameHE-from_pandas()

#start_FrameHE-from_parquet()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
>>> sf.FrameHE.from_parquet('/tmp/f.parquet', index_depth=1)
<FrameHE>
<Index>   a       b        <<U1>
<Index>
p         10      qrs
q         2       XYZ
r         8       123
s         3        wX
<object>  <int64> <object>
#end_FrameHE-from_parquet()

#start_FrameHE-from_pickle()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.FrameHE.from_pickle('/tmp/f.pickle')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-from_pickle()

#start_FrameHE-from_records()
>>> sf.FrameHE.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_records()

#start_FrameHE-from_records_items()
>>> sf.FrameHE.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-from_records_items()

#start_FrameHE-from_series()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> sf.FrameHE.from_series(s)
<FrameHE>
<Index>   x       <<U1>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_FrameHE-from_series()

#start_FrameHE-from_sql()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.FrameHE.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<FrameHE>
<Index>   a       b       c          <<U1>
<Index>
0         10      0       1517-01-01
1         2       1       1517-04-01
<int64>   <int64> <int64> <<U10>
#end_FrameHE-from_sql()

#start_FrameHE-from_sqlite()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> sf.FrameHE.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)
<FrameHE: x>
<Index>      a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <<U10>
#end_FrameHE-from_sqlite()

#start_FrameHE-from_structured_array()
>>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])
>>> sa
[(False,  8) ( True, 19)]
>>> sf.FrameHE.from_structured_array(sa)
<FrameHE>
<Index>   a      b       <<U1>
<Index>
0         False  8
1         True   19
<int64>   <bool> <int64>
#end_FrameHE-from_structured_array()

#start_FrameHE-from_tsv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> open('/tmp/f.tsv').read()
__index0__	a	b
p	0	1
q	2	3
r	4	5

>>> sf.FrameHE.from_tsv('/tmp/f.tsv', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_tsv()

#start_FrameHE-from_xlsx()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
>>> sf.FrameHE.from_xlsx('/tmp/f.xlsx', index_depth=1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameHE-from_xlsx()

#start_FrameHE-to_arrow()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_arrow()
pyarrow.Table
__index0__: string
a: int64
b: string
----
__index0__: [["p","q","r","s"]]
a: [[10,2,8,3]]
b: [["qrs ","XYZ","123"," wX "]]
#end_FrameHE-to_arrow()

#start_FrameHE-to_csv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> open('/tmp/f.csv').read()
__index0__,a,b
p,0,1
q,2,3
r,4,5

#end_FrameHE-to_csv()

#start_FrameHE-to_delimited()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> open('/tmp/f.psv').read()
__index0__|a|b
p|0|1
q|2|3
r|4|5

#end_FrameHE-to_delimited()

#start_FrameHE-to_frame()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame()
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_FrameHE-to_frame()

#start_FrameHE-to_frame_go()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_go()
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-to_frame_go()

#start_FrameHE-to_frame_he()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_he()
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameHE-to_frame_he()

#start_FrameHE-to_hdf5()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_hdf5('/tmp/f.h5')
#end_FrameHE-to_hdf5()

#start_FrameHE-to_latex()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_latex()
\begin{table}[ht]
\centering
\begin{tabular}{c c c}
\hline\hline
   & a   & b    \\
\hline
p  & 10  & qrs  \\
q  & 2   & XYZ  \\
r  & 8   & 123  \\
s  & 3   &  wX  \\
\hline\end{tabular}
\end{table}
#end_FrameHE-to_latex()

#start_FrameHE-to_markdown()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_markdown()
|  |a  |b   |
|--|---|----|
|p |10 |qrs |
|q |2  |XYZ |
|r |8  |123 |
|s |3  | wX |
#end_FrameHE-to_markdown()

#start_FrameHE-to_msgpack()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_msgpack()
b'\x85\xc4\x02sf\xa7FrameHE\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4K\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
#end_FrameHE-to_msgpack()

#start_FrameHE-to_npy()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameHE-to_npy()

#start_FrameHE-to_npz()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameHE-to_npz()

#start_FrameHE-to_pairs()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pairs()
(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))
#end_FrameHE-to_pairs()

#start_FrameHE-to_pandas()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pandas()
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
#end_FrameHE-to_pandas()

#start_FrameHE-to_parquet()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
#end_FrameHE-to_parquet()

#start_FrameHE-to_pickle()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameHE-to_pickle()

#start_FrameHE-to_rst()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_rst()
+--+---+----+
|  |a  |b   |
+==+===+====+
|p |10 |qrs |
+--+---+----+
|q |2  |XYZ |
+--+---+----+
|r |8  |123 |
+--+---+----+
|s |3  | wX |
+--+---+----+
#end_FrameHE-to_rst()

#start_FrameHE-to_series()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_series()
<Series: x>
<Index>
('p', 'a')  10
('p', 'b')  qrs
('q', 'a')  2
('q', 'b')  XYZ
('r', 'a')  8
('r', 'b')  123
('s', 'a')  3
('s', 'b')   wX
<object>    <object>
#end_FrameHE-to_series()

#start_FrameHE-to_sqlite()
>>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_FrameHE-to_sqlite()

#start_FrameHE-to_tsv()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> open('/tmp/f.tsv').read()
__index0__	a	b
p	0	1
q	2	3
r	4	5

#end_FrameHE-to_tsv()

#start_FrameHE-to_xarray()
>>> s = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_xarray()
<xarray.Dataset>
Dimensions:     (__index0__: 4)
Coordinates:
  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'
Data variables:
    a           (__index0__) int64 10 2 8 3
    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '
#end_FrameHE-to_xarray()

#start_FrameHE-to_xlsx()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
#end_FrameHE-to_xlsx()

#start_FrameHE-STATIC
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.STATIC
True
#end_FrameHE-STATIC

#start_FrameHE-T
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.T
<FrameHE: x>
<Index>      0          1          2          3          <int64>
<Index>
a            10         2          8          3
b            False      True       True       False
c            1517-01-01 1517-04-01 1517-12-31 1517-06-30
<<U1>        <object>   <object>   <object>   <object>
#end_FrameHE-T

#start_FrameHE-columns
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.columns
<Index>
a
b
c
<<U1>
#end_FrameHE-columns

#start_FrameHE-dtypes
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.dtypes
<Series: x>
<Index>
a           int64
b           bool
c           datetime64[D]
<<U1>       <object>
#end_FrameHE-dtypes

#start_FrameHE-index
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.index
<Index>
0
1
2
3
<int64>
#end_FrameHE-index

#start_FrameHE-mloc
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.mloc
[140297216572400 140297216540288 140297249353808]
#end_FrameHE-mloc

#start_FrameHE-name
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.name
x
#end_FrameHE-name

#start_FrameHE-nbytes
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.nbytes
68
#end_FrameHE-nbytes

#start_FrameHE-ndim
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.ndim
2
#end_FrameHE-ndim

#start_FrameHE-shape
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.shape
(4, 3)
#end_FrameHE-shape

#start_FrameHE-size
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.size
12
#end_FrameHE-size

#start_FrameHE-__array__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.__array__()
[[0 1]
 [2 3]
 [4 5]]
#end_FrameHE-__array__()

#start_FrameHE-__array_ufunc__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> np.array((1, 0)) * f
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         2       0
r         4       0
<<U1>     <int64> <int64>
#end_FrameHE-__array_ufunc__()

#start_FrameHE-__bool__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> bool(f)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_FrameHE-__bool__()

#start_FrameHE-__deepcopy__()
>>> import copy
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> copy.deepcopy(f)
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameHE-__deepcopy__()

#start_FrameHE-__len__()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> len(f)
3
#end_FrameHE-__len__()

#start_FrameHE-__round__()
>>> f = sf.FrameHE((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f
<FrameHE: y>
<Index>      a                  b                  <<U1>
<Index>
p            0.0                1.3333333333333333
q            2.6666666666666665 4.0
r            5.333333333333333  6.666666666666667
<<U1>        <float64>          <float64>
>>> round(f, 1)
<FrameHE: y>
<Index>      a         b         <<U1>
<Index>
p            0.0       1.3
q            2.7       4.0
r            5.3       6.7
<<U1>        <float64> <float64>
#end_FrameHE-__round__()

#start_FrameHE-all()
>>> f = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.all()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameHE-all()

#start_FrameHE-any()
>>> f = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.any()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameHE-any()

#start_FrameHE-astype[]()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.astype['c'](object)
<FrameHE: x>
<Index>      a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <object>
#end_FrameHE-astype[]()

#start_FrameHE-astype()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.astype(float)
<FrameHE: x>
<Index>      a         b         <<U1>
<Index>
p            0.0       1.0
q            2.0       3.0
r            4.0       5.0
<<U1>        <float64> <float64>
#end_FrameHE-astype()

#start_FrameHE-clip()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.clip(lower=2, upper=4)
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       2
q            2       3
r            4       4
<<U1>        <int64> <int64>
#end_FrameHE-clip()

#start_FrameHE-count()
>>> f = sf.FrameHE.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f.count(skipna=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
>>> f.count(unique=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_FrameHE-count()

#start_FrameHE-cov()
>>> f1 = sf.FrameHE((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.cov()
<FrameHE: x>
<Index>      a                  b                  c                  d                  <<U1>
<Index>
a            58.666666666666664 84.0               112.0              142.66666666666666
b            84.0               123.0              166.66666666666666 215.0
c            112.0              166.66666666666666 229.33333333333331 300.0
d            142.66666666666666 215.0              300.0              397.66666666666663
<<U1>        <float64>          <float64>          <float64>          <float64>
#end_FrameHE-cov()

#start_FrameHE-cumprod()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumprod()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         0       3
r         0       15
<<U1>     <int64> <int64>
#end_FrameHE-cumprod()

#start_FrameHE-cumsum()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumsum()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       1
q         2       4
r         6       9
<<U1>     <int64> <int64>
#end_FrameHE-cumsum()

#start_FrameHE-drop_duplicated()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.drop_duplicated()
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
2            nan       None     NaT
<int64>      <float64> <object> <datetime64[D]>
#end_FrameHE-drop_duplicated()

#start_FrameHE-dropfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.dropfalsy()
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameHE-dropfalsy()

#start_FrameHE-dropna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.dropna()
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
#end_FrameHE-dropna()

#start_FrameHE-duplicated()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.duplicated()
<Series>
<Index>
0        False
1        True
2        False
3        True
<int64>  <bool>
#end_FrameHE-duplicated()

#start_FrameHE-equals()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f1.equals(f2)
False
#end_FrameHE-equals()

#start_FrameHE-fillfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            1       abc   2022-01-10
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameHE-fillfalsy()

#start_FrameHE-fillfalsy_backward()
>>> f = sf.FrameHE.from_fields(((0, 0, 10, 2), (0, 8, 3, 8), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            0       0       0
1            0       8       0
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_backward()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            10      8       1
2            10      3       1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_backward()

#start_FrameHE-fillfalsy_forward()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_forward()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       1
2            2       8       1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_forward()

#start_FrameHE-fillfalsy_leading()
>>> f = sf.FrameHE.from_fields(((0, 0, 10, 2), (0, 8, 3, 8), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            0       0       0
1            0       8       0
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_leading(-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            -1      -1      -1
1            -1      8       -1
2            10      3       -1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_leading()

#start_FrameHE-fillfalsy_trailing()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_trailing(-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       -1
2            -1      8       -1
3            -1      -1      -1
<int64>      <int64> <int64> <int64>
#end_FrameHE-fillfalsy_trailing()

#start_FrameHE-fillna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b     c               <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            nan             NaT
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <datetime64[D]>
>>> f.fillna(-1)
<FrameHE: x>
<Index>      a         b     c          <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            -1.0            -1
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <object>
#end_FrameHE-fillna()

#start_FrameHE-fillna_backward()
>>> f = sf.FrameHE.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_backward()
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            10.0      8.0       1.0
2            10.0      3.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_backward()

#start_FrameHE-fillna_forward()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_forward()
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       1.0
2            2.0       8.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_forward()

#start_FrameHE-fillna_leading()
>>> f = sf.FrameHE.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_leading(-1)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            -1.0      -1.0      -1.0
1            -1.0      8.0       -1.0
2            10.0      3.0       -1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_leading()

#start_FrameHE-fillna_trailing()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_trailing(-1)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       -1.0
2            -1.0      8.0       -1.0
3            -1.0      -1.0      -1.0
<int64>      <float64> <float64> <float64>
#end_FrameHE-fillna_trailing()

#start_FrameHE-head()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.head(2)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-head()

#start_FrameHE-iloc_max()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameHE-iloc_max()

#start_FrameHE-iloc_min()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameHE-iloc_min()

#start_FrameHE-insert_after()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_after('b', f2)
<FrameHE: x>
<Index>      a       b       c      d      <<U1>
<Index>
p            0       1       False  True
q            2       3       False  True
r            4       5       False  True
<<U1>        <int64> <int64> <bool> <bool>
#end_FrameHE-insert_after()

#start_FrameHE-insert_before()
>>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_before('b', f2)
<FrameHE: x>
<Index>      a       c      d      b       <<U1>
<Index>
p            0       False  True   1
q            2       False  True   3
r            4       False  True   5
<<U1>        <int64> <bool> <bool> <int64>
#end_FrameHE-insert_before()

#start_FrameHE-isfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.isfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  False
2       True   True   True
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameHE-isfalsy()

#start_FrameHE-isin()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f.isin((0, 8))
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            False  True   False
1            False  False  True
2            True   True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameHE-isin()

#start_FrameHE-isna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.isna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  True
2       True   False  True
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameHE-isna()

#start_FrameHE-join_inner()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_inner(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_inner()

#start_FrameHE-join_left()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_left(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_left()

#start_FrameHE-join_outer()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_outer(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_outer()

#start_FrameHE-join_right()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_right(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameHE-join_right()

#start_FrameHE-loc_max()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameHE-loc_max()

#start_FrameHE-loc_min()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameHE-loc_min()

#start_FrameHE-max()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.max()
<Series>
<Index>
a        4
b        5
<<U1>    <int64>
#end_FrameHE-max()

#start_FrameHE-mean()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.mean()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameHE-mean()

#start_FrameHE-median()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.median()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameHE-median()

#start_FrameHE-min()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.min()
<Series>
<Index>
a        0
b        1
<<U1>    <int64>
#end_FrameHE-min()

#start_FrameHE-notfalsy()
>>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.notfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   True
2       False  False  False
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameHE-notfalsy()

#start_FrameHE-notna()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.notna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   False
2       False  True   False
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameHE-notna()

#start_FrameHE-pivot()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot(index_fields='b', columns_fields='c')
<FrameHE>
<Index: c> 0         1         <int64>
<Index: b>
0          11.0      nan
3          10.0      nan
8          nan       6.0
<int64>    <float64> <float64>
#end_FrameHE-pivot()

#start_FrameHE-pivot_stack()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot_stack()
<FrameHE: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
#end_FrameHE-pivot_stack()

#start_FrameHE-pivot_unstack()
>>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = f1.pivot_stack()
>>> f2
<FrameHE: x>
<Index>                0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
>>> f2.pivot_unstack()
<FrameHE: x>
<IndexHierarchy> 0       0       0       <int64>
                 a       b       c       <<U1>
<Index>
0                11      0       0
1                4       8       1
2                10      3       0
3                2       8       1
<int64>          <int64> <int64> <int64>
#end_FrameHE-pivot_unstack()

#start_FrameHE-prod()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.prod()
<Series>
<Index>
a        0
b        15
<<U1>    <int64>
#end_FrameHE-prod()

#start_FrameHE-rank_dense()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_dense()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       1
2            2       1       0
3            0       2       1
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_dense()

#start_FrameHE-rank_max()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_max()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       1
1            1       3       3
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_max()

#start_FrameHE-rank_mean()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_mean()
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
0            3.0       0.0       0.5
1            1.0       2.5       2.5
2            2.0       1.0       0.5
3            0.0       2.5       2.5
<int64>      <float64> <float64> <float64>
#end_FrameHE-rank_mean()

#start_FrameHE-rank_min()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_min()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       0
3            0       2       2
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_min()

#start_FrameHE-rank_ordinal()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_ordinal()
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameHE-rank_ordinal()

#start_FrameHE-rehierarch()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rehierarch((1, 0))
<FrameHE: x>
<Index>                  a       b      c               <<U1>
<IndexHierarchy>
p                1       10      False  1517-01-01
p                2       8       True   1517-12-31
q                1       2       True   1517-04-01
q                2       3       False  1517-06-30
<<U1>            <int64> <int64> <bool> <datetime64[D]>
#end_FrameHE-rehierarch()

#start_FrameHE-reindex()
>>> f = sf.FrameHE.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
q            2       XYZ
t            -1
s            3        wX
r            8       123
<<U1>        <int64> <<U4>
#end_FrameHE-reindex()

#start_FrameHE-relabel()
>>> f = sf.FrameHE.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(('y', 'z'))
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
z            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(dict(q='x', p='y'))
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
x            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(lambda l: f'+{l.upper()}+')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
+P+          10      False  1517-01-01
+Q+          8       True   1517-04-01
<<U3>        <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel()

#start_FrameHE-relabel_flat()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_flat(index=True)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
(1, 'p')     10      False  1517-01-01
(1, 'q')     2       True   1517-04-01
(2, 'p')     8       True   1517-12-31
(2, 'q')     3       False  1517-06-30
<object>     <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_flat()

#start_FrameHE-relabel_level_add()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_level_add('I')
<FrameHE: x>
<Index>                        a       b      c               <<U1>
<IndexHierarchy>
I                1       p     10      False  1517-01-01
I                1       q     2       True   1517-04-01
I                2       p     8       True   1517-12-31
I                2       q     3       False  1517-06-30
<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_level_add()

#start_FrameHE-relabel_level_drop()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.iloc[:2].relabel_level_drop(1)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            2       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_level_drop()

#start_FrameHE-relabel_shift_in()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_shift_in('a')
<FrameHE: x>
<Index>                                            b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
1                                    p     10      False  1517-01-01
1                                    q     2       True   1517-04-01
2                                    p     8       True   1517-12-31
2                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_shift_in()

#start_FrameHE-relabel_shift_out()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])
<FrameHE: x>
<Index>      e     d       a       b      c               <<U1>
<Index>
0            p     1       10      False  1517-01-01
1            q     1       2       True   1517-04-01
2            p     2       8       True   1517-12-31
3            q     2       3       False  1517-06-30
<int64>      <<U1> <int64> <int64> <bool> <datetime64[D]>
#end_FrameHE-relabel_shift_out()

#start_FrameHE-rename()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename('y', index='p', columns='q')
<FrameHE: y>
<Index: q>                a       b      c               <<U1>
<IndexHierarchy: p>
1                   p     10      False  1517-01-01
1                   q     2       True   1517-04-01
2                   p     8       True   1517-12-31
2                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-rename()

#start_FrameHE-roll()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.roll(3)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            2       True   1517-04-01
1            8       True   1517-12-31
2            3       False  1517-06-30
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-roll()

#start_FrameHE-sample()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sample(2, 2, seed=0)
<FrameHE: x>
<Index>      b      c               <<U1>
<Index>
2            True   1517-12-31
3            False  1517-06-30
<int64>      <bool> <datetime64[D]>
#end_FrameHE-sample()

#start_FrameHE-set_columns()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns((1, 'p'), drop=True)
<FrameHE: x>
<Index: (1, 'p')>       10      False  1517-01-01      <object>
<IndexHierarchy>
1                 q     2       True   1517-04-01
2                 p     8       True   1517-12-31
2                 q     3       False  1517-06-30
<int64>           <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-set_columns()

#start_FrameHE-set_columns_hierarchy()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)
<FrameHE: x>
<IndexHierarchy: ((1, 'p'), (1, '...       10      False  1517-01-01      <object>
                                           2       True   1517-04-01      <object>
<IndexHierarchy>
2                                    p     8       True   1517-12-31
2                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-set_columns_hierarchy()

#start_FrameHE-set_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)
<FrameHE: x>
<Index>         a       b      <<U1>
<IndexDate: c>
1517-01-01      10      False
1517-04-01      2       True
1517-12-31      8       True
1517-06-30      3       False
<datetime64[D]> <int64> <bool>
#end_FrameHE-set_index()

#start_FrameHE-set_index_hierarchy()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))
<FrameHE: x>
<Index>                                      a       <<U1>
<IndexHierarchy: ('b', 'c')>
False                        1517-01-01      10
True                         1517-04-01      2
True                         1517-12-31      8
False                        1517-06-30      3
<bool>                       <datetime64[D]> <int64>
#end_FrameHE-set_index_hierarchy()

#start_FrameHE-shift()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.shift(3, fill_value=sf.FillValueAuto)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            0       False  NaT
1            0       False  NaT
2            0       False  NaT
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-shift()

#start_FrameHE-sort_columns()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_columns(ascending=False)
<FrameHE: x>
<Index>                c               b      a       <<U1>
<IndexHierarchy>
1                p     1517-01-01      False  10
1                q     1517-04-01      True   2
2                p     1517-12-31      True   8
2                q     1517-06-30      False  3
<int64>          <<U1> <datetime64[D]> <bool> <int64>
#end_FrameHE-sort_columns()

#start_FrameHE-sort_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_index(ascending=False)
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
2                q     3       False  1517-06-30
2                p     8       True   1517-12-31
1                q     2       True   1517-04-01
1                p     10      False  1517-01-01
<int64>          <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-sort_index()

#start_FrameHE-sort_values()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values('c')
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
3            3       False  1517-06-30
2            8       True   1517-12-31
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values(['c', 'b'], ascending=False)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
1            2       True   1517-04-01
0            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-sort_values()

#start_FrameHE-std()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.std()
<Series>
<Index>
a        1.632993161855452
b        1.632993161855452
<<U1>    <float64>
#end_FrameHE-std()

#start_FrameHE-sum()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.sum()
<Series>
<Index>
a        6
b        9
<<U1>    <int64>
#end_FrameHE-sum()

#start_FrameHE-tail()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.tail(2)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-tail()

#start_FrameHE-transpose()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.transpose()
<FrameHE: x>
<Index>      p       q       r       <<U1>
<Index>
a            0       2       4
b            1       3       5
<<U1>        <int64> <int64> <int64>
#end_FrameHE-transpose()

#start_FrameHE-unique()
>>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.unique()
[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)
 nan None]
#end_FrameHE-unique()

#start_FrameHE-unset_columns()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.rename(columns='o').unset_columns()
<FrameHE: x>
<Index>      0        1        <int64>
<Index>
o            a        b
p            0        1
q            2        3
r            4        5
<<U1>        <object> <object>
#end_FrameHE-unset_columns()

#start_FrameHE-unset_index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=(('d', 'e'))).unset_index()
<FrameHE: x>
<Index>      d       e     a       b      c               <<U1>
<Index>
0            1       p     10      False  1517-01-01
1            1       q     2       True   1517-04-01
2            2       p     8       True   1517-12-31
3            2       q     3       False  1517-06-30
<int64>      <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameHE-unset_index()

#start_FrameHE-var()
>>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.var()
<Series>
<Index>
a        2.6666666666666665
b        2.6666666666666665
<<U1>    <float64>
#end_FrameHE-var()

#start_FrameHE-__contains__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.__contains__('a')
True
#end_FrameHE-__contains__()

#start_FrameHE-__iter__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__iter__())
('a', 'b', 'c')
#end_FrameHE-__iter__()

#start_FrameHE-__reversed__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__reversed__())
('c', 'b', 'a')
#end_FrameHE-__reversed__()

#start_FrameHE-get()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.get('a')
<Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>
>>> f.get('z', -1)
-1
#end_FrameHE-get()

#start_FrameHE-items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.items())
(('a', <Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>), ('b', <Series: b>
<Index>
0           False
1           True
2           True
3           False
<int64>     <bool>), ('c', <Series: c>
<Index>
0           1517-01-01
1           1517-04-01
2           1517-12-31
3           1517-06-30
<int64>     <datetime64[D]>))
#end_FrameHE-items()

#start_FrameHE-keys()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.keys()
<Index>
a
b
c
<<U1>
#end_FrameHE-keys()

#start_FrameHE-values
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.values
[[10 False datetime.date(1517, 1, 1)]
 [2 True datetime.date(1517, 4, 1)]
 [8 True datetime.date(1517, 12, 31)]
 [3 False datetime.date(1517, 6, 30)]]
#end_FrameHE-values

#start_FrameHE-interface
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.interface
<Frame: FrameHE>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(data, *, index, columns,... FrameHE  Constructor          Initializer. Args...
from_arrow(value, *, index_depth,... FrameHE  Constructor          Realize a Frame f...
from_clipboard(*, delimiter, inde... FrameHE  Constructor          Create a Frame fr...
from_concat(frames, *, axis, unio... FrameHE  Constructor          Concatenate multi...
from_concat_items(items, *, axis,... FrameHE  Constructor          Produce a Frame w...
from_csv(fp, *, index_depth, inde... FrameHE  Constructor          Specialized versi...
from_delimited(fp, *, delimiter, ... FrameHE  Constructor          Create a Frame fr...
from_dict(mapping, *, index, fill... FrameHE  Constructor          Create a Frame fr...
from_dict_records(records, *, ind... FrameHE  Constructor          Frame constructor...
from_dict_records_items(items, *,... FrameHE  Constructor          Frame constructor...
from_element(element, *, index, c... FrameHE  Constructor          Create a Frame fr...
from_element_items(items, *, inde... FrameHE  Constructor          Create a Frame fr...
from_elements(elements, *, index,... FrameHE  Constructor          Create a Frame fr...
from_fields(fields, *, index, col... FrameHE  Constructor          Frame constructor...
from_hdf5(fp, *, label, index_dep... FrameHE  Constructor          Load Frame from t...
from_items(pairs, *, index, fill_... FrameHE  Constructor          Frame constructor...
from_json(json_data, *, dtypes, n... FrameHE  Constructor          Frame constructor...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__eq__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__ne__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__gt__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__ge__... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__radd... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rsub... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rmul... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rtru... FrameHE  Accessor Fill Value
via_fill_value(fill_value).__rflo... FrameHE  Accessor Fill Value
via_re(pattern, flags).search(pos... FrameHE  Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... FrameHE  Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... FrameHE  Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... FrameHE  Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... FrameHE  Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... FrameHE  Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... FrameHE  Accessor Regular ... Perform the same ...
<<U89>                               <<U7>    <<U27>               <<U83>
#end_FrameHE-interface

#start_FrameHE-__repr__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> repr(f)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-__repr__()

#start_FrameHE-__str__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> str(f)
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-__str__()

#start_FrameHE-display()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display()
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-display()

#start_FrameHE-display_tall()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_tall()
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-display_tall()

#start_FrameHE-display_wide()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_wide()
<FrameHE: x>
<Index>      a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameHE-display_wide()

#start_FrameHE-assign[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign['a'](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      8       1
q            -1      -3      0
r            -1      8       9
s            -1      0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign[['a', 'c']](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      8       -1
q            -1      -3      -1
r            -1      8       -1
s            -1      0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign[]()

#start_FrameHE-assign[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply(lambda s: s / 100)
<FrameHE: x>
<Index>      a         b       c       <<U1>
<Index>
p            0.1       8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameHE-assign[].apply()

#start_FrameHE-assign.iloc[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.iloc[2]((-1, -2, -3))
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -2      -3
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[[0, 3]](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign.iloc[]()

#start_FrameHE-assign.iloc[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:].apply(lambda s: s / 100)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.iloc[].apply()

#start_FrameHE-assign.loc[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.loc['r'](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc[['p', 's']](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign.loc[]()

#start_FrameHE-assign.loc[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply(lambda s: s / 100)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.loc[].apply()

#start_FrameHE-assign.bloc[]()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5](-1)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -1      -1      1
q            -2      -3      0
r            0       -1      -1
s            0       0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameHE-assign.bloc[]()

#start_FrameHE-assign.bloc[].apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply(lambda s: s * .01)
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            0.1       0.08      1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameHE-assign.bloc[].apply()

#start_FrameHE-bloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.bloc[f > 5]
<Series>
<Index>
('p', 'a') 10
('p', 'b') 8
('r', 'b') 8
('r', 'c') 9
('s', 'c') 12
<object>   <int64>
#end_FrameHE-bloc[]

#start_FrameHE-drop[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop['c']
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            10      8
q            -2      -3
r            0       8
s            0       0
<<U1>        <int64> <int64>
>>> f.drop['b':]
<FrameHE: x>
<Index>      a       <<U1>
<Index>
p            10
q            -2
r            0
s            0
<<U1>        <int64>
>>> f.drop[['a', 'c']]
<FrameHE: x>
<Index>      b       <<U1>
<Index>
p            8
q            -3
r            8
s            0
<<U1>        <int64>
#end_FrameHE-drop[]

#start_FrameHE-drop.iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.iloc[1]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[1:]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[[0, 2]]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-drop.iloc[]

#start_FrameHE-drop.loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.loc['r']
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc['r':]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc[['p', 's']]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>
#end_FrameHE-drop.loc[]

#start_FrameHE-mask[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask['c']
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  True
q         False  False  True
r         False  False  True
s         False  False  True
<<U1>     <bool> <bool> <bool>
>>> f.mask['b':]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  True   True
q         False  True   True
r         False  True   True
s         False  True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask[['a', 'c']]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   False  True
q         True   False  True
r         True   False  True
s         True   False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-mask[]

#start_FrameHE-mask.iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.iloc[1]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[1:]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[[0, 2]]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-mask.iloc[]

#start_FrameHE-mask.loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.loc['r']
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc['r':]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc[['p', 's']]
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         False  False  False
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-mask.loc[]

#start_FrameHE-masked_array[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array['c']
[[10 8 --]
 [-2 -3 --]
 [0 8 --]
 [0 0 --]]
>>> f.masked_array['b':]
[[10 -- --]
 [-2 -- --]
 [0 -- --]
 [0 -- --]]
>>> f.masked_array[['a', 'c']]
[[-- 8 --]
 [-- -3 --]
 [-- 8 --]
 [-- 0 --]]
#end_FrameHE-masked_array[]

#start_FrameHE-masked_array.iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.iloc[1]
[[10 8 1]
 [-- -- --]
 [0 8 9]
 [0 0 12]]
>>> f.masked_array.iloc[1:]
[[10 8 1]
 [-- -- --]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.iloc[[0, 2]]
[[-- -- --]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
#end_FrameHE-masked_array.iloc[]

#start_FrameHE-masked_array.loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.loc['r']
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
>>> f.masked_array.loc['r':]
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.loc[['p', 's']]
[[-- -- --]
 [-2 -3 0]
 [0 8 9]
 [-- -- --]]
#end_FrameHE-masked_array.loc[]

#start_FrameHE-[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f['b']
<Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>
>>> f['b':]
<FrameHE: x>
<Index>      b       c       <<U1>
<Index>
p            8       1
q            -3      0
r            8       9
s            0       12
<<U1>        <int64> <int64>
>>> f[['a', 'c']]
<FrameHE: x>
<Index>      a       c       <<U1>
<Index>
p            10      1
q            -2      0
r            0       9
s            0       12
<<U1>        <int64> <int64>
#end_FrameHE-[]

#start_FrameHE-iloc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iloc[2]
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.iloc[2:]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iloc[[0, 3]]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-iloc[]

#start_FrameHE-loc[]
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.loc['r']
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.loc['r':]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.loc[['p', 's']]
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-loc[]

#start_FrameHE-iter_array()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array())
(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))
#end_FrameHE-iter_array()

#start_FrameHE-iter_array().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_array().apply()

#start_FrameHE-iter_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameHE-iter_array().apply_iter()

#start_FrameHE-iter_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameHE-iter_array().apply_iter_items()

#start_FrameHE-iter_array().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_array().apply_pool()

#start_FrameHE-iter_array_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items())
(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))
#end_FrameHE-iter_array_items()

#start_FrameHE-iter_array_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_array_items().apply()

#start_FrameHE-iter_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameHE-iter_array_items().apply_iter()

#start_FrameHE-iter_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameHE-iter_array_items().apply_iter_items()

#start_FrameHE-iter_array_items().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_array_items().apply_pool()

#start_FrameHE-iter_element()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element())
(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)
#end_FrameHE-iter_element()

#start_FrameHE-iter_element().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply(lambda e: e > 5)
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-iter_element().apply()

#start_FrameHE-iter_element().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter(lambda e: e > 10))
(False, False, False, False, False, False, False, False, False, False, False, True)
#end_FrameHE-iter_element().apply_iter()

#start_FrameHE-iter_element().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))
((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))
#end_FrameHE-iter_element().apply_iter_items()

#start_FrameHE-iter_element().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-iter_element().apply_pool()

#start_FrameHE-iter_element().map_all()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      200
r         200     45      45
s         200     200     -1
<<U1>     <int64> <int64> <int64>
#end_FrameHE-iter_element().map_all()

#start_FrameHE-iter_element().map_all_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)
#end_FrameHE-iter_element().map_all_iter()

#start_FrameHE-iter_element().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))
#end_FrameHE-iter_element().map_all_iter_items()

#start_FrameHE-iter_element().map_any()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_any({1: -1, 2: 45})
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      0
r         0       45      45
s         0       0       -1
<<U1>     <int64> <int64> <int64>
#end_FrameHE-iter_element().map_any()

#start_FrameHE-iter_element().map_any_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)
#end_FrameHE-iter_element().map_any_iter()

#start_FrameHE-iter_element().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))
#end_FrameHE-iter_element().map_any_iter_items()

#start_FrameHE-iter_element().map_fill()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         -1.0      45.0      -1.0
q         45.0      -1.0      nan
r         nan       45.0      45.0
s         nan       nan       -1.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-iter_element().map_fill()

#start_FrameHE-iter_element().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))
(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)
#end_FrameHE-iter_element().map_fill_iter()

#start_FrameHE-iter_element().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))
#end_FrameHE-iter_element().map_fill_iter_items()

#start_FrameHE-iter_element_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items())
((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))
#end_FrameHE-iter_element_items()

#start_FrameHE-iter_element_items().apply()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')
<FrameHE>
<Index>   a      b        c      <<U1>
<Index>
p         False  True     False
q         True   x        False
r         False  True     True
s         False  False    False
<<U1>     <bool> <object> <bool>
#end_FrameHE-iter_element_items().apply()

#start_FrameHE-iter_element_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
(False, True, False, True, 'x', False, False, True, True, False, False, False)
#end_FrameHE-iter_element_items().apply_iter()

#start_FrameHE-iter_element_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))
#end_FrameHE-iter_element_items().apply_iter_items()

#start_FrameHE-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')
>>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply_pool(func, use_threads=True)
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-iter_element_items().apply_pool()

#start_FrameHE-iter_element_items().map_all()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         200     -1
q         45      1
<<U1>     <int64> <int64>
#end_FrameHE-iter_element_items().map_all()

#start_FrameHE-iter_element_items().map_all_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
(200, -1, 45, 1)
#end_FrameHE-iter_element_items().map_all_iter()

#start_FrameHE-iter_element_items().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))
#end_FrameHE-iter_element_items().map_all_iter_items()

#start_FrameHE-iter_element_items().map_any()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         200     3
q         9       1
<<U1>     <int64> <int64>
#end_FrameHE-iter_element_items().map_any()

#start_FrameHE-iter_element_items().map_any_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
(200, 3, 9, 1)
#end_FrameHE-iter_element_items().map_any_iter()

#start_FrameHE-iter_element_items().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))
#end_FrameHE-iter_element_items().map_any_iter_items()

#start_FrameHE-iter_element_items().map_fill()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         200     -1
q         -1      1
<<U1>     <int64> <int64>
#end_FrameHE-iter_element_items().map_fill()

#start_FrameHE-iter_element_items().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
(200, -1, -1, 1)
#end_FrameHE-iter_element_items().map_fill_iter()

#start_FrameHE-iter_element_items().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))
#end_FrameHE-iter_element_items().map_fill_iter_items()

#start_FrameHE-iter_group()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c'))
(<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>, <FrameHE>
<Index>   a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>)
#end_FrameHE-iter_group()

#start_FrameHE-iter_group().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply(lambda f: f['b'].sum())
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameHE-iter_group().apply()

#start_FrameHE-iter_group().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))
(3, 16)
#end_FrameHE-iter_group().apply_iter()

#start_FrameHE-iter_group().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))
((0, 3), (1, 16))
#end_FrameHE-iter_group().apply_iter_items()

#start_FrameHE-iter_group().apply_pool()
>>> def func(f): return f['b'].sum()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameHE-iter_group().apply_pool()

#start_FrameHE-iter_group_array()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c'))
(array([[11,  0,  0],
       [10,  3,  0]]), array([[4, 8, 1],
       [2, 8, 1]]))
#end_FrameHE-iter_group_array()

#start_FrameHE-iter_group_array().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply(lambda a: np.sum(a))
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameHE-iter_group_array().apply()

#start_FrameHE-iter_group_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))
(24, 24)
#end_FrameHE-iter_group_array().apply_iter()

#start_FrameHE-iter_group_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))
((0, 24), (1, 24))
#end_FrameHE-iter_group_array().apply_iter_items()

#start_FrameHE-iter_group_array().apply_pool()
>>> def func(a): return np.sum(a)
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameHE-iter_group_array().apply_pool()

#start_FrameHE-iter_group_array_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c'))
((0, array([[11,  0,  0],
       [10,  3,  0]])), (1, array([[4, 8, 1],
       [2, 8, 1]])))
#end_FrameHE-iter_group_array_items()

#start_FrameHE-iter_group_array_items().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)
<Series>
<Index: c>
0          24
1          (2, 3)
<int64>    <object>
#end_FrameHE-iter_group_array_items().apply()

#start_FrameHE-iter_group_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))
(24, (2, 3))
#end_FrameHE-iter_group_array_items().apply_iter()

#start_FrameHE-iter_group_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))
((0, 24), (1, (2, 3)))
#end_FrameHE-iter_group_array_items().apply_iter_items()

#start_FrameHE-iter_group_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c'))
((0, <FrameHE>
<Index>   a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>), (1, <FrameHE>
<Index>   a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>))
#end_FrameHE-iter_group_items()

#start_FrameHE-iter_group_items().apply()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)
<Series>
<Index: c>
0          3
1          (2, 3)
<int64>    <object>
#end_FrameHE-iter_group_items().apply()

#start_FrameHE-iter_group_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))
(3, (2, 3))
#end_FrameHE-iter_group_items().apply_iter()

#start_FrameHE-iter_group_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))
((0, 3), (1, (2, 3)))
#end_FrameHE-iter_group_items().apply_iter_items()

#start_FrameHE-iter_group_labels()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1))
(<FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
2                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>, <FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                q     2       True   1517-04-01
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>)
#end_FrameHE-iter_group_labels()

#start_FrameHE-iter_group_labels().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())
<Series>
<Index>
p        1
q        1
<<U1>    <int64>
#end_FrameHE-iter_group_labels().apply()

#start_FrameHE-iter_group_labels().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum())
<generator object IterNodeDelegate.apply_iter at 0x117bba2e0>
#end_FrameHE-iter_group_labels().apply_iter()

#start_FrameHE-iter_group_labels().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum())
<generator object IterNodeDelegate.apply_iter_items at 0x117bba270>
#end_FrameHE-iter_group_labels().apply_iter_items()

#start_FrameHE-iter_group_labels_array()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1))
(array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object))
#end_FrameHE-iter_group_labels_array()

#start_FrameHE-iter_group_labels_array().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))
<Series>
<Index>
p        18
q        5
<<U1>    <int64>
#end_FrameHE-iter_group_labels_array().apply()

#start_FrameHE-iter_group_labels_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))
(18, 5)
#end_FrameHE-iter_group_labels_array().apply_iter()

#start_FrameHE-iter_group_labels_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))
(('p', 18), ('q', 5))
#end_FrameHE-iter_group_labels_array().apply_iter_items()

#start_FrameHE-iter_group_labels_array_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1))
(('p', array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))
#end_FrameHE-iter_group_labels_array_items()

#start_FrameHE-iter_group_labels_array_items().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)
<Series>
<Index>
p        -1
q        5
<<U1>    <int64>
#end_FrameHE-iter_group_labels_array_items().apply()

#start_FrameHE-iter_group_labels_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(-1, 5)
#end_FrameHE-iter_group_labels_array_items().apply_iter()

#start_FrameHE-iter_group_labels_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(('p', -1), ('q', 5))
#end_FrameHE-iter_group_labels_array_items().apply_iter_items()

#start_FrameHE-iter_group_labels_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1))
(('p', <FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
2                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <FrameHE>
<Index>                a       b      c               <<U1>
<IndexHierarchy>
1                q     2       True   1517-04-01
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>))
#end_FrameHE-iter_group_labels_items()

#start_FrameHE-iter_group_labels_items().apply()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)
<Series>
<Index>
p        1
q        -1
<<U1>    <int64>
#end_FrameHE-iter_group_labels_items().apply()

#start_FrameHE-iter_group_labels_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))
(1, -1)
#end_FrameHE-iter_group_labels_items().apply_iter()

#start_FrameHE-iter_group_labels_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))
(('p', 1), ('q', -1))
#end_FrameHE-iter_group_labels_items().apply_iter_items()

#start_FrameHE-iter_series()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series())
(<Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>, <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>, <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>)
#end_FrameHE-iter_series()

#start_FrameHE-iter_series().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_series().apply()

#start_FrameHE-iter_series().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameHE-iter_series().apply_iter()

#start_FrameHE-iter_series().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameHE-iter_series().apply_iter_items()

#start_FrameHE-iter_series().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameHE-iter_series().apply_pool()

#start_FrameHE-iter_series_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items())
(('a', <Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>), ('b', <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>), ('c', <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>))
#end_FrameHE-iter_series_items()

#start_FrameHE-iter_series_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_series_items().apply()

#start_FrameHE-iter_series_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameHE-iter_series_items().apply_iter()

#start_FrameHE-iter_series_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameHE-iter_series_items().apply_iter_items()

#start_FrameHE-iter_series_items().apply_pool()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameHE-iter_series_items().apply_pool()

#start_FrameHE-iter_tuple()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple())
(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))
#end_FrameHE-iter_tuple()

#start_FrameHE-iter_tuple().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple().apply(lambda v: v.p + v.q)
<Series>
<Index>
a        8
b        5
c        1
<<U1>    <int64>
#end_FrameHE-iter_tuple().apply()

#start_FrameHE-iter_tuple().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))
(8, 5, 1)
#end_FrameHE-iter_tuple().apply_iter()

#start_FrameHE-iter_tuple().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))
(('a', 8), ('b', 5), ('c', 1))
#end_FrameHE-iter_tuple().apply_iter_items()

#start_FrameHE-iter_tuple().map_all()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameHE-iter_tuple().map_all()

#start_FrameHE-iter_tuple().map_all_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))
(-1, -2)
#end_FrameHE-iter_tuple().map_all_iter()

#start_FrameHE-iter_tuple().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))
(('a', -1), ('b', -2))
#end_FrameHE-iter_tuple().map_all_iter_items()

#start_FrameHE-iter_tuple().map_any()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any({(2, 9): -1}))
('a', 'b')
#end_FrameHE-iter_tuple().map_any()

#start_FrameHE-iter_tuple().map_any_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))
(-1, Axis(p=3, q=8))
#end_FrameHE-iter_tuple().map_any_iter()

#start_FrameHE-iter_tuple().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameHE-iter_tuple().map_any_iter_items()

#start_FrameHE-iter_tuple().map_fill()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameHE-iter_tuple().map_fill()

#start_FrameHE-iter_tuple().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameHE-iter_tuple().map_fill_iter()

#start_FrameHE-iter_tuple().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameHE-iter_tuple().map_fill_iter_items()

#start_FrameHE-iter_tuple_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items())
(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))
#end_FrameHE-iter_tuple_items()

#start_FrameHE-iter_tuple_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)
<Series>
<Index>
a        -1
b        5
c        -1
<<U1>    <int64>
#end_FrameHE-iter_tuple_items().apply()

#start_FrameHE-iter_tuple_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))
(-1, 5, -1)
#end_FrameHE-iter_tuple_items().apply_iter()

#start_FrameHE-iter_tuple_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))
(('a', -1), ('b', 5), ('c', -1))
#end_FrameHE-iter_tuple_items().apply_iter_items()

#start_FrameHE-iter_tuple_items().map_all()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameHE-iter_tuple_items().map_all()

#start_FrameHE-iter_tuple_items().map_all_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(-1, -2)
#end_FrameHE-iter_tuple_items().map_all_iter()

#start_FrameHE-iter_tuple_items().map_all_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(('a', -1), ('b', -2))
#end_FrameHE-iter_tuple_items().map_all_iter_items()

#start_FrameHE-iter_tuple_items().map_any()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})
<Series>
<Index>
a        -1
b        Axis(p=3, q=8)
<<U1>    <object>
#end_FrameHE-iter_tuple_items().map_any()

#start_FrameHE-iter_tuple_items().map_any_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))
(-1, Axis(p=3, q=8))
#end_FrameHE-iter_tuple_items().map_any_iter()

#start_FrameHE-iter_tuple_items().map_any_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameHE-iter_tuple_items().map_any_iter_items()

#start_FrameHE-iter_tuple_items().map_fill()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameHE-iter_tuple_items().map_fill()

#start_FrameHE-iter_tuple_items().map_fill_iter()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameHE-iter_tuple_items().map_fill_iter()

#start_FrameHE-iter_tuple_items().map_fill_iter_items()
>>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameHE-iter_tuple_items().map_fill_iter_items()

#start_FrameHE-iter_window()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1))
(<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>, <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>, <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>)
#end_FrameHE-iter_window()

#start_FrameHE-iter_window().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameHE-iter_window().apply()

#start_FrameHE-iter_window().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))
(10, 9, 12)
#end_FrameHE-iter_window().apply_iter()

#start_FrameHE-iter_window().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameHE-iter_window().apply_iter_items()

#start_FrameHE-iter_window_array()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1))
(array([[10,  8,  1],
       [-2, -3,  0]]), array([[-2, -3,  0],
       [ 0,  8,  9]]), array([[ 0,  8,  9],
       [ 0,  0, 12]]))
#end_FrameHE-iter_window_array()

#start_FrameHE-iter_window_array().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameHE-iter_window_array().apply()

#start_FrameHE-iter_window_array().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))
(10, 9, 12)
#end_FrameHE-iter_window_array().apply_iter()

#start_FrameHE-iter_window_array().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameHE-iter_window_array().apply_iter_items()

#start_FrameHE-iter_window_array_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1))
(('q', array([[10,  8,  1],
       [-2, -3,  0]])), ('r', array([[-2, -3,  0],
       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],
       [ 0,  0, 12]])))
#end_FrameHE-iter_window_array_items()

#start_FrameHE-iter_window_array_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameHE-iter_window_array_items().apply()

#start_FrameHE-iter_window_array_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(-3, 9, 0)
#end_FrameHE-iter_window_array_items().apply_iter()

#start_FrameHE-iter_window_array_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameHE-iter_window_array_items().apply_iter_items()

#start_FrameHE-iter_window_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1))
(('q', <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>), ('r', <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>), ('s', <FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>))
#end_FrameHE-iter_window_items()

#start_FrameHE-iter_window_items().apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameHE-iter_window_items().apply()

#start_FrameHE-iter_window_items().apply_iter()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(-3, 9, 0)
#end_FrameHE-iter_window_items().apply_iter()

#start_FrameHE-iter_window_items().apply_iter_items()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameHE-iter_window_items().apply_iter_items()

#start_FrameHE-__add__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 + 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
>>> f1 + f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         12.0      11.0      nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__add__()

#start_FrameHE-__and__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f & True
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  True
q            True   True
r            True   False
<<U1>        <bool> <bool>
>>> f & (True, False)
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   False
r         True   False
<<U1>     <bool> <bool>
#end_FrameHE-__and__()

#start_FrameHE-__eq__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 == 8
False
>>> f1 == f2
False
#end_FrameHE-__eq__()

#start_FrameHE-__floordiv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 // 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            1       1       0
q            -1      -1      0
r            0       1       1
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f1 // f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         5.0       2.0       nan
q         -1.0      -1.0      nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__floordiv__()

#start_FrameHE-__ge__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 >= 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            True   True   False
q            False  False  False
r            False  True   True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 >= f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__ge__()

#start_FrameHE-__gt__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 > 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            True   False  False
q            False  False  False
r            False  False  True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 > f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__gt__()

#start_FrameHE-__le__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 <= 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            False  True   True
q            True   True   True
r            True   True   False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 <= f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__le__()

#start_FrameHE-__lt__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 < 8
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
p            False  False  True
q            True   True   True
r            True   False  False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 < f2
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-__lt__()

#start_FrameHE-__matmul__()
>>> f1 = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameHE-__matmul__()

#start_FrameHE-__mod__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 % 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            2       0       1
q            6       5       0
r            0       0       1
s            0       0       4
<<U1>        <int64> <int64> <int64>
>>> f1 % f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         0.0       2.0       nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__mod__()

#start_FrameHE-__mul__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 * 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
>>> f1 * f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         20.0      24.0      nan
q         -18.0     -24.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__mul__()

#start_FrameHE-__ne__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 != 8
True
>>> f1 != f2
True
#end_FrameHE-__ne__()

#start_FrameHE-__or__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f | True
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   True
q            True   True
r            True   True
<<U1>        <bool> <bool>
>>> f | (True, False)
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameHE-__or__()

#start_FrameHE-__pow__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 ** 8
<FrameHE: x>
<Index>      a         b        c         <<U1>
<Index>
p            100000000 16777216 1
q            256       6561     0
r            0         16777216 43046721
s            0         0        429981696
<<U1>        <int64>   <int64>  <int64>
>>> f1 ** f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         100.0     512.0     1.0
q         -512.0    6561.0    nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__pow__()

#start_FrameHE-__radd__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 + f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__radd__()

#start_FrameHE-__rfloordiv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 // f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            0       1       8
q            -4      -3      0
r            0       1       0
s            0       0       0
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rfloordiv__()

#start_FrameHE-__rmatmul__()
>>> f1 = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameHE-__rmatmul__()

#start_FrameHE-__rmul__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 * f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rmul__()

#start_FrameHE-__rshift__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f1 >> 1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            5       4       0
q            -1      -2      0
r            0       4       4
s            0       0       6
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rshift__()

#start_FrameHE-__rsub__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 - f1
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -2      0       7
q            10      11      8
r            8       0       -1
s            8       8       -4
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__rsub__()

#start_FrameHE-__rtruediv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 / f1
<FrameHE: x>
<Index>      a         b                   c                  <<U1>
<Index>
p            0.8       1.0                 8.0
q            -4.0      -2.6666666666666665 inf
r            inf       1.0                 0.8888888888888888
s            inf       inf                 0.6666666666666666
<<U1>        <float64> <float64>           <float64>
#end_FrameHE-__rtruediv__()

#start_FrameHE-__sub__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 - 8
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            2       0       -7
q            -10     -11     -8
r            -8      0       1
s            -8      -8      4
<<U1>        <int64> <int64> <int64>
>>> f1 - f2
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         8.0       5.0       nan
q         -11.0     -11.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameHE-__sub__()

#start_FrameHE-__truediv__()
>>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 / 8
<FrameHE: x>
<Index>      a         b         c         <<U1>
<Index>
p            1.25      1.0       0.125
q            -0.25     -0.375    0.0
r            0.0       1.0       1.125
s            0.0       0.0       1.5
<<U1>        <float64> <float64> <float64>
>>> f1 / f2
<FrameHE>
<Index>   a                   b                  c         <<U1>
<Index>
p         5.0                 2.6666666666666665 nan
q         -0.2222222222222222 -0.375             nan
r         nan                 nan                nan
s         nan                 nan                nan
<<U1>     <float64>           <float64>          <float64>
#end_FrameHE-__truediv__()

#start_FrameHE-__xor__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f ^ True
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
>>> f ^ (True, False)
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         False  True
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-__xor__()

#start_FrameHE-__abs__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> abs(f)
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            2       3       0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__abs__()

#start_FrameHE-__invert__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> ~f
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
#end_FrameHE-__invert__()

#start_FrameHE-__neg__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> -f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            -10     -8      -1
q            2       3       0
r            0       -8      -9
s            0       0       -12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__neg__()

#start_FrameHE-__pos__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> +f
<FrameHE: x>
<Index>      a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameHE-__pos__()

#start_FrameHE-via_dt.year
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.year
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         1517    2022
q         1517    2021
r         1517    2022
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.year

#start_FrameHE-via_dt.month
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.month
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         4       4
q         12      12
r         6       6
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.month

#start_FrameHE-via_dt.day
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.day
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         1       1
q         31      31
r         30      30
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.day

#start_FrameHE-via_dt.hour
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.hour
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.hour

#start_FrameHE-via_dt.minute
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.minute
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.minute

#start_FrameHE-via_dt.second
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.second
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.second

#start_FrameHE-via_dt.weekday()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.weekday()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         6       4
q         0       4
r         5       3
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.weekday()

#start_FrameHE-via_dt.quarter()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.quarter()
<FrameHE>
<Index>   a       b       <<U1>
<Index>
p         2       2
q         4       4
r         2       2
<<U1>     <int64> <int64>
#end_FrameHE-via_dt.quarter()

#start_FrameHE-via_dt.is_month_end()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_end()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_month_end()

#start_FrameHE-via_dt.is_month_start()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_start()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_month_start()

#start_FrameHE-via_dt.is_year_end()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_end()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_year_end()

#start_FrameHE-via_dt.is_year_start()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_start()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_year_start()

#start_FrameHE-via_dt.is_quarter_end()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_end()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_quarter_end()

#start_FrameHE-via_dt.is_quarter_start()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_start()
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_dt.is_quarter_start()

#start_FrameHE-via_dt.timetuple()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.timetuple()
<FrameHE>
<Index>   a                    b                    <<U1>
<Index>
p         time.struct_time(... time.struct_time(...
q         time.struct_time(... time.struct_time(...
r         time.struct_time(... time.struct_time(...
<<U1>     <object>             <object>
#end_FrameHE-via_dt.timetuple()

#start_FrameHE-via_dt.isoformat()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.isoformat()
<FrameHE>
<Index>   a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <<U10>     <<U10>
#end_FrameHE-via_dt.isoformat()

#start_FrameHE-via_dt.fromisoformat()
>>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.fromisoformat()
<FrameHE>
<Index>   a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameHE-via_dt.fromisoformat()

#start_FrameHE-via_dt.strftime()
>>> s = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<FrameHE>
<Index>   a                 b                 <<U1>
<Index>
p         Sunday | April    Friday | April
q         Monday | December Friday | December
r         Saturday | June   Thursday | June
<<U1>     <<U17>            <<U17>
#end_FrameHE-via_dt.strftime()

#start_FrameHE-via_dt.strptime()
>>> f = sf.FrameHE.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strptime("%m/%d/%Y")
<FrameHE>
<Index>   a                   b                   <<U1>
<Index>
p         1517-04-01 00:00:00 2022-04-01 00:00:00
q         1517-12-31 00:00:00 2021-12-31 00:00:00
r         1517-06-30 00:00:00 2022-06-30 00:00:00
<<U1>     <object>            <object>
#end_FrameHE-via_dt.strptime()

#start_FrameHE-via_dt.strpdate()
>>> f = sf.FrameHE.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strpdate("%m/%d/%Y")
<FrameHE>
<Index>   a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameHE-via_dt.strpdate()

#start_FrameHE-via_str.__getitem__()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str[-1]
<FrameHE: x>
<Index>      a     b     <<U1>
<Index>
p            0
q            2     Z
r            8     3
s            3
<<U1>        <<U1> <<U1>
#end_FrameHE-via_str.__getitem__()

#start_FrameHE-via_str.capitalize()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.capitalize()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.capitalize()

#start_FrameHE-via_str.center()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.center(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p               10      qrs
q               2       XYZ
r               8       123
s               3        wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.center()

#start_FrameHE-via_str.contains()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.contains('X')
<FrameHE: x>
<Index>      a     b     <<U1>
<Index>
p            False False
q            False True
r            False False
s            False True
<<U1>        <<U5> <<U5>
#end_FrameHE-via_str.contains()

#start_FrameHE-via_str.count()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.count('X')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            0       0
q            0       1
r            0       0
s            0       1
<<U1>        <int64> <int64>
#end_FrameHE-via_str.count()

#start_FrameHE-via_str.decode()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)
>>> f
<FrameHE: x>
<Index>      a      b       <<U1>
<Index>
p            b'10'  b'qrs '
q            b'2'   b'XYZ'
r            b'8'   b'123'
s            b'3'   b' wX '
<<U1>        <|S21> <|S4>
>>> f.via_str.decode()
<FrameHE: x>
<Index>      a     b     <<U1>
<Index>
p            10    qrs
q            2     XYZ
r            8     123
s            3      wX
<<U1>        <<U2> <<U4>
#end_FrameHE-via_str.decode()

#start_FrameHE-via_str.encode()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.encode()
<FrameHE: x>
<Index>      a     b       <<U1>
<Index>
p            b'10' b'qrs '
q            b'2'  b'XYZ'
r            b'8'  b'123'
s            b'3'  b' wX '
<<U1>        <|S2> <|S4>
#end_FrameHE-via_str.encode()

#start_FrameHE-via_str.endswith()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.endswith(' ')
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  True
<<U1>        <bool> <bool>
#end_FrameHE-via_str.endswith()

#start_FrameHE-via_str.find()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.find('X')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameHE-via_str.find()

#start_FrameHE-via_str.index()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.index('X')
ValueError('substring not found')
#end_FrameHE-via_str.index()

#start_FrameHE-via_str.isalnum()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalnum()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   True
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isalnum()

#start_FrameHE-via_str.isalpha()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalpha()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isalpha()

#start_FrameHE-via_str.isdecimal()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdecimal()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isdecimal()

#start_FrameHE-via_str.isdigit()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdigit()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isdigit()

#start_FrameHE-via_str.islower()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.islower()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.islower()

#start_FrameHE-via_str.isnumeric()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isnumeric()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isnumeric()

#start_FrameHE-via_str.isspace()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isspace()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isspace()

#start_FrameHE-via_str.istitle()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.istitle()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.istitle()

#start_FrameHE-via_str.isupper()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isupper()
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.isupper()

#start_FrameHE-via_str.ljust()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.ljust(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p            10       qrs
q            2        XYZ
r            8        123
s            3         wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.ljust()

#start_FrameHE-via_str.len()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.len()
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            2       4
q            1       3
r            1       3
s            1       4
<<U1>        <int64> <int64>
#end_FrameHE-via_str.len()

#start_FrameHE-via_str.lower()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lower()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.lower()

#start_FrameHE-via_str.lstrip()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lstrip()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.lstrip()

#start_FrameHE-via_str.partition()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.partition('X')
<FrameHE: x>
<Index>      a              b                <<U1>
<Index>
p            ('10', '', '') ('qrs ', '', '')
q            ('2', '', '')  ('', 'X', 'YZ')
r            ('8', '', '')  ('123', '', '')
s            ('3', '', '')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameHE-via_str.partition()

#start_FrameHE-via_str.replace()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.replace('X', '*')
<FrameHE: x>
<Index>      a     b     <<U1>
<Index>
p            10    qrs
q            2     *YZ
r            8     123
s            3      w*
<<U1>        <<U2> <<U4>
#end_FrameHE-via_str.replace()

#start_FrameHE-via_str.rfind()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rfind('X')
<FrameHE: x>
<Index>      a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameHE-via_str.rfind()

#start_FrameHE-via_str.rindex()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rindex('X')
ValueError('substring not found')
#end_FrameHE-via_str.rindex()

#start_FrameHE-via_str.rjust()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rjust(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p                  10     qrs
q                   2      XYZ
r                   8      123
s                   3      wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.rjust()

#start_FrameHE-via_str.rpartition()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rpartition('X')
<FrameHE: x>
<Index>      a              b                <<U1>
<Index>
p            ('', '', '10') ('', '', 'qrs ')
q            ('', '', '2')  ('', 'X', 'YZ')
r            ('', '', '8')  ('', '', '123')
s            ('', '', '3')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameHE-via_str.rpartition()

#start_FrameHE-via_str.rsplit()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rsplit('X')
<FrameHE: x>
<Index>      a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameHE-via_str.rsplit()

#start_FrameHE-via_str.rstrip()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rstrip()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3       wX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.rstrip()

#start_FrameHE-via_str.split()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.split('X')
<FrameHE: x>
<Index>      a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameHE-via_str.split()

#start_FrameHE-via_str.startswith()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.startswith('X')
<FrameHE: x>
<Index>      a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameHE-via_str.startswith()

#start_FrameHE-via_str.strip()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.strip()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.strip()

#start_FrameHE-via_str.swapcase()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.swapcase()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     QRS
q            2      xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.swapcase()

#start_FrameHE-via_str.title()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.title()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.title()

#start_FrameHE-via_str.upper()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.upper()
<FrameHE: x>
<Index>      a      b     <<U1>
<Index>
p            10     QRS
q            2      XYZ
r            8      123
s            3       WX
<<U1>        <<U21> <<U4>
#end_FrameHE-via_str.upper()

#start_FrameHE-via_str.zfill()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.zfill(8)
<FrameHE: x>
<Index>      a        b        <<U1>
<Index>
p            00000010 0000qrs
q            00000002 00000XYZ
r            00000008 00000123
s            00000003 0000 wX
<<U1>        <<U8>    <<U8>
#end_FrameHE-via_str.zfill()

#start_FrameHE-via_T.via_fill_value()
>>> 
#end_FrameHE-via_T.via_fill_value()

#start_FrameHE-via_T.__add__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__add__()

#start_FrameHE-via_T.__sub__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__sub__()

#start_FrameHE-via_T.__mul__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__mul__()

#start_FrameHE-via_T.__truediv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__truediv__()

#start_FrameHE-via_T.__floordiv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__floordiv__()

#start_FrameHE-via_T.__mod__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T % s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         -0.0      -1.0      -0.0
r         0.0       0.0       0.0
s         0.0       0.0       0.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__mod__()

#start_FrameHE-via_T.__pow__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T ** s
<FrameHE>
<Index>   a         b                  c         <<U1>
<Index>
p         1.0       1.0                1.0
q         0.25      0.1111111111111111 inf
r         0.0       2.8284271247461903 3.0
s         0.0       0.0                12.0
<<U1>     <float64> <float64>          <float64>
#end_FrameHE-via_T.__pow__()

#start_FrameHE-via_T.__lshift__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T << s
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         10      8       1
q         0       0       0
r         0       64      72
s         0       0       24
<<U1>     <int64> <int64> <int64>
#end_FrameHE-via_T.__lshift__()

#start_FrameHE-via_T.__rshift__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >> s
<FrameHE>
<Index>   a       b       c       <<U1>
<Index>
p         10      8       1
q         -1      -1      0
r         0       1       1
s         0       0       6
<<U1>     <int64> <int64> <int64>
#end_FrameHE-via_T.__rshift__()

#start_FrameHE-via_T.__and__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T & s
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameHE-via_T.__and__()

#start_FrameHE-via_T.__xor__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T ^ s
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  True
q         False  False
r         False  True
<<U1>     <bool> <bool>
#end_FrameHE-via_T.__xor__()

#start_FrameHE-via_T.__or__()
>>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T | s
<FrameHE>
<Index>   a      b      <<U1>
<Index>
p         False  True
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_T.__or__()

#start_FrameHE-via_T.__lt__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T < s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__lt__()

#start_FrameHE-via_T.__le__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T <= s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__le__()

#start_FrameHE-via_T.__eq__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T == s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         False  False  False
q         True   False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__eq__()

#start_FrameHE-via_T.__ne__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T != s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__ne__()

#start_FrameHE-via_T.__gt__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T > s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__gt__()

#start_FrameHE-via_T.__ge__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >= s
<FrameHE>
<Index>   a      b      c      <<U1>
<Index>
p         True   True   True
q         True   False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameHE-via_T.__ge__()

#start_FrameHE-via_T.__radd__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__radd__()

#start_FrameHE-via_T.__rsub__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rsub__()

#start_FrameHE-via_T.__rmul__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rmul__()

#start_FrameHE-via_T.__rtruediv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rtruediv__()

#start_FrameHE-via_T.__rfloordiv__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameHE>
<Index>   a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameHE-via_T.__rfloordiv__()

#start_FrameHE-via_fill_value().loc
>>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1).loc[['a', 'b', 'd']]
<FrameHE: y>
<Index>      x       y       <<U1>
<Index>
a            3       2
b            0       0
d            -1      -1
<<U1>        <int64> <int64>
#end_FrameHE-via_fill_value().loc

#start_FrameHE-via_fill_value().__getitem__()
>>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1)[['z', 'x']]
<FrameHE: y>
<Index>      z       x       <<U1>
<Index>
a            -1      3
b            -1      0
c            -1      20
<<U1>        <int64> <int64>
#end_FrameHE-via_fill_value().__getitem__()

#start_FrameHE-via_fill_value().via_T
>>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> f.via_fill_value(-1).via_T * s
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         -3      -2
b         0       0
c         160     96
d         -19     -19
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().via_T

#start_FrameHE-via_fill_value().__add__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) + f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         2       3
c         24      26
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__add__()

#start_FrameHE-via_fill_value().__sub__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) - f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         -2      -3
c         16      -2
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__sub__()

#start_FrameHE-via_fill_value().__mul__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) * f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         0       0
b         0       0
c         80      168
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__mul__()

#start_FrameHE-via_fill_value().__truediv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) / f2
<FrameHE>
<Index>   x         y                  <<U1>
<Index>
a         inf       inf
b         0.0       0.0
c         5.0       0.8571428571428571
<<U1>     <float64> <float64>
#end_FrameHE-via_fill_value().__truediv__()

#start_FrameHE-via_fill_value().__floordiv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) // f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         0       0
b         0       0
c         5       0
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__floordiv__()

#start_FrameHE-via_fill_value().__mod__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) % f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         0       0
b         0       0
c         0       12
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__mod__()

#start_FrameHE-via_fill_value().__pow__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) ** f2
<FrameHE>
<Index>   x       y                <<U1>
<Index>
a         1       1
b         0       0
c         160000  1283918464548864
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__pow__()

#start_FrameHE-via_fill_value().__lshift__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) << f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         0       0
c         40      24
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__lshift__()

#start_FrameHE-via_fill_value().__rshift__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >> f2
<FrameHE>
<Index>   x       y       <<U1>
<Index>
a         3       2
b         0       0
c         10      6
<<U1>     <int64> <int64>
#end_FrameHE-via_fill_value().__rshift__()

#start_FrameHE-via_fill_value().__and__()
>>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) & f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         False  False
c         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__and__()

#start_FrameHE-via_fill_value().__xor__()
>>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) ^ f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  True
b         True   True
c         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__xor__()

#start_FrameHE-via_fill_value().__or__()
>>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) | f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__or__()

#start_FrameHE-via_fill_value().__lt__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) < f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__lt__()

#start_FrameHE-via_fill_value().__le__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) <= f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__le__()

#start_FrameHE-via_fill_value().__eq__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) == f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         False  False
b         False  False
c         False  False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__eq__()

#start_FrameHE-via_fill_value().__ne__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) != f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         True   True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__ne__()

#start_FrameHE-via_fill_value().__gt__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) > f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__gt__()

#start_FrameHE-via_fill_value().__ge__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >= f2
<FrameHE>
<Index>   x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameHE-via_fill_value().__ge__()

#start_FrameHE-via_fill_value().__radd__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 + f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__radd__()

#start_FrameHE-via_fill_value().__rsub__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 - f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rsub__()

#start_FrameHE-via_fill_value().__rmul__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 * f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rmul__()

#start_FrameHE-via_fill_value().__rtruediv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 / f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rtruediv__()

#start_FrameHE-via_fill_value().__rfloordiv__()
>>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 // f1.via_fill_value(0)
RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')
#end_FrameHE-via_fill_value().__rfloordiv__()

#start_FrameHE-via_re().search()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').search()
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameHE-via_re().search()

#start_FrameHE-via_re().match()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').match()
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   False  True
<int64>      <bool> <bool> <bool>
#end_FrameHE-via_re().match()

#start_FrameHE-via_re().fullmatch()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('123').fullmatch()
<FrameHE: x>
<Index>      a      b      c      <<U1>
<Index>
0            False  False  False
1            False  False  False
2            False  True   False
3            False  False  False
<int64>      <bool> <bool> <bool>
#end_FrameHE-via_re().fullmatch()

#start_FrameHE-via_re().split()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').split()
<FrameHE: x>
<Index>      a         b                c                    <<U1>
<Index>
0            ('', '0') ('qrs ',)        ('', '5', '7-0', ...
1            ('', '')  ('', 'YZ')       ('', '5', '7-04-0...
2            ('8',)    ('', '', '', '') ('', '5', '7-', '...
3            ('', '')  (' w', ' ')      ('', '5', '7-06-'...
<int64>      <object>  <object>         <object>
#end_FrameHE-via_re().split()

#start_FrameHE-via_re().findall()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').findall()
<FrameHE: x>
<Index>      a        b               c                    <<U1>
<Index>
0            ('1',)   ()              ('1', '1', '1', '1')
1            ('2',)   ('X',)          ('1', '1', '1')
2            ()       ('1', '2', '3') ('1', '1', '1', '...
3            ('3',)   ('X',)          ('1', '1', '3')
<int64>      <object> <object>        <object>
#end_FrameHE-via_re().findall()

#start_FrameHE-via_re().sub()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').sub('==')
<FrameHE: x>
<Index>      a     b      c                <<U1>
<Index>
0            ==0   qrs    ==5==7-0==-0==
1            ==    ==YZ   ==5==7-04-0==
2            8     ====== ==5==7-====-====
3            ==     w==   ==5==7-06-==0
<int64>      <<U3> <<U6>  <<U16>
#end_FrameHE-via_re().sub()

#start_FrameHE-via_re().subn()
>>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameHE: x>
<Index>      a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').subn('==', 1)
<FrameHE: x>
<Index>      a          b            c                  <<U1>
<Index>
0            ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)
1            ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)
2            ('8', 0)   ('==23', 1)  ('==517-12-31', 1)
3            ('==', 1)  (' w== ', 1) ('==517-06-30', 1)
<int64>      <object>   <object>     <object>
#end_FrameHE-via_re().subn()

#start_FrameHE-via_values.apply()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.via_values.apply(np.sin)
<FrameHE: x>
<Index>      a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893699 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameHE-via_values.apply()

#start_FrameHE-via_values.__array_ufunc__()
>>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values)
[[-0.54402111  0.98935825  0.84147098]
 [-0.90929743 -0.14112001  0.        ]
 [ 0.          0.98935825  0.41211849]
 [ 0.          0.         -0.53657292]]
#end_FrameHE-via_values.__array_ufunc__()

#start_FrameGO-__init__()
>>> sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameGO-__init__()

#start_FrameGO-from_arrow()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> aw = f1.to_arrow()
>>> aw
pyarrow.Table
__index0__: string
a: int64
b: int64
----
__index0__: [["p","q","r"]]
a: [[0,2,4]]
b: [[1,3,5]]
>>> sf.FrameGO.from_arrow(aw, index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<object>  <int64> <int64>
#end_FrameGO-from_arrow()

#start_FrameGO-from_concat()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameGO.from_concat((f1, f2), axis=1)
<FrameGO>
<IndexGO> a       b       c      d      <<U1>
<Index>
p         0       1       False  True
q         2       3       False  True
r         4       5       False  True
<<U1>     <int64> <int64> <bool> <bool>
>>> sf.FrameGO.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)
<FrameGO>
<IndexGO> a        b        <<U1>
<Index>
0         0        1
1         2        3
2         4        5
3         False    True
4         False    True
5         False    True
<int64>   <object> <object>
#end_FrameGO-from_concat()

#start_FrameGO-from_concat_items()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> sf.FrameGO.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)
<FrameGO>
<IndexHierarchyGO> x       x       y      y      <<U1>
                   a       b       c      d      <<U1>
<Index>
p                  0       1       False  True
q                  2       3       False  True
r                  4       5       False  True
<<U1>              <int64> <int64> <bool> <bool>
>>> sf.FrameGO.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)
<FrameGO>
<IndexGO>              a        b        <<U1>
<IndexHierarchy>
x                p     0        1
x                q     2        3
x                r     4        5
y                p     False    True
y                q     False    True
y                r     False    True
<<U1>            <<U1> <object> <object>
#end_FrameGO-from_concat_items()

#start_FrameGO-from_csv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> open('/tmp/f.csv').read()
__index0__,a,b
p,0,1
q,2,3
r,4,5

>>> sf.FrameGO.from_csv('/tmp/f.csv', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_csv()

#start_FrameGO-from_delimited()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> open('/tmp/f.psv').read()
__index0__|a|b
p|0|1
q|2|3
r|4|5

>>> sf.FrameGO.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_delimited()

#start_FrameGO-from_dict()
>>> sf.FrameGO.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b               <<U1>
<Index>
0            10      1517-01-01
1            2       1517-04-01
2            8       1517-12-31
3            3       1517-06-30
<int64>      <int64> <datetime64[D]>
#end_FrameGO-from_dict()

#start_FrameGO-from_dict_records()
>>> sf.FrameGO.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_dict_records()

#start_FrameGO-from_dict_records_items()
>>> sf.FrameGO.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_dict_records_items()

#start_FrameGO-from_element()
>>> sf.FrameGO.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       0
q            0       0
r            0       0
<<U1>        <int64> <int64>
#end_FrameGO-from_element()

#start_FrameGO-from_element_items()
>>> sf.FrameGO.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)
ErrorInitTypeBlocks('mismatched row count: 1: 2')
#end_FrameGO-from_element_items()

#start_FrameGO-from_elements()
>>> sf.FrameGO.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')
<FrameGO: x>
<IndexGO>    a       <<U1>
<Index>
p            10
q            2
r            8
s            3
<<U1>        <int64>
#end_FrameGO-from_elements()

#start_FrameGO-from_fields()
>>> sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_fields()

#start_FrameGO-from_hdf5()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_hdf5('/tmp/f.hdf5')
>>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-from_hdf5()

#start_FrameGO-from_items()
>>> sf.FrameGO.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-from_items()

#start_FrameGO-from_json()
>>> sf.FrameGO.from_json('[{"a": 10, "b": false, "c": "1517-01-01"}, {"a": 8, "b": true, "c": "1517-04-01"}]', dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            8       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_json()

#start_FrameGO-from_msgpack()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> mb = f1.to_msgpack()
>>> mb
b'\x85\xc4\x02sf\xa7FrameGO\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4M\x83\xc4\x02sf\xa7IndexGO\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
>>> sf.FrameGO.from_msgpack(mb)
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-from_msgpack()

#start_FrameGO-from_npy()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.FrameGO.from_npy('/tmp/f.npy')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_npy()

#start_FrameGO-from_npy_mmap()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> f2, closer = sf.FrameGO.from_npy_mmap('/tmp/f.npy')
>>> f2
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> closer() # close mmaps after usage
#end_FrameGO-from_npy_mmap()

#start_FrameGO-from_npz()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.FrameGO.from_npz('/tmp/f.npz')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_npz()

#start_FrameGO-from_overlay()
>>> f1 = sf.FrameGO.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f1
<FrameGO: x>
<IndexGO>    a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f2 = sf.FrameGO.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')
>>> f2
<FrameGO: y>
<IndexGO>    a       b     <<U1>
<Index>
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> sf.FrameGO.from_overlay((f1, f2))
<FrameGO>
<IndexGO> a         b        <<U1>
<Index>
p         10.0      qrs
q         2.0       XYZ
r         8.0       123
s         3.0        wX
<<U1>     <float64> <object>
#end_FrameGO-from_overlay()

#start_FrameGO-from_pandas()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> df = f1.to_pandas()
>>> df
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
>>> sf.FrameGO.from_pandas(df, dtypes=dict(b=str))
<FrameGO: x>
<IndexGO>    a       b     <object>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<object>     <int64> <<U4>
#end_FrameGO-from_pandas()

#start_FrameGO-from_parquet()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
>>> sf.FrameGO.from_parquet('/tmp/f.parquet', index_depth=1)
<FrameGO>
<IndexGO> a       b        <<U1>
<Index>
p         10      qrs
q         2       XYZ
r         8       123
s         3        wX
<object>  <int64> <object>
#end_FrameGO-from_parquet()

#start_FrameGO-from_pickle()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.FrameGO.from_pickle('/tmp/f.pickle')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-from_pickle()

#start_FrameGO-from_records()
>>> sf.FrameGO.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_records()

#start_FrameGO-from_records_items()
>>> sf.FrameGO.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-from_records_items()

#start_FrameGO-from_series()
>>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')
>>> sf.FrameGO.from_series(s)
<FrameGO>
<IndexGO> x       <<U1>
<Index>
a         10
b         2
c         8
<<U1>     <int64>
#end_FrameGO-from_series()

#start_FrameGO-from_sql()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.FrameGO.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<FrameGO>
<IndexGO> a       b       c          <<U1>
<Index>
0         10      0       1517-01-01
1         2       1       1517-04-01
<int64>   <int64> <int64> <<U10>
#end_FrameGO-from_sql()

#start_FrameGO-from_sqlite()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> sf.FrameGO.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)
<FrameGO: x>
<IndexGO>    a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <<U10>
#end_FrameGO-from_sqlite()

#start_FrameGO-from_structured_array()
>>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])
>>> sa
[(False,  8) ( True, 19)]
>>> sf.FrameGO.from_structured_array(sa)
<FrameGO>
<IndexGO> a      b       <<U1>
<Index>
0         False  8
1         True   19
<int64>   <bool> <int64>
#end_FrameGO-from_structured_array()

#start_FrameGO-from_tsv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> open('/tmp/f.tsv').read()
__index0__	a	b
p	0	1
q	2	3
r	4	5

>>> sf.FrameGO.from_tsv('/tmp/f.tsv', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_tsv()

#start_FrameGO-from_xlsx()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
>>> sf.FrameGO.from_xlsx('/tmp/f.xlsx', index_depth=1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       3
r         4       5
<<U1>     <int64> <int64>
#end_FrameGO-from_xlsx()

#start_FrameGO-to_arrow()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_arrow()
pyarrow.Table
__index0__: string
a: int64
b: string
----
__index0__: [["p","q","r","s"]]
a: [[10,2,8,3]]
b: [["qrs ","XYZ","123"," wX "]]
#end_FrameGO-to_arrow()

#start_FrameGO-to_csv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_csv('/tmp/f.csv')
>>> open('/tmp/f.csv').read()
__index0__,a,b
p,0,1
q,2,3
r,4,5

#end_FrameGO-to_csv()

#start_FrameGO-to_delimited()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_delimited('/tmp/f.psv', delimiter='|')
>>> open('/tmp/f.psv').read()
__index0__|a|b
p|0|1
q|2|3
r|4|5

#end_FrameGO-to_delimited()

#start_FrameGO-to_frame()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame()
<Frame: x>
<Index>    a       b     <<U1>
<Index>
p          10      qrs
q          2       XYZ
r          8       123
s          3        wX
<<U1>      <int64> <<U4>
#end_FrameGO-to_frame()

#start_FrameGO-to_frame_go()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_go()
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-to_frame_go()

#start_FrameGO-to_frame_he()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_frame_he()
<FrameHE: x>
<Index>      a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
#end_FrameGO-to_frame_he()

#start_FrameGO-to_hdf5()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_hdf5('/tmp/f.h5')
#end_FrameGO-to_hdf5()

#start_FrameGO-to_latex()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_latex()
\begin{table}[ht]
\centering
\begin{tabular}{c c c}
\hline\hline
   & a   & b    \\
\hline
p  & 10  & qrs  \\
q  & 2   & XYZ  \\
r  & 8   & 123  \\
s  & 3   &  wX  \\
\hline\end{tabular}
\end{table}
#end_FrameGO-to_latex()

#start_FrameGO-to_markdown()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_markdown()
|  |a  |b   |
|--|---|----|
|p |10 |qrs |
|q |2  |XYZ |
|r |8  |123 |
|s |3  | wX |
#end_FrameGO-to_markdown()

#start_FrameGO-to_msgpack()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_msgpack()
b'\x85\xc4\x02sf\xa7FrameGO\xc4\x04name\xa1x\xc4\x06blocks\xc4\xcd\x82\xc4\x02sf\xaaTypeBlocks\xc4\x06blocks\xc4\xb3\x92\x85\xc4\x02nd\xc3\xc4\x04type\xa3<i8\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4 \n\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U4\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4@q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00 \x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00\x00\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00w\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\xc4\x05index\xc4S\x83\xc4\x02sf\xa5Index\xc4\x04name\xc0\xc4\x04data\xc49\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x04\xc4\x04data\xc4\x10p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00\xc4\x07columns\xc4M\x83\xc4\x02sf\xa7IndexGO\xc4\x04name\xc0\xc4\x04data\xc41\x85\xc4\x02nd\xc3\xc4\x04type\xa3<U1\xc4\x04kind\xc4\x00\xc4\x05shape\x91\x02\xc4\x04data\xc4\x08a\x00\x00\x00b\x00\x00\x00'
#end_FrameGO-to_msgpack()

#start_FrameGO-to_npy()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npy('/tmp/f.npy')
>>> sf.Frame.from_npy('/tmp/f.npy')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameGO-to_npy()

#start_FrameGO-to_npz()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_npz('/tmp/f.npz')
>>> sf.Frame.from_npz('/tmp/f.npz')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameGO-to_npz()

#start_FrameGO-to_pairs()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pairs()
(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))
#end_FrameGO-to_pairs()

#start_FrameGO-to_pandas()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_pandas()
    a     b
p  10  qrs 
q   2   XYZ
r   8   123
s   3   wX 
#end_FrameGO-to_pandas()

#start_FrameGO-to_parquet()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_parquet('/tmp/f.parquet')
#end_FrameGO-to_parquet()

#start_FrameGO-to_pickle()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_pickle('/tmp/f.pickle')
>>> sf.Frame.from_pickle('/tmp/f.pickle')
<Frame: x>
<Index>    a       b      c               <<U1>
<Index>
0          10      False  1517-01-01
1          2       True   1517-04-01
2          8       True   1517-12-31
3          3       False  1517-06-30
<int64>    <int64> <bool> <datetime64[D]>
#end_FrameGO-to_pickle()

#start_FrameGO-to_rst()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_rst()
+--+---+----+
|  |a  |b   |
+==+===+====+
|p |10 |qrs |
+--+---+----+
|q |2  |XYZ |
+--+---+----+
|r |8  |123 |
+--+---+----+
|s |3  | wX |
+--+---+----+
#end_FrameGO-to_rst()

#start_FrameGO-to_series()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_series()
<Series: x>
<Index>
('p', 'a')  10
('p', 'b')  qrs
('q', 'a')  2
('q', 'b')  XYZ
('r', 'a')  8
('r', 'b')  123
('s', 'a')  3
('s', 'b')   wX
<object>    <object>
#end_FrameGO-to_series()

#start_FrameGO-to_sqlite()
>>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f1.to_sqlite('/tmp/f.db')
>>> import sqlite3
>>> conn = sqlite3.connect('/tmp/f.db')
>>> sf.Frame.from_sql("select * from x limit 2", connection=conn, index_depth=1)
<Frame>
<Index> a       b       c          <<U1>
<Index>
0       10      0       1517-01-01
1       2       1       1517-04-01
<int64> <int64> <int64> <<U10>
#end_FrameGO-to_sqlite()

#start_FrameGO-to_tsv()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_tsv('/tmp/f.tsv')
>>> open('/tmp/f.tsv').read()
__index0__	a	b
p	0	1
q	2	3
r	4	5

#end_FrameGO-to_tsv()

#start_FrameGO-to_xarray()
>>> s = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> s.to_xarray()
<xarray.Dataset>
Dimensions:     (__index0__: 4)
Coordinates:
  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'
Data variables:
    a           (__index0__) int64 10 2 8 3
    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '
#end_FrameGO-to_xarray()

#start_FrameGO-to_xlsx()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.to_xlsx('/tmp/f.xlsx')
#end_FrameGO-to_xlsx()

#start_FrameGO-STATIC
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.STATIC
False
#end_FrameGO-STATIC

#start_FrameGO-T
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.T
<FrameGO: x>
<IndexGO>    0          1          2          3          <int64>
<Index>
a            10         2          8          3
b            False      True       True       False
c            1517-01-01 1517-04-01 1517-12-31 1517-06-30
<<U1>        <object>   <object>   <object>   <object>
#end_FrameGO-T

#start_FrameGO-columns
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.columns
<IndexGO>
a
b
c
<<U1>
#end_FrameGO-columns

#start_FrameGO-dtypes
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.dtypes
<Series: x>
<Index>
a           int64
b           bool
c           datetime64[D]
<<U1>       <object>
#end_FrameGO-dtypes

#start_FrameGO-index
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.index
<Index>
0
1
2
3
<int64>
#end_FrameGO-index

#start_FrameGO-mloc
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.mloc
[140297245956160 140297216540288 140297249035840]
#end_FrameGO-mloc

#start_FrameGO-name
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.name
x
#end_FrameGO-name

#start_FrameGO-nbytes
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.nbytes
68
#end_FrameGO-nbytes

#start_FrameGO-ndim
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.ndim
2
#end_FrameGO-ndim

#start_FrameGO-shape
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.shape
(4, 3)
#end_FrameGO-shape

#start_FrameGO-size
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.size
12
#end_FrameGO-size

#start_FrameGO-__array__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.__array__()
[[0 1]
 [2 3]
 [4 5]]
#end_FrameGO-__array__()

#start_FrameGO-__array_ufunc__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> np.array((1, 0)) * f
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         2       0
r         4       0
<<U1>     <int64> <int64>
#end_FrameGO-__array_ufunc__()

#start_FrameGO-__bool__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> bool(f)
ValueError('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')
#end_FrameGO-__bool__()

#start_FrameGO-__deepcopy__()
>>> import copy
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> copy.deepcopy(f)
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
#end_FrameGO-__deepcopy__()

#start_FrameGO-__len__()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> len(f)
3
#end_FrameGO-__len__()

#start_FrameGO-__round__()
>>> f = sf.FrameGO((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f
<FrameGO: y>
<IndexGO>    a                  b                  <<U1>
<Index>
p            0.0                1.3333333333333333
q            2.6666666666666665 4.0
r            5.333333333333333  6.666666666666667
<<U1>        <float64>          <float64>
>>> round(f, 1)
<FrameGO: y>
<IndexGO>    a         b         <<U1>
<Index>
p            0.0       1.3
q            2.7       4.0
r            5.3       6.7
<<U1>        <float64> <float64>
#end_FrameGO-__round__()

#start_FrameGO-all()
>>> f = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.all()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameGO-all()

#start_FrameGO-any()
>>> f = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f.any()
<Series>
<Index>
c        False
d        True
<<U1>    <bool>
#end_FrameGO-any()

#start_FrameGO-astype[]()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.astype['c'](object)
<FrameGO: x>
<IndexGO>    a       b      c          <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <object>
#end_FrameGO-astype[]()

#start_FrameGO-astype()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.astype(float)
<FrameGO: x>
<IndexGO>    a         b         <<U1>
<Index>
p            0.0       1.0
q            2.0       3.0
r            4.0       5.0
<<U1>        <float64> <float64>
#end_FrameGO-astype()

#start_FrameGO-clip()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.clip(lower=2, upper=4)
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       2
q            2       3
r            4       4
<<U1>        <int64> <int64>
#end_FrameGO-clip()

#start_FrameGO-count()
>>> f = sf.FrameGO.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        <<U1>
<Index>
p            10.0      qrs
q            2.0       XYZ
r            nan       None
s            3.0       None
<<U1>        <float64> <object>
>>> f.count(skipna=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
>>> f.count(unique=True)
<Series>
<Index>
a        3
b        2
<<U1>    <int64>
#end_FrameGO-count()

#start_FrameGO-cov()
>>> f1 = sf.FrameGO((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')
>>> f1.cov()
<FrameGO: x>
<IndexGO>    a                  b                  c                  d                  <<U1>
<Index>
a            58.666666666666664 84.0               112.0              142.66666666666666
b            84.0               123.0              166.66666666666666 215.0
c            112.0              166.66666666666666 229.33333333333331 300.0
d            142.66666666666666 215.0              300.0              397.66666666666663
<<U1>        <float64>          <float64>          <float64>          <float64>
#end_FrameGO-cov()

#start_FrameGO-cumprod()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumprod()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         0       3
r         0       15
<<U1>     <int64> <int64>
#end_FrameGO-cumprod()

#start_FrameGO-cumsum()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.cumsum()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       1
q         2       4
r         6       9
<<U1>     <int64> <int64>
#end_FrameGO-cumsum()

#start_FrameGO-drop_duplicated()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.drop_duplicated()
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
2            nan       None     NaT
<int64>      <float64> <object> <datetime64[D]>
#end_FrameGO-drop_duplicated()

#start_FrameGO-dropfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.dropfalsy()
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameGO-dropfalsy()

#start_FrameGO-dropna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.dropna()
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
#end_FrameGO-dropna()

#start_FrameGO-duplicated()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.duplicated()
<Series>
<Index>
0        False
1        True
2        False
3        True
<int64>  <bool>
#end_FrameGO-duplicated()

#start_FrameGO-equals()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')
>>> f1.equals(f2)
False
#end_FrameGO-equals()

#start_FrameGO-extend()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.extend(f2)
>>> f1
<FrameGO: x>
<IndexGO>    a       b       c      d      <<U1>
<Index>
p            0       1       False  True
q            2       3       False  True
r            4       5       False  True
<<U1>        <int64> <int64> <bool> <bool>
#end_FrameGO-extend()

#start_FrameGO-extend_items()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f1.extend_items((('d', (1, 2, 3)), ('e', (4, 5, 6))))
>>> f1
<FrameGO: x>
<IndexGO>    a       b       d       e       <<U1>
<Index>
p            0       1       1       4
q            2       3       2       5
r            4       5       3       6
<<U1>        <int64> <int64> <int64> <int64>
#end_FrameGO-extend_items()

#start_FrameGO-fillfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            1       abc   2022-01-10
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
#end_FrameGO-fillfalsy()

#start_FrameGO-fillfalsy_backward()
>>> f = sf.FrameGO.from_fields(((0, 0, 10, 2), (0, 8, 3, 8), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            0       0       0
1            0       8       0
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_backward()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            10      8       1
2            10      3       1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_backward()

#start_FrameGO-fillfalsy_forward()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_forward()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       1
2            2       8       1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_forward()

#start_FrameGO-fillfalsy_leading()
>>> f = sf.FrameGO.from_fields(((0, 0, 10, 2), (0, 8, 3, 8), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            0       0       0
1            0       8       0
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_leading(-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            -1      -1      -1
1            -1      8       -1
2            10      3       -1
3            2       8       1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_leading()

#start_FrameGO-fillfalsy_trailing()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       0
2            0       8       0
3            0       0       0
<int64>      <int64> <int64> <int64>
>>> f.fillfalsy_trailing(-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            10      8       1
1            2       3       -1
2            -1      8       -1
3            -1      -1      -1
<int64>      <int64> <int64> <int64>
#end_FrameGO-fillfalsy_trailing()

#start_FrameGO-fillna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b     c               <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            nan             NaT
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <datetime64[D]>
>>> f.fillna(-1)
<FrameGO: x>
<IndexGO>    a         b     c          <<U1>
<Index>
0            10.0      qrs   1517-01-01
1            2.0       XYZ   1517-04-01
2            -1.0            -1
3            2.0       123   1517-04-01
<int64>      <float64> <<U4> <object>
#end_FrameGO-fillna()

#start_FrameGO-fillna_backward()
>>> f = sf.FrameGO.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_backward()
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            10.0      8.0       1.0
2            10.0      3.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_backward()

#start_FrameGO-fillna_forward()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_forward()
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       1.0
2            2.0       8.0       1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_forward()

#start_FrameGO-fillna_leading()
>>> f = sf.FrameGO.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            nan       nan       nan
1            nan       8.0       nan
2            10.0      3.0       nan
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
>>> f.fillna_leading(-1)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            -1.0      -1.0      -1.0
1            -1.0      8.0       -1.0
2            10.0      3.0       -1.0
3            2.0       8.0       1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_leading()

#start_FrameGO-fillna_trailing()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.fillna_trailing(-1)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       -1.0
2            -1.0      8.0       -1.0
3            -1.0      -1.0      -1.0
<int64>      <float64> <float64> <float64>
#end_FrameGO-fillna_trailing()

#start_FrameGO-head()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.head(2)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-head()

#start_FrameGO-iloc_max()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameGO-iloc_max()

#start_FrameGO-iloc_min()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.iloc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameGO-iloc_min()

#start_FrameGO-insert_after()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_after('b', f2)
<FrameGO: x>
<IndexGO>    a       b       c      d      <<U1>
<Index>
p            0       1       False  True
q            2       3       False  True
r            4       5       False  True
<<U1>        <int64> <int64> <bool> <bool>
#end_FrameGO-insert_after()

#start_FrameGO-insert_before()
>>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')
>>> f1.insert_before('b', f2)
<FrameGO: x>
<IndexGO>    a       c      d      b       <<U1>
<Index>
p            0       False  True   1
q            2       False  True   3
r            4       False  True   5
<<U1>        <int64> <bool> <bool> <int64>
#end_FrameGO-insert_before()

#start_FrameGO-isfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.isfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  False
2       True   True   True
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameGO-isfalsy()

#start_FrameGO-isin()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')
>>> f.isin((0, 8))
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            False  True   False
1            False  False  True
2            True   True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameGO-isin()

#start_FrameGO-isna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.isna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       False  False  False
1       False  False  True
2       True   False  True
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameGO-isna()

#start_FrameGO-join_inner()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_inner(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_inner()

#start_FrameGO-join_left()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_left(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_left()

#start_FrameGO-join_outer()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_outer(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_outer()

#start_FrameGO-join_right()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')
>>> f1.join_right(f2, left_columns='c', right_columns='f')
<Frame>
<Index>  a       b       c       d       e       f       <<U1>
<Index>
(0, 1)   11      0       0       7       8       0
(1, 0)   4       8       1       2       3       1
(2, 1)   10      3       0       7       8       0
(3, 0)   2       8       1       2       3       1
<object> <int64> <int64> <int64> <int64> <int64> <int64>
#end_FrameGO-join_right()

#start_FrameGO-loc_max()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_max()
<Series>
<Index>
a        0
b        0
c        0
<<U1>    <int64>
#end_FrameGO-loc_max()

#start_FrameGO-loc_min()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.loc_min()
<Series>
<Index>
a        1
b        1
c        0
<<U1>    <int64>
#end_FrameGO-loc_min()

#start_FrameGO-max()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.max()
<Series>
<Index>
a        4
b        5
<<U1>    <int64>
#end_FrameGO-max()

#start_FrameGO-mean()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.mean()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameGO-mean()

#start_FrameGO-median()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.median()
<Series>
<Index>
a        2.0
b        3.0
<<U1>    <float64>
#end_FrameGO-median()

#start_FrameGO-min()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.min()
<Series>
<Index>
a        0
b        1
<<U1>    <int64>
#end_FrameGO-min()

#start_FrameGO-notfalsy()
>>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            0             NaT
3            2       123   1517-04-01
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.notfalsy()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   True
2       False  False  False
3       True   True   True
<int64> <bool> <bool> <bool>
#end_FrameGO-notfalsy()

#start_FrameGO-notna()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            10.0      8.0       1.0
1            2.0       3.0       nan
2            nan       8.0       nan
3            nan       nan       nan
<int64>      <float64> <float64> <float64>
>>> f.notna()
<Frame>
<Index> a      b      c      <<U1>
<Index>
0       True   True   True
1       True   True   False
2       False  True   False
3       False  False  False
<int64> <bool> <bool> <bool>
#end_FrameGO-notna()

#start_FrameGO-pivot()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot(index_fields='b', columns_fields='c')
<FrameGO>
<IndexGO: c> 0         1         <int64>
<Index: b>
0            11.0      nan
3            10.0      nan
8            nan       6.0
<int64>      <float64> <float64>
#end_FrameGO-pivot()

#start_FrameGO-pivot_stack()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f1.pivot_stack()
<FrameGO: x>
<IndexGO>              0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
#end_FrameGO-pivot_stack()

#start_FrameGO-pivot_unstack()
>>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f2 = f1.pivot_stack()
>>> f2
<FrameGO: x>
<IndexGO>              0       <int64>
<IndexHierarchy>
0                a     11
0                b     0
0                c     0
1                a     4
1                b     8
1                c     1
2                a     10
2                b     3
2                c     0
3                a     2
3                b     8
3                c     1
<int64>          <<U1> <int64>
>>> f2.pivot_unstack()
<FrameGO: x>
<IndexHierarchyGO> 0       0       0       <int64>
                   a       b       c       <<U1>
<Index>
0                  11      0       0
1                  4       8       1
2                  10      3       0
3                  2       8       1
<int64>            <int64> <int64> <int64>
#end_FrameGO-pivot_unstack()

#start_FrameGO-prod()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.prod()
<Series>
<Index>
a        0
b        15
<<U1>    <int64>
#end_FrameGO-prod()

#start_FrameGO-rank_dense()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_dense()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       1
2            2       1       0
3            0       2       1
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_dense()

#start_FrameGO-rank_max()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_max()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       1
1            1       3       3
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_max()

#start_FrameGO-rank_mean()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_mean()
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
0            3.0       0.0       0.5
1            1.0       2.5       2.5
2            2.0       1.0       0.5
3            0.0       2.5       2.5
<int64>      <float64> <float64> <float64>
#end_FrameGO-rank_mean()

#start_FrameGO-rank_min()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_min()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       0
3            0       2       2
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_min()

#start_FrameGO-rank_ordinal()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            11      0       0
1            4       8       1
2            10      3       0
3            2       8       1
<int64>      <int64> <int64> <int64>
>>> f.rank_ordinal()
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
0            3       0       0
1            1       2       2
2            2       1       1
3            0       3       3
<int64>      <int64> <int64> <int64>
#end_FrameGO-rank_ordinal()

#start_FrameGO-rehierarch()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rehierarch((1, 0))
<FrameGO: x>
<IndexGO>                a       b      c               <<U1>
<IndexHierarchy>
p                1       10      False  1517-01-01
p                2       8       True   1517-12-31
q                1       2       True   1517-04-01
q                2       3       False  1517-06-30
<<U1>            <int64> <int64> <bool> <datetime64[D]>
#end_FrameGO-rehierarch()

#start_FrameGO-reindex()
>>> f = sf.FrameGO.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
q            2       XYZ
t            -1
s            3        wX
r            8       123
<<U1>        <int64> <<U4>
#end_FrameGO-reindex()

#start_FrameGO-relabel()
>>> f = sf.FrameGO.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(('y', 'z'))
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
z            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(dict(q='x', p='y'))
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
y            10      False  1517-01-01
x            8       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
>>> f.relabel(lambda l: f'+{l.upper()}+')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
+P+          10      False  1517-01-01
+Q+          8       True   1517-04-01
<<U3>        <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel()

#start_FrameGO-relabel_flat()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_flat(index=True)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
(1, 'p')     10      False  1517-01-01
(1, 'q')     2       True   1517-04-01
(2, 'p')     8       True   1517-12-31
(2, 'q')     3       False  1517-06-30
<object>     <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_flat()

#start_FrameGO-relabel_level_add()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_level_add('I')
<FrameGO: x>
<IndexGO>                      a       b      c               <<U1>
<IndexHierarchy>
I                1       p     10      False  1517-01-01
I                1       q     2       True   1517-04-01
I                2       p     8       True   1517-12-31
I                2       q     3       False  1517-06-30
<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_level_add()

#start_FrameGO-relabel_level_drop()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.iloc[:2].relabel_level_drop(1)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
p            10      False  1517-01-01
q            2       True   1517-04-01
<<U1>        <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_level_drop()

#start_FrameGO-relabel_shift_in()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.relabel_shift_in('a')
<FrameGO: x>
<IndexGO>                                          b      c               <<U1>
<IndexHierarchy: ('__index0__', '...
1                                    p     10      False  1517-01-01
1                                    q     2       True   1517-04-01
2                                    p     8       True   1517-12-31
2                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_shift_in()

#start_FrameGO-relabel_shift_out()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])
<FrameGO: x>
<IndexGO>    e     d       a       b      c               <<U1>
<Index>
0            p     1       10      False  1517-01-01
1            q     1       2       True   1517-04-01
2            p     2       8       True   1517-12-31
3            q     2       3       False  1517-06-30
<int64>      <<U1> <int64> <int64> <bool> <datetime64[D]>
#end_FrameGO-relabel_shift_out()

#start_FrameGO-rename()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename('y', index='p', columns='q')
<FrameGO: y>
<IndexGO: q>              a       b      c               <<U1>
<IndexHierarchy: p>
1                   p     10      False  1517-01-01
1                   q     2       True   1517-04-01
2                   p     8       True   1517-12-31
2                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-rename()

#start_FrameGO-roll()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.roll(3)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            2       True   1517-04-01
1            8       True   1517-12-31
2            3       False  1517-06-30
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-roll()

#start_FrameGO-sample()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sample(2, 2, seed=0)
<FrameGO: x>
<IndexGO>    b      c               <<U1>
<Index>
2            True   1517-12-31
3            False  1517-06-30
<int64>      <bool> <datetime64[D]>
#end_FrameGO-sample()

#start_FrameGO-set_columns()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns((1, 'p'), drop=True)
<FrameGO: x>
<IndexGO: (1, 'p')>       10      False  1517-01-01      <object>
<IndexHierarchy>
1                   q     2       True   1517-04-01
2                   p     8       True   1517-12-31
2                   q     3       False  1517-06-30
<int64>             <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-set_columns()

#start_FrameGO-set_columns_hierarchy()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)
<FrameGO: x>
<IndexHierarchyGO: ((1, 'p'), (1,...       10      False  1517-01-01      <object>
                                           2       True   1517-04-01      <object>
<IndexHierarchy>
2                                    p     8       True   1517-12-31
2                                    q     3       False  1517-06-30
<int64>                              <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-set_columns_hierarchy()

#start_FrameGO-set_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)
<FrameGO: x>
<IndexGO>       a       b      <<U1>
<IndexDate: c>
1517-01-01      10      False
1517-04-01      2       True
1517-12-31      8       True
1517-06-30      3       False
<datetime64[D]> <int64> <bool>
#end_FrameGO-set_index()

#start_FrameGO-set_index_hierarchy()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))
<FrameGO: x>
<IndexGO>                                    a       <<U1>
<IndexHierarchy: ('b', 'c')>
False                        1517-01-01      10
True                         1517-04-01      2
True                         1517-12-31      8
False                        1517-06-30      3
<bool>                       <datetime64[D]> <int64>
#end_FrameGO-set_index_hierarchy()

#start_FrameGO-shift()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.shift(3, fill_value=sf.FillValueAuto)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            0       False  NaT
1            0       False  NaT
2            0       False  NaT
3            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-shift()

#start_FrameGO-sort_columns()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_columns(ascending=False)
<FrameGO: x>
<IndexGO>              c               b      a       <<U1>
<IndexHierarchy>
1                p     1517-01-01      False  10
1                q     1517-04-01      True   2
2                p     1517-12-31      True   8
2                q     1517-06-30      False  3
<int64>          <<U1> <datetime64[D]> <bool> <int64>
#end_FrameGO-sort_columns()

#start_FrameGO-sort_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.sort_index(ascending=False)
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
2                q     3       False  1517-06-30
2                p     8       True   1517-12-31
1                q     2       True   1517-04-01
1                p     10      False  1517-01-01
<int64>          <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-sort_index()

#start_FrameGO-sort_values()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values('c')
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
3            3       False  1517-06-30
2            8       True   1517-12-31
<int64>      <int64> <bool> <datetime64[D]>
>>> f.sort_values(['c', 'b'], ascending=False)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
1            2       True   1517-04-01
0            10      False  1517-01-01
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-sort_values()

#start_FrameGO-std()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.std()
<Series>
<Index>
a        1.632993161855452
b        1.632993161855452
<<U1>    <float64>
#end_FrameGO-std()

#start_FrameGO-sum()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.sum()
<Series>
<Index>
a        6
b        9
<<U1>    <int64>
#end_FrameGO-sum()

#start_FrameGO-tail()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
>>> f.tail(2)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-tail()

#start_FrameGO-transpose()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.transpose()
<FrameGO: x>
<IndexGO>    p       q       r       <<U1>
<Index>
a            0       2       4
b            1       3       5
<<U1>        <int64> <int64> <int64>
#end_FrameGO-transpose()

#start_FrameGO-unique()
>>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a         b        c               <<U1>
<Index>
0            10.0      False    1517-01-01
1            2.0       True     1517-04-01
2            nan       None     NaT
3            2.0       True     1517-04-01
<int64>      <float64> <object> <datetime64[D]>
>>> f.unique()
[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)
 nan None]
#end_FrameGO-unique()

#start_FrameGO-unset_columns()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       1
q            2       3
r            4       5
<<U1>        <int64> <int64>
>>> f.rename(columns='o').unset_columns()
<FrameGO: x>
<IndexGO>    0        1        <int64>
<Index>
o            a        b
p            0        1
q            2        3
r            4        5
<<U1>        <object> <object>
#end_FrameGO-unset_columns()

#start_FrameGO-unset_index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
1                q     2       True   1517-04-01
2                p     8       True   1517-12-31
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>
>>> f.rename(index=(('d', 'e'))).unset_index()
<FrameGO: x>
<IndexGO>    d       e     a       b      c               <<U1>
<Index>
0            1       p     10      False  1517-01-01
1            1       q     2       True   1517-04-01
2            2       p     8       True   1517-12-31
3            2       q     3       False  1517-06-30
<int64>      <int64> <<U1> <int64> <bool> <datetime64[D]>
#end_FrameGO-unset_index()

#start_FrameGO-var()
>>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')
>>> f.var()
<Series>
<Index>
a        2.6666666666666665
b        2.6666666666666665
<<U1>    <float64>
#end_FrameGO-var()

#start_FrameGO-__contains__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.__contains__('a')
True
#end_FrameGO-__contains__()

#start_FrameGO-__iter__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__iter__())
('a', 'b', 'c')
#end_FrameGO-__iter__()

#start_FrameGO-__reversed__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.__reversed__())
('c', 'b', 'a')
#end_FrameGO-__reversed__()

#start_FrameGO-get()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.get('a')
<Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>
>>> f.get('z', -1)
-1
#end_FrameGO-get()

#start_FrameGO-items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.items())
(('a', <Series: a>
<Index>
0           10
1           2
2           8
3           3
<int64>     <int64>), ('b', <Series: b>
<Index>
0           False
1           True
2           True
3           False
<int64>     <bool>), ('c', <Series: c>
<Index>
0           1517-01-01
1           1517-04-01
2           1517-12-31
3           1517-06-30
<int64>     <datetime64[D]>))
#end_FrameGO-items()

#start_FrameGO-keys()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.keys()
<IndexGO>
a
b
c
<<U1>
#end_FrameGO-keys()

#start_FrameGO-values
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.values
[[10 False datetime.date(1517, 1, 1)]
 [2 True datetime.date(1517, 4, 1)]
 [8 True datetime.date(1517, 12, 31)]
 [3 False datetime.date(1517, 6, 30)]]
#end_FrameGO-values

#start_FrameGO-interface
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.interface
<Frame: FrameGO>
<Index>                              cls_name group                doc                  <<U18>
<Index: signature>
__init__(data, *, index, columns,... FrameGO  Constructor          Initializer. Args...
from_arrow(value, *, index_depth,... FrameGO  Constructor          Realize a Frame f...
from_clipboard(*, delimiter, inde... FrameGO  Constructor          Create a Frame fr...
from_concat(frames, *, axis, unio... FrameGO  Constructor          Concatenate multi...
from_concat_items(items, *, axis,... FrameGO  Constructor          Produce a Frame w...
from_csv(fp, *, index_depth, inde... FrameGO  Constructor          Specialized versi...
from_delimited(fp, *, delimiter, ... FrameGO  Constructor          Create a Frame fr...
from_dict(mapping, *, index, fill... FrameGO  Constructor          Create a Frame fr...
from_dict_records(records, *, ind... FrameGO  Constructor          Frame constructor...
from_dict_records_items(items, *,... FrameGO  Constructor          Frame constructor...
from_element(element, *, index, c... FrameGO  Constructor          Create a Frame fr...
from_element_items(items, *, inde... FrameGO  Constructor          Create a Frame fr...
from_elements(elements, *, index,... FrameGO  Constructor          Create a Frame fr...
from_fields(fields, *, index, col... FrameGO  Constructor          Frame constructor...
from_hdf5(fp, *, label, index_dep... FrameGO  Constructor          Load Frame from t...
from_items(pairs, *, index, fill_... FrameGO  Constructor          Frame constructor...
from_json(json_data, *, dtypes, n... FrameGO  Constructor          Frame constructor...
...                                  ...      ...                  ...
via_fill_value(fill_value).__le__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__eq__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__ne__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__gt__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__ge__... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__radd... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rsub... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rmul... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rtru... FrameGO  Accessor Fill Value
via_fill_value(fill_value).__rflo... FrameGO  Accessor Fill Value
via_re(pattern, flags).search(pos... FrameGO  Accessor Regular ... Scan through stri...
via_re(pattern, flags).match(pos,... FrameGO  Accessor Regular ... If zero or more c...
via_re(pattern, flags).fullmatch(... FrameGO  Accessor Regular ... If the whole stri...
via_re(pattern, flags).split(maxs... FrameGO  Accessor Regular ... Split string by t...
via_re(pattern, flags).findall(po... FrameGO  Accessor Regular ... Return all non-ov...
via_re(pattern, flags).sub(repl, ... FrameGO  Accessor Regular ... Return the string...
via_re(pattern, flags).subn(repl,... FrameGO  Accessor Regular ... Perform the same ...
<<U89>                               <<U7>    <<U27>               <<U83>
#end_FrameGO-interface

#start_FrameGO-__repr__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> repr(f)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-__repr__()

#start_FrameGO-__str__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> str(f)
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-__str__()

#start_FrameGO-display()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display()
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-display()

#start_FrameGO-display_tall()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_tall()
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-display_tall()

#start_FrameGO-display_wide()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.display_wide()
<FrameGO: x>
<IndexGO>    a       b      c               <<U1>
<Index>
0            10      False  1517-01-01
1            2       True   1517-04-01
2            8       True   1517-12-31
3            3       False  1517-06-30
<int64>      <int64> <bool> <datetime64[D]>
#end_FrameGO-display_wide()

#start_FrameGO-assign[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign['a'](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      8       1
q            -1      -3      0
r            -1      8       9
s            -1      0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign[['a', 'c']](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      8       -1
q            -1      -3      -1
r            -1      8       -1
s            -1      0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign[]()

#start_FrameGO-assign[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign['a'].apply(lambda s: s / 100)
<FrameGO: x>
<IndexGO>    a         b       c       <<U1>
<Index>
p            0.1       8       1
q            -0.02     -3      0
r            0.0       8       9
s            0.0       0       12
<<U1>        <float64> <int64> <int64>
#end_FrameGO-assign[].apply()

#start_FrameGO-assign.iloc[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.iloc[2]((-1, -2, -3))
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -2      -3
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[[0, 3]](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign.iloc[]()

#start_FrameGO-assign.iloc[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.iloc[2:].apply(lambda s: s / 100)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.iloc[].apply()

#start_FrameGO-assign.loc[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.loc['r'](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            -1      -1      -1
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc[['p', 's']](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      -1      -1
q            -2      -3      0
r            0       8       9
s            -1      -1      -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign.loc[]()

#start_FrameGO-assign.loc[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.assign.loc['r':].apply(lambda s: s / 100)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            10.0      8.0       1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.loc[].apply()

#start_FrameGO-assign.bloc[]()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5](-1)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -1      -1      1
q            -2      -3      0
r            0       -1      -1
s            0       0       -1
<<U1>        <int64> <int64> <int64>
#end_FrameGO-assign.bloc[]()

#start_FrameGO-assign.bloc[].apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.assign.bloc[f > 5].apply(lambda s: s * .01)
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            0.1       0.08      1.0
q            -2.0      -3.0      0.0
r            0.0       0.08      0.09
s            0.0       0.0       0.12
<<U1>        <float64> <float64> <float64>
#end_FrameGO-assign.bloc[].apply()

#start_FrameGO-bloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.bloc[f > 5]
<Series>
<Index>
('p', 'a') 10
('p', 'b') 8
('r', 'b') 8
('r', 'c') 9
('s', 'c') 12
<object>   <int64>
#end_FrameGO-bloc[]

#start_FrameGO-drop[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop['c']
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            10      8
q            -2      -3
r            0       8
s            0       0
<<U1>        <int64> <int64>
>>> f.drop['b':]
<FrameGO: x>
<IndexGO>    a       <<U1>
<Index>
p            10
q            -2
r            0
s            0
<<U1>        <int64>
>>> f.drop[['a', 'c']]
<FrameGO: x>
<IndexGO>    b       <<U1>
<Index>
p            8
q            -3
r            8
s            0
<<U1>        <int64>
#end_FrameGO-drop[]

#start_FrameGO-drop.iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.iloc[1]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[1:]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
<<U1>        <int64> <int64> <int64>
>>> f.drop.iloc[[0, 2]]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-drop.iloc[]

#start_FrameGO-drop.loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.drop.loc['r']
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc['r':]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>
>>> f.drop.loc[['p', 's']]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>
#end_FrameGO-drop.loc[]

#start_FrameGO-mask[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask['c']
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  True
q         False  False  True
r         False  False  True
s         False  False  True
<<U1>     <bool> <bool> <bool>
>>> f.mask['b':]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  True   True
q         False  True   True
r         False  True   True
s         False  True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask[['a', 'c']]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   False  True
q         True   False  True
r         True   False  True
s         True   False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-mask[]

#start_FrameGO-mask.iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.iloc[1]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[1:]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.iloc[[0, 2]]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-mask.iloc[]

#start_FrameGO-mask.loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.mask.loc['r']
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         False  False  False
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc['r':]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
>>> f.mask.loc[['p', 's']]
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  False
r         False  False  False
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-mask.loc[]

#start_FrameGO-masked_array[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array['c']
[[10 8 --]
 [-2 -3 --]
 [0 8 --]
 [0 0 --]]
>>> f.masked_array['b':]
[[10 -- --]
 [-2 -- --]
 [0 -- --]
 [0 -- --]]
>>> f.masked_array[['a', 'c']]
[[-- 8 --]
 [-- -3 --]
 [-- 8 --]
 [-- 0 --]]
#end_FrameGO-masked_array[]

#start_FrameGO-masked_array.iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.iloc[1]
[[10 8 1]
 [-- -- --]
 [0 8 9]
 [0 0 12]]
>>> f.masked_array.iloc[1:]
[[10 8 1]
 [-- -- --]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.iloc[[0, 2]]
[[-- -- --]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
#end_FrameGO-masked_array.iloc[]

#start_FrameGO-masked_array.loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.masked_array.loc['r']
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [0 0 12]]
>>> f.masked_array.loc['r':]
[[10 8 1]
 [-2 -3 0]
 [-- -- --]
 [-- -- --]]
>>> f.masked_array.loc[['p', 's']]
[[-- -- --]
 [-2 -3 0]
 [0 8 9]
 [-- -- --]]
#end_FrameGO-masked_array.loc[]

#start_FrameGO-[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f['b']
<Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>
>>> f['b':]
<FrameGO: x>
<IndexGO>    b       c       <<U1>
<Index>
p            8       1
q            -3      0
r            8       9
s            0       12
<<U1>        <int64> <int64>
>>> f[['a', 'c']]
<FrameGO: x>
<IndexGO>    a       c       <<U1>
<Index>
p            10      1
q            -2      0
r            0       9
s            0       12
<<U1>        <int64> <int64>
#end_FrameGO-[]

#start_FrameGO-iloc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iloc[2]
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.iloc[2:]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iloc[[0, 3]]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-iloc[]

#start_FrameGO-loc[]
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.loc['r']
<Series: r>
<Index>
a           0
b           8
c           9
<<U1>       <int64>
>>> f.loc['r':]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.loc[['p', 's']]
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-loc[]

#start_FrameGO-iter_array()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array())
(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))
#end_FrameGO-iter_array()

#start_FrameGO-iter_array().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_array().apply()

#start_FrameGO-iter_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameGO-iter_array().apply_iter()

#start_FrameGO-iter_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameGO-iter_array().apply_iter_items()

#start_FrameGO-iter_array().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_array().apply_pool()

#start_FrameGO-iter_array_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items())
(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))
#end_FrameGO-iter_array_items()

#start_FrameGO-iter_array_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_array_items().apply()

#start_FrameGO-iter_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameGO-iter_array_items().apply_iter()

#start_FrameGO-iter_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameGO-iter_array_items().apply_iter_items()

#start_FrameGO-iter_array_items().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_array_items().apply_pool()

#start_FrameGO-iter_element()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element())
(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)
#end_FrameGO-iter_element()

#start_FrameGO-iter_element().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply(lambda e: e > 5)
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-iter_element().apply()

#start_FrameGO-iter_element().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter(lambda e: e > 10))
(False, False, False, False, False, False, False, False, False, False, False, True)
#end_FrameGO-iter_element().apply_iter()

#start_FrameGO-iter_element().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))
((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))
#end_FrameGO-iter_element().apply_iter_items()

#start_FrameGO-iter_element().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-iter_element().apply_pool()

#start_FrameGO-iter_element().map_all()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      200
r         200     45      45
s         200     200     -1
<<U1>     <int64> <int64> <int64>
#end_FrameGO-iter_element().map_all()

#start_FrameGO-iter_element().map_all_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)
#end_FrameGO-iter_element().map_all_iter()

#start_FrameGO-iter_element().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))
#end_FrameGO-iter_element().map_all_iter_items()

#start_FrameGO-iter_element().map_any()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_any({1: -1, 2: 45})
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         -1      45      -1
q         45      -1      0
r         0       45      45
s         0       0       -1
<<U1>     <int64> <int64> <int64>
#end_FrameGO-iter_element().map_any()

#start_FrameGO-iter_element().map_any_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))
(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)
#end_FrameGO-iter_element().map_any_iter()

#start_FrameGO-iter_element().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))
#end_FrameGO-iter_element().map_any_iter_items()

#start_FrameGO-iter_element().map_fill()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         -1.0      45.0      -1.0
q         45.0      -1.0      nan
r         nan       45.0      45.0
s         nan       nan       -1.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-iter_element().map_fill()

#start_FrameGO-iter_element().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))
(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)
#end_FrameGO-iter_element().map_fill_iter()

#start_FrameGO-iter_element().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       2       1
q            2       1       0
r            0       2       2
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))
((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))
#end_FrameGO-iter_element().map_fill_iter_items()

#start_FrameGO-iter_element_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items())
((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))
#end_FrameGO-iter_element_items()

#start_FrameGO-iter_element_items().apply()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')
<FrameGO>
<IndexGO> a      b        c      <<U1>
<Index>
p         False  True     False
q         True   x        False
r         False  True     True
s         False  False    False
<<U1>     <bool> <object> <bool>
#end_FrameGO-iter_element_items().apply()

#start_FrameGO-iter_element_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
(False, True, False, True, 'x', False, False, True, True, False, False, False)
#end_FrameGO-iter_element_items().apply_iter()

#start_FrameGO-iter_element_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))
((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))
#end_FrameGO-iter_element_items().apply_iter_items()

#start_FrameGO-iter_element_items().apply_pool()
>>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')
>>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_element_items().apply_pool(func, use_threads=True)
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-iter_element_items().apply_pool()

#start_FrameGO-iter_element_items().map_all()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         200     -1
q         45      1
<<U1>     <int64> <int64>
#end_FrameGO-iter_element_items().map_all()

#start_FrameGO-iter_element_items().map_all_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
(200, -1, 45, 1)
#end_FrameGO-iter_element_items().map_all_iter()

#start_FrameGO-iter_element_items().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))
#end_FrameGO-iter_element_items().map_all_iter_items()

#start_FrameGO-iter_element_items().map_any()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         200     3
q         9       1
<<U1>     <int64> <int64>
#end_FrameGO-iter_element_items().map_any()

#start_FrameGO-iter_element_items().map_any_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
(200, 3, 9, 1)
#end_FrameGO-iter_element_items().map_any_iter()

#start_FrameGO-iter_element_items().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))
((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))
#end_FrameGO-iter_element_items().map_any_iter_items()

#start_FrameGO-iter_element_items().map_fill()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         200     -1
q         -1      1
<<U1>     <int64> <int64>
#end_FrameGO-iter_element_items().map_fill()

#start_FrameGO-iter_element_items().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
(200, -1, -1, 1)
#end_FrameGO-iter_element_items().map_fill_iter()

#start_FrameGO-iter_element_items().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))
((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))
#end_FrameGO-iter_element_items().map_fill_iter_items()

#start_FrameGO-iter_group()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c'))
(<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>, <FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>)
#end_FrameGO-iter_group()

#start_FrameGO-iter_group().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply(lambda f: f['b'].sum())
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameGO-iter_group().apply()

#start_FrameGO-iter_group().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))
(3, 16)
#end_FrameGO-iter_group().apply_iter()

#start_FrameGO-iter_group().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))
((0, 3), (1, 16))
#end_FrameGO-iter_group().apply_iter_items()

#start_FrameGO-iter_group().apply_pool()
>>> def func(f): return f['b'].sum()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          3
1          16
<int64>    <int64>
#end_FrameGO-iter_group().apply_pool()

#start_FrameGO-iter_group_array()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c'))
(array([[11,  0,  0],
       [10,  3,  0]]), array([[4, 8, 1],
       [2, 8, 1]]))
#end_FrameGO-iter_group_array()

#start_FrameGO-iter_group_array().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply(lambda a: np.sum(a))
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameGO-iter_group_array().apply()

#start_FrameGO-iter_group_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))
(24, 24)
#end_FrameGO-iter_group_array().apply_iter()

#start_FrameGO-iter_group_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))
((0, 24), (1, 24))
#end_FrameGO-iter_group_array().apply_iter_items()

#start_FrameGO-iter_group_array().apply_pool()
>>> def func(a): return np.sum(a)
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array('c').apply_pool(func, use_threads=True)
<Series>
<Index: c>
0          24
1          24
<int64>    <int64>
#end_FrameGO-iter_group_array().apply_pool()

#start_FrameGO-iter_group_array_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c'))
((0, array([[11,  0,  0],
       [10,  3,  0]])), (1, array([[4, 8, 1],
       [2, 8, 1]])))
#end_FrameGO-iter_group_array_items()

#start_FrameGO-iter_group_array_items().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)
<Series>
<Index: c>
0          24
1          (2, 3)
<int64>    <object>
#end_FrameGO-iter_group_array_items().apply()

#start_FrameGO-iter_group_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))
(24, (2, 3))
#end_FrameGO-iter_group_array_items().apply_iter()

#start_FrameGO-iter_group_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))
((0, 24), (1, (2, 3)))
#end_FrameGO-iter_group_array_items().apply_iter_items()

#start_FrameGO-iter_group_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c'))
((0, <FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
0         11      0       0
2         10      3       0
<int64>   <int64> <int64> <int64>), (1, <FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
1         4       8       1
3         2       8       1
<int64>   <int64> <int64> <int64>))
#end_FrameGO-iter_group_items()

#start_FrameGO-iter_group_items().apply()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)
<Series>
<Index: c>
0          3
1          (2, 3)
<int64>    <object>
#end_FrameGO-iter_group_items().apply()

#start_FrameGO-iter_group_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))
(3, (2, 3))
#end_FrameGO-iter_group_items().apply_iter()

#start_FrameGO-iter_group_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))
((0, 3), (1, (2, 3)))
#end_FrameGO-iter_group_items().apply_iter_items()

#start_FrameGO-iter_group_labels()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels(1))
(<FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
2                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>, <FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                q     2       True   1517-04-01
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>)
#end_FrameGO-iter_group_labels()

#start_FrameGO-iter_group_labels().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())
<Series>
<Index>
p        1
q        1
<<U1>    <int64>
#end_FrameGO-iter_group_labels().apply()

#start_FrameGO-iter_group_labels().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum())
<generator object IterNodeDelegate.apply_iter at 0x117b79f20>
#end_FrameGO-iter_group_labels().apply_iter()

#start_FrameGO-iter_group_labels().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum())
<generator object IterNodeDelegate.apply_iter_items at 0x117b79510>
#end_FrameGO-iter_group_labels().apply_iter_items()

#start_FrameGO-iter_group_labels_array()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1))
(array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object))
#end_FrameGO-iter_group_labels_array()

#start_FrameGO-iter_group_labels_array().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))
<Series>
<Index>
p        18
q        5
<<U1>    <int64>
#end_FrameGO-iter_group_labels_array().apply()

#start_FrameGO-iter_group_labels_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))
(18, 5)
#end_FrameGO-iter_group_labels_array().apply_iter()

#start_FrameGO-iter_group_labels_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))
(('p', 18), ('q', 5))
#end_FrameGO-iter_group_labels_array().apply_iter_items()

#start_FrameGO-iter_group_labels_array_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1))
(('p', array([[10, False, datetime.date(1517, 1, 1)],
       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],
       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))
#end_FrameGO-iter_group_labels_array_items()

#start_FrameGO-iter_group_labels_array_items().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)
<Series>
<Index>
p        -1
q        5
<<U1>    <int64>
#end_FrameGO-iter_group_labels_array_items().apply()

#start_FrameGO-iter_group_labels_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(-1, 5)
#end_FrameGO-iter_group_labels_array_items().apply_iter()

#start_FrameGO-iter_group_labels_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))
(('p', -1), ('q', 5))
#end_FrameGO-iter_group_labels_array_items().apply_iter_items()

#start_FrameGO-iter_group_labels_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1))
(('p', <FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                p     10      False  1517-01-01
2                p     8       True   1517-12-31
<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <FrameGO>
<IndexGO>              a       b      c               <<U1>
<IndexHierarchy>
1                q     2       True   1517-04-01
2                q     3       False  1517-06-30
<int64>          <<U1> <int64> <bool> <datetime64[D]>))
#end_FrameGO-iter_group_labels_items()

#start_FrameGO-iter_group_labels_items().apply()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)
<Series>
<Index>
p        1
q        -1
<<U1>    <int64>
#end_FrameGO-iter_group_labels_items().apply()

#start_FrameGO-iter_group_labels_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))
(1, -1)
#end_FrameGO-iter_group_labels_items().apply_iter()

#start_FrameGO-iter_group_labels_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((1, 2), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))
(('p', 1), ('q', -1))
#end_FrameGO-iter_group_labels_items().apply_iter_items()

#start_FrameGO-iter_series()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series())
(<Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>, <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>, <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>)
#end_FrameGO-iter_series()

#start_FrameGO-iter_series().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply(lambda v: v.sum())
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_series().apply()

#start_FrameGO-iter_series().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))
(8, 13, 22)
#end_FrameGO-iter_series().apply_iter()

#start_FrameGO-iter_series().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))
(('a', 8), ('b', 13), ('c', 22))
#end_FrameGO-iter_series().apply_iter_items()

#start_FrameGO-iter_series().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)
<Series>
<Index>
a        8
b        13
c        22
<<U1>    <int64>
#end_FrameGO-iter_series().apply_pool()

#start_FrameGO-iter_series_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items())
(('a', <Series: a>
<Index>
p           10
q           -2
r           0
s           0
<<U1>       <int64>), ('b', <Series: b>
<Index>
p           8
q           -3
r           8
s           0
<<U1>       <int64>), ('c', <Series: c>
<Index>
p           1
q           0
r           9
s           12
<<U1>       <int64>))
#end_FrameGO-iter_series_items()

#start_FrameGO-iter_series_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_series_items().apply()

#start_FrameGO-iter_series_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))
(8, -1, 22)
#end_FrameGO-iter_series_items().apply_iter()

#start_FrameGO-iter_series_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))
(('a', 8), ('b', -1), ('c', 22))
#end_FrameGO-iter_series_items().apply_iter_items()

#start_FrameGO-iter_series_items().apply_pool()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)
<Series>
<Index>
a        8
b        -1
c        22
<<U1>    <int64>
#end_FrameGO-iter_series_items().apply_pool()

#start_FrameGO-iter_tuple()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple())
(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))
#end_FrameGO-iter_tuple()

#start_FrameGO-iter_tuple().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple().apply(lambda v: v.p + v.q)
<Series>
<Index>
a        8
b        5
c        1
<<U1>    <int64>
#end_FrameGO-iter_tuple().apply()

#start_FrameGO-iter_tuple().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))
(8, 5, 1)
#end_FrameGO-iter_tuple().apply_iter()

#start_FrameGO-iter_tuple().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))
(('a', 8), ('b', 5), ('c', 1))
#end_FrameGO-iter_tuple().apply_iter_items()

#start_FrameGO-iter_tuple().map_all()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameGO-iter_tuple().map_all()

#start_FrameGO-iter_tuple().map_all_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))
(-1, -2)
#end_FrameGO-iter_tuple().map_all_iter()

#start_FrameGO-iter_tuple().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))
(('a', -1), ('b', -2))
#end_FrameGO-iter_tuple().map_all_iter_items()

#start_FrameGO-iter_tuple().map_any()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any({(2, 9): -1}))
('a', 'b')
#end_FrameGO-iter_tuple().map_any()

#start_FrameGO-iter_tuple().map_any_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))
(-1, Axis(p=3, q=8))
#end_FrameGO-iter_tuple().map_any_iter()

#start_FrameGO-iter_tuple().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameGO-iter_tuple().map_any_iter_items()

#start_FrameGO-iter_tuple().map_fill()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameGO-iter_tuple().map_fill()

#start_FrameGO-iter_tuple().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameGO-iter_tuple().map_fill_iter()

#start_FrameGO-iter_tuple().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameGO-iter_tuple().map_fill_iter_items()

#start_FrameGO-iter_tuple_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items())
(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))
#end_FrameGO-iter_tuple_items()

#start_FrameGO-iter_tuple_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)
<Series>
<Index>
a        -1
b        5
c        -1
<<U1>    <int64>
#end_FrameGO-iter_tuple_items().apply()

#start_FrameGO-iter_tuple_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))
(-1, 5, -1)
#end_FrameGO-iter_tuple_items().apply_iter()

#start_FrameGO-iter_tuple_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))
(('a', -1), ('b', 5), ('c', -1))
#end_FrameGO-iter_tuple_items().apply_iter_items()

#start_FrameGO-iter_tuple_items().map_all()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})
<Series>
<Index>
a        -1
b        -2
<<U1>    <int64>
#end_FrameGO-iter_tuple_items().map_all()

#start_FrameGO-iter_tuple_items().map_all_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(-1, -2)
#end_FrameGO-iter_tuple_items().map_all_iter()

#start_FrameGO-iter_tuple_items().map_all_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))
(('a', -1), ('b', -2))
#end_FrameGO-iter_tuple_items().map_all_iter_items()

#start_FrameGO-iter_tuple_items().map_any()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})
<Series>
<Index>
a        -1
b        Axis(p=3, q=8)
<<U1>    <object>
#end_FrameGO-iter_tuple_items().map_any()

#start_FrameGO-iter_tuple_items().map_any_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))
(-1, Axis(p=3, q=8))
#end_FrameGO-iter_tuple_items().map_any_iter()

#start_FrameGO-iter_tuple_items().map_any_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))
(('a', -1), ('b', Axis(p=3, q=8)))
#end_FrameGO-iter_tuple_items().map_any_iter_items()

#start_FrameGO-iter_tuple_items().map_fill()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)
<Series>
<Index>
a        -1.0
b        nan
<<U1>    <float64>
#end_FrameGO-iter_tuple_items().map_fill()

#start_FrameGO-iter_tuple_items().map_fill_iter()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))
(-1, nan)
#end_FrameGO-iter_tuple_items().map_fill_iter()

#start_FrameGO-iter_tuple_items().map_fill_iter_items()
>>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       3
q            9       8
<<U1>        <int64> <int64>
>>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))
(('a', -1), ('b', nan))
#end_FrameGO-iter_tuple_items().map_fill_iter_items()

#start_FrameGO-iter_window()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1))
(<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>, <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>, <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>)
#end_FrameGO-iter_window()

#start_FrameGO-iter_window().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameGO-iter_window().apply()

#start_FrameGO-iter_window().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))
(10, 9, 12)
#end_FrameGO-iter_window().apply_iter()

#start_FrameGO-iter_window().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameGO-iter_window().apply_iter_items()

#start_FrameGO-iter_window_array()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1))
(array([[10,  8,  1],
       [-2, -3,  0]]), array([[-2, -3,  0],
       [ 0,  8,  9]]), array([[ 0,  8,  9],
       [ 0,  0, 12]]))
#end_FrameGO-iter_window_array()

#start_FrameGO-iter_window_array().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))
<Series>
<Index>
q        10
r        9
s        12
<<U1>    <int64>
#end_FrameGO-iter_window_array().apply()

#start_FrameGO-iter_window_array().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))
(10, 9, 12)
#end_FrameGO-iter_window_array().apply_iter()

#start_FrameGO-iter_window_array().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))
(('q', 10), ('r', 9), ('s', 12))
#end_FrameGO-iter_window_array().apply_iter_items()

#start_FrameGO-iter_window_array_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1))
(('q', array([[10,  8,  1],
       [-2, -3,  0]])), ('r', array([[-2, -3,  0],
       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],
       [ 0,  0, 12]])))
#end_FrameGO-iter_window_array_items()

#start_FrameGO-iter_window_array_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameGO-iter_window_array_items().apply()

#start_FrameGO-iter_window_array_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(-3, 9, 0)
#end_FrameGO-iter_window_array_items().apply_iter()

#start_FrameGO-iter_window_array_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameGO-iter_window_array_items().apply_iter_items()

#start_FrameGO-iter_window_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1))
(('q', <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
<<U1>        <int64> <int64> <int64>), ('r', <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
q            -2      -3      0
r            0       8       9
<<U1>        <int64> <int64> <int64>), ('s', <FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>))
#end_FrameGO-iter_window_items()

#start_FrameGO-iter_window_items().apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())
<Series>
<Index>
q        -3
r        9
s        0
<<U1>    <int64>
#end_FrameGO-iter_window_items().apply()

#start_FrameGO-iter_window_items().apply_iter()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(-3, 9, 0)
#end_FrameGO-iter_window_items().apply_iter()

#start_FrameGO-iter_window_items().apply_iter_items()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
>>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))
(('q', -3), ('r', 9), ('s', 0))
#end_FrameGO-iter_window_items().apply_iter_items()

#start_FrameGO-__add__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 + 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
>>> f1 + f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         12.0      11.0      nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__add__()

#start_FrameGO-__and__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f & True
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  True
q            True   True
r            True   False
<<U1>        <bool> <bool>
>>> f & (True, False)
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   False
r         True   False
<<U1>     <bool> <bool>
#end_FrameGO-__and__()

#start_FrameGO-__eq__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 == 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            False  True   False
q            False  False  False
r            False  True   False
s            False  False  False
<<U1>        <bool> <bool> <bool>
>>> f1 == f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__eq__()

#start_FrameGO-__floordiv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 // 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            1       1       0
q            -1      -1      0
r            0       1       1
s            0       0       1
<<U1>        <int64> <int64> <int64>
>>> f1 // f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         5.0       2.0       nan
q         -1.0      -1.0      nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__floordiv__()

#start_FrameGO-__ge__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 >= 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            True   True   False
q            False  False  False
r            False  True   True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 >= f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__ge__()

#start_FrameGO-__gt__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 > 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            True   False  False
q            False  False  False
r            False  False  True
s            False  False  True
<<U1>        <bool> <bool> <bool>
>>> f1 > f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   False
q         False  False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__gt__()

#start_FrameGO-__le__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 <= 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            False  True   True
q            True   True   True
r            True   True   False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 <= f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__le__()

#start_FrameGO-__lt__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 < 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            False  False  True
q            True   True   True
r            True   False  False
s            True   True   False
<<U1>        <bool> <bool> <bool>
>>> f1 < f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__lt__()

#start_FrameGO-__matmul__()
>>> f1 = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameGO-__matmul__()

#start_FrameGO-__mod__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 % 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            2       0       1
q            6       5       0
r            0       0       1
s            0       0       4
<<U1>        <int64> <int64> <int64>
>>> f1 % f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         0.0       2.0       nan
q         7.0       5.0       nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__mod__()

#start_FrameGO-__mul__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 * 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
>>> f1 * f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         20.0      24.0      nan
q         -18.0     -24.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__mul__()

#start_FrameGO-__ne__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 != 8
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
p            True   False  True
q            True   True   True
r            True   False  True
s            True   True   True
<<U1>        <bool> <bool> <bool>
>>> f1 != f2
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         True   True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-__ne__()

#start_FrameGO-__or__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f | True
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   True
q            True   True
r            True   True
<<U1>        <bool> <bool>
>>> f | (True, False)
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameGO-__or__()

#start_FrameGO-__pow__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 ** 8
<FrameGO: x>
<IndexGO>    a         b        c         <<U1>
<Index>
p            100000000 16777216 1
q            256       6561     0
r            0         16777216 43046721
s            0         0        429981696
<<U1>        <int64>   <int64>  <int64>
>>> f1 ** f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         100.0     512.0     1.0
q         -512.0    6561.0    nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__pow__()

#start_FrameGO-__radd__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 + f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            18      16      9
q            6       5       8
r            8       16      17
s            8       8       20
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__radd__()

#start_FrameGO-__rfloordiv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 // f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            0       1       8
q            -4      -3      0
r            0       1       0
s            0       0       0
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rfloordiv__()

#start_FrameGO-__rmatmul__()
>>> f1 = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f1 @ f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
p         23      14
q         6       4
r         40      24
s         20      12
<<U1>     <int64> <int64>
#end_FrameGO-__rmatmul__()

#start_FrameGO-__rmul__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 * f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            80      64      8
q            -16     -24     0
r            0       64      72
s            0       0       96
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rmul__()

#start_FrameGO-__rshift__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f1 >> 1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            5       4       0
q            -1      -2      0
r            0       4       4
s            0       0       6
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rshift__()

#start_FrameGO-__rsub__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 - f1
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -2      0       7
q            10      11      8
r            8       0       -1
s            8       8       -4
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__rsub__()

#start_FrameGO-__rtruediv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> 8 / f1
<FrameGO: x>
<IndexGO>    a         b                   c                  <<U1>
<Index>
p            0.8       1.0                 8.0
q            -4.0      -2.6666666666666665 inf
r            inf       1.0                 0.8888888888888888
s            inf       inf                 0.6666666666666666
<<U1>        <float64> <float64>           <float64>
#end_FrameGO-__rtruediv__()

#start_FrameGO-__sub__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 - 8
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            2       0       -7
q            -10     -11     -8
r            -8      0       1
s            -8      -8      4
<<U1>        <int64> <int64> <int64>
>>> f1 - f2
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         8.0       5.0       nan
q         -11.0     -11.0     nan
r         nan       nan       nan
s         nan       nan       nan
<<U1>     <float64> <float64> <float64>
#end_FrameGO-__sub__()

#start_FrameGO-__truediv__()
>>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')
>>> f1 / 8
<FrameGO: x>
<IndexGO>    a         b         c         <<U1>
<Index>
p            1.25      1.0       0.125
q            -0.25     -0.375    0.0
r            0.0       1.0       1.125
s            0.0       0.0       1.5
<<U1>        <float64> <float64> <float64>
>>> f1 / f2
<FrameGO>
<IndexGO> a                   b                  c         <<U1>
<Index>
p         5.0                 2.6666666666666665 nan
q         -0.2222222222222222 -0.375             nan
r         nan                 nan                nan
s         nan                 nan                nan
<<U1>     <float64>           <float64>          <float64>
#end_FrameGO-__truediv__()

#start_FrameGO-__xor__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> f ^ True
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
>>> f ^ (True, False)
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         False  True
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-__xor__()

#start_FrameGO-__abs__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> abs(f)
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            2       3       0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__abs__()

#start_FrameGO-__invert__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> ~f
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            False  False
r            False  True
<<U1>        <bool> <bool>
#end_FrameGO-__invert__()

#start_FrameGO-__neg__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> -f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            -10     -8      -1
q            2       3       0
r            0       -8      -9
s            0       0       -12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__neg__()

#start_FrameGO-__pos__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> +f
<FrameGO: x>
<IndexGO>    a       b       c       <<U1>
<Index>
p            10      8       1
q            -2      -3      0
r            0       8       9
s            0       0       12
<<U1>        <int64> <int64> <int64>
#end_FrameGO-__pos__()

#start_FrameGO-via_dt.year
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.year
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         1517    2022
q         1517    2021
r         1517    2022
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.year

#start_FrameGO-via_dt.month
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.month
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         4       4
q         12      12
r         6       6
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.month

#start_FrameGO-via_dt.day
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.day
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         1       1
q         31      31
r         30      30
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.day

#start_FrameGO-via_dt.hour
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.hour
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.hour

#start_FrameGO-via_dt.minute
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.minute
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.minute

#start_FrameGO-via_dt.second
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.second
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         0       0
q         0       0
r         0       0
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.second

#start_FrameGO-via_dt.weekday()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.weekday()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         6       4
q         0       4
r         5       3
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.weekday()

#start_FrameGO-via_dt.quarter()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.quarter()
<FrameGO>
<IndexGO> a       b       <<U1>
<Index>
p         2       2
q         4       4
r         2       2
<<U1>     <int64> <int64>
#end_FrameGO-via_dt.quarter()

#start_FrameGO-via_dt.is_month_end()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_end()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_month_end()

#start_FrameGO-via_dt.is_month_start()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_month_start()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_month_start()

#start_FrameGO-via_dt.is_year_end()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_end()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_year_end()

#start_FrameGO-via_dt.is_year_start()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_year_start()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_year_start()

#start_FrameGO-via_dt.is_quarter_end()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_end()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_quarter_end()

#start_FrameGO-via_dt.is_quarter_start()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.is_quarter_start()
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         True   True
q         False  False
r         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_dt.is_quarter_start()

#start_FrameGO-via_dt.timetuple()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.timetuple()
<FrameGO>
<IndexGO> a                    b                    <<U1>
<Index>
p         time.struct_time(... time.struct_time(...
q         time.struct_time(... time.struct_time(...
r         time.struct_time(... time.struct_time(...
<<U1>     <object>             <object>
#end_FrameGO-via_dt.timetuple()

#start_FrameGO-via_dt.isoformat()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.isoformat()
<FrameGO>
<IndexGO> a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <<U10>     <<U10>
#end_FrameGO-via_dt.isoformat()

#start_FrameGO-via_dt.fromisoformat()
>>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.fromisoformat()
<FrameGO>
<IndexGO> a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameGO-via_dt.fromisoformat()

#start_FrameGO-via_dt.strftime()
>>> s = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)
>>> s.via_dt.strftime("%A | %B")
<FrameGO>
<IndexGO> a                 b                 <<U1>
<Index>
p         Sunday | April    Friday | April
q         Monday | December Friday | December
r         Saturday | June   Thursday | June
<<U1>     <<U17>            <<U17>
#end_FrameGO-via_dt.strftime()

#start_FrameGO-via_dt.strptime()
>>> f = sf.FrameGO.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strptime("%m/%d/%Y")
<FrameGO>
<IndexGO> a                   b                   <<U1>
<Index>
p         1517-04-01 00:00:00 2022-04-01 00:00:00
q         1517-12-31 00:00:00 2021-12-31 00:00:00
r         1517-06-30 00:00:00 2022-06-30 00:00:00
<<U1>     <object>            <object>
#end_FrameGO-via_dt.strptime()

#start_FrameGO-via_dt.strpdate()
>>> f = sf.FrameGO.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))
>>> f.via_dt.strpdate("%m/%d/%Y")
<FrameGO>
<IndexGO> a          b          <<U1>
<Index>
p         1517-04-01 2022-04-01
q         1517-12-31 2021-12-31
r         1517-06-30 2022-06-30
<<U1>     <object>   <object>
#end_FrameGO-via_dt.strpdate()

#start_FrameGO-via_str.__getitem__()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str[-1]
<FrameGO: x>
<IndexGO>    a     b     <<U1>
<Index>
p            0
q            2     Z
r            8     3
s            3
<<U1>        <<U1> <<U1>
#end_FrameGO-via_str.__getitem__()

#start_FrameGO-via_str.capitalize()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.capitalize()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.capitalize()

#start_FrameGO-via_str.center()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.center(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p               10      qrs
q               2       XYZ
r               8       123
s               3        wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.center()

#start_FrameGO-via_str.contains()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.contains('X')
<FrameGO: x>
<IndexGO>    a     b     <<U1>
<Index>
p            False False
q            False True
r            False False
s            False True
<<U1>        <<U5> <<U5>
#end_FrameGO-via_str.contains()

#start_FrameGO-via_str.count()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.count('X')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            0       0
q            0       1
r            0       0
s            0       1
<<U1>        <int64> <int64>
#end_FrameGO-via_str.count()

#start_FrameGO-via_str.decode()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)
>>> f
<FrameGO: x>
<IndexGO>    a      b       <<U1>
<Index>
p            b'10'  b'qrs '
q            b'2'   b'XYZ'
r            b'8'   b'123'
s            b'3'   b' wX '
<<U1>        <|S21> <|S4>
>>> f.via_str.decode()
<FrameGO: x>
<IndexGO>    a     b     <<U1>
<Index>
p            10    qrs
q            2     XYZ
r            8     123
s            3      wX
<<U1>        <<U2> <<U4>
#end_FrameGO-via_str.decode()

#start_FrameGO-via_str.encode()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.encode()
<FrameGO: x>
<IndexGO>    a     b       <<U1>
<Index>
p            b'10' b'qrs '
q            b'2'  b'XYZ'
r            b'8'  b'123'
s            b'3'  b' wX '
<<U1>        <|S2> <|S4>
#end_FrameGO-via_str.encode()

#start_FrameGO-via_str.endswith()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.endswith(' ')
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  True
<<U1>        <bool> <bool>
#end_FrameGO-via_str.endswith()

#start_FrameGO-via_str.find()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.find('X')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameGO-via_str.find()

#start_FrameGO-via_str.index()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.index('X')
ValueError('substring not found')
#end_FrameGO-via_str.index()

#start_FrameGO-via_str.isalnum()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalnum()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   True
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isalnum()

#start_FrameGO-via_str.isalpha()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isalpha()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isalpha()

#start_FrameGO-via_str.isdecimal()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdecimal()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isdecimal()

#start_FrameGO-via_str.isdigit()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isdigit()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isdigit()

#start_FrameGO-via_str.islower()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.islower()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  True
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.islower()

#start_FrameGO-via_str.isnumeric()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isnumeric()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            True   False
q            True   False
r            True   True
s            True   False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isnumeric()

#start_FrameGO-via_str.isspace()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isspace()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isspace()

#start_FrameGO-via_str.istitle()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.istitle()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  False
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.istitle()

#start_FrameGO-via_str.isupper()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.isupper()
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.isupper()

#start_FrameGO-via_str.ljust()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.ljust(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p            10       qrs
q            2        XYZ
r            8        123
s            3         wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.ljust()

#start_FrameGO-via_str.len()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.len()
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            2       4
q            1       3
r            1       3
s            1       4
<<U1>        <int64> <int64>
#end_FrameGO-via_str.len()

#start_FrameGO-via_str.lower()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lower()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      xyz
r            8      123
s            3       wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.lower()

#start_FrameGO-via_str.lstrip()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.lstrip()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.lstrip()

#start_FrameGO-via_str.partition()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.partition('X')
<FrameGO: x>
<IndexGO>    a              b                <<U1>
<Index>
p            ('10', '', '') ('qrs ', '', '')
q            ('2', '', '')  ('', 'X', 'YZ')
r            ('8', '', '')  ('123', '', '')
s            ('3', '', '')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameGO-via_str.partition()

#start_FrameGO-via_str.replace()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.replace('X', '*')
<FrameGO: x>
<IndexGO>    a     b     <<U1>
<Index>
p            10    qrs
q            2     *YZ
r            8     123
s            3      w*
<<U1>        <<U2> <<U4>
#end_FrameGO-via_str.replace()

#start_FrameGO-via_str.rfind()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rfind('X')
<FrameGO: x>
<IndexGO>    a       b       <<U1>
<Index>
p            -1      -1
q            -1      0
r            -1      -1
s            -1      2
<<U1>        <int64> <int64>
#end_FrameGO-via_str.rfind()

#start_FrameGO-via_str.rindex()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rindex('X')
ValueError('substring not found')
#end_FrameGO-via_str.rindex()

#start_FrameGO-via_str.rjust()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rjust(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p                  10     qrs
q                   2      XYZ
r                   8      123
s                   3      wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.rjust()

#start_FrameGO-via_str.rpartition()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rpartition('X')
<FrameGO: x>
<IndexGO>    a              b                <<U1>
<Index>
p            ('', '', '10') ('', '', 'qrs ')
q            ('', '', '2')  ('', 'X', 'YZ')
r            ('', '', '8')  ('', '', '123')
s            ('', '', '3')  (' w', 'X', ' ')
<<U1>        <object>       <object>
#end_FrameGO-via_str.rpartition()

#start_FrameGO-via_str.rsplit()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rsplit('X')
<FrameGO: x>
<IndexGO>    a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameGO-via_str.rsplit()

#start_FrameGO-via_str.rstrip()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.rstrip()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3       wX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.rstrip()

#start_FrameGO-via_str.split()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.split('X')
<FrameGO: x>
<IndexGO>    a        b           <<U1>
<Index>
p            ('10',)  ('qrs ',)
q            ('2',)   ('', 'YZ')
r            ('8',)   ('123',)
s            ('3',)   (' w', ' ')
<<U1>        <object> <object>
#end_FrameGO-via_str.split()

#start_FrameGO-via_str.startswith()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.startswith('X')
<FrameGO: x>
<IndexGO>    a      b      <<U1>
<Index>
p            False  False
q            False  True
r            False  False
s            False  False
<<U1>        <bool> <bool>
#end_FrameGO-via_str.startswith()

#start_FrameGO-via_str.strip()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.strip()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     qrs
q            2      XYZ
r            8      123
s            3      wX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.strip()

#start_FrameGO-via_str.swapcase()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.swapcase()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     QRS
q            2      xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.swapcase()

#start_FrameGO-via_str.title()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.title()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     Qrs
q            2      Xyz
r            8      123
s            3       Wx
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.title()

#start_FrameGO-via_str.upper()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.upper()
<FrameGO: x>
<IndexGO>    a      b     <<U1>
<Index>
p            10     QRS
q            2      XYZ
r            8      123
s            3       WX
<<U1>        <<U21> <<U4>
#end_FrameGO-via_str.upper()

#start_FrameGO-via_str.zfill()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     <<U1>
<Index>
p            10      qrs
q            2       XYZ
r            8       123
s            3        wX
<<U1>        <int64> <<U4>
>>> f.via_str.zfill(8)
<FrameGO: x>
<IndexGO>    a        b        <<U1>
<Index>
p            00000010 0000qrs
q            00000002 00000XYZ
r            00000008 00000123
s            00000003 0000 wX
<<U1>        <<U8>    <<U8>
#end_FrameGO-via_str.zfill()

#start_FrameGO-via_T.via_fill_value()
>>> 
#end_FrameGO-via_T.via_fill_value()

#start_FrameGO-via_T.__add__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__add__()

#start_FrameGO-via_T.__sub__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__sub__()

#start_FrameGO-via_T.__mul__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__mul__()

#start_FrameGO-via_T.__truediv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__truediv__()

#start_FrameGO-via_T.__floordiv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__floordiv__()

#start_FrameGO-via_T.__mod__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T % s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         nan       nan       nan
q         -0.0      -1.0      -0.0
r         0.0       0.0       0.0
s         0.0       0.0       0.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__mod__()

#start_FrameGO-via_T.__pow__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T ** s
<FrameGO>
<IndexGO> a         b                  c         <<U1>
<Index>
p         1.0       1.0                1.0
q         0.25      0.1111111111111111 inf
r         0.0       2.8284271247461903 3.0
s         0.0       0.0                12.0
<<U1>     <float64> <float64>          <float64>
#end_FrameGO-via_T.__pow__()

#start_FrameGO-via_T.__lshift__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T << s
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         10      8       1
q         0       0       0
r         0       64      72
s         0       0       24
<<U1>     <int64> <int64> <int64>
#end_FrameGO-via_T.__lshift__()

#start_FrameGO-via_T.__rshift__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >> s
<FrameGO>
<IndexGO> a       b       c       <<U1>
<Index>
p         10      8       1
q         -1      -1      0
r         0       1       1
s         0       0       6
<<U1>     <int64> <int64> <int64>
#end_FrameGO-via_T.__rshift__()

#start_FrameGO-via_T.__and__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T & s
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  False
q         True   True
r         True   False
<<U1>     <bool> <bool>
#end_FrameGO-via_T.__and__()

#start_FrameGO-via_T.__xor__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T ^ s
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  True
q         False  False
r         False  True
<<U1>     <bool> <bool>
#end_FrameGO-via_T.__xor__()

#start_FrameGO-via_T.__or__()
>>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')
>>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))
>>> f.via_T | s
<FrameGO>
<IndexGO> a      b      <<U1>
<Index>
p         False  True
q         True   True
r         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_T.__or__()

#start_FrameGO-via_T.__lt__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T < s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         False  True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__lt__()

#start_FrameGO-via_T.__le__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T <= s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   True   False
r         True   False  False
s         True   True   False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__le__()

#start_FrameGO-via_T.__eq__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T == s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         False  False  False
q         True   False  False
r         False  False  False
s         False  False  False
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__eq__()

#start_FrameGO-via_T.__ne__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T != s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  True   True
r         True   True   True
s         True   True   True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__ne__()

#start_FrameGO-via_T.__gt__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T > s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         False  False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__gt__()

#start_FrameGO-via_T.__ge__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T >= s
<FrameGO>
<IndexGO> a      b      c      <<U1>
<Index>
p         True   True   True
q         True   False  True
r         False  True   True
s         False  False  True
<<U1>     <bool> <bool> <bool>
#end_FrameGO-via_T.__ge__()

#start_FrameGO-via_T.__radd__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T + s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         -4.0      -5.0      -2.0
r         0.5       8.5       9.5
s         1.0       1.0       13.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__radd__()

#start_FrameGO-via_T.__rsub__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T - s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         10.0      8.0       1.0
q         0.0       -1.0      2.0
r         -0.5      7.5       8.5
s         -1.0      -1.0      11.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rsub__()

#start_FrameGO-via_T.__rmul__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T * s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         0.0       0.0       0.0
q         4.0       6.0       -0.0
r         0.0       4.0       4.5
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rmul__()

#start_FrameGO-via_T.__rtruediv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T / s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.5       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rtruediv__()

#start_FrameGO-via_T.__rfloordiv__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))
>>> f.via_T // s
<FrameGO>
<IndexGO> a         b         c         <<U1>
<Index>
p         inf       inf       inf
q         1.0       1.0       -0.0
r         0.0       16.0      18.0
s         0.0       0.0       12.0
<<U1>     <float64> <float64> <float64>
#end_FrameGO-via_T.__rfloordiv__()

#start_FrameGO-via_fill_value().loc
>>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1).loc[['a', 'b', 'd']]
<FrameGO: y>
<IndexGO>    x       y       <<U1>
<Index>
a            3       2
b            0       0
d            -1      -1
<<U1>        <int64> <int64>
#end_FrameGO-via_fill_value().loc

#start_FrameGO-via_fill_value().__getitem__()
>>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f.via_fill_value(-1)[['z', 'x']]
<FrameGO: y>
<IndexGO>    z       x       <<U1>
<Index>
a            -1      3
b            -1      0
c            -1      20
<<U1>        <int64> <int64>
#end_FrameGO-via_fill_value().__getitem__()

#start_FrameGO-via_fill_value().via_T
>>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))
>>> f.via_fill_value(-1).via_T * s
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         -3      -2
b         0       0
c         160     96
d         -19     -19
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().via_T

#start_FrameGO-via_fill_value().__add__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) + f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         2       3
c         24      26
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__add__()

#start_FrameGO-via_fill_value().__sub__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) - f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         -2      -3
c         16      -2
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__sub__()

#start_FrameGO-via_fill_value().__mul__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) * f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         0       0
b         0       0
c         80      168
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__mul__()

#start_FrameGO-via_fill_value().__truediv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) / f2
<FrameGO>
<IndexGO> x         y                  <<U1>
<Index>
a         inf       inf
b         0.0       0.0
c         5.0       0.8571428571428571
<<U1>     <float64> <float64>
#end_FrameGO-via_fill_value().__truediv__()

#start_FrameGO-via_fill_value().__floordiv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) // f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         0       0
b         0       0
c         5       0
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__floordiv__()

#start_FrameGO-via_fill_value().__mod__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) % f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         0       0
b         0       0
c         0       12
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__mod__()

#start_FrameGO-via_fill_value().__pow__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) ** f2
<FrameGO>
<IndexGO> x       y                <<U1>
<Index>
a         1       1
b         0       0
c         160000  1283918464548864
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__pow__()

#start_FrameGO-via_fill_value().__lshift__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) << f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         0       0
c         40      24
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__lshift__()

#start_FrameGO-via_fill_value().__rshift__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >> f2
<FrameGO>
<IndexGO> x       y       <<U1>
<Index>
a         3       2
b         0       0
c         10      6
<<U1>     <int64> <int64>
#end_FrameGO-via_fill_value().__rshift__()

#start_FrameGO-via_fill_value().__and__()
>>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) & f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         False  False
c         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__and__()

#start_FrameGO-via_fill_value().__xor__()
>>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) ^ f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  True
b         True   True
c         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__xor__()

#start_FrameGO-via_fill_value().__or__()
>>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(False) | f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__or__()

#start_FrameGO-via_fill_value().__lt__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) < f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__lt__()

#start_FrameGO-via_fill_value().__le__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) <= f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         True   True
c         False  True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__le__()

#start_FrameGO-via_fill_value().__eq__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) == f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         False  False
b         False  False
c         False  False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__eq__()

#start_FrameGO-via_fill_value().__ne__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) != f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         True   True
b         True   True
c         True   True
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__ne__()

#start_FrameGO-via_fill_value().__gt__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) > f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__gt__()

#start_FrameGO-via_fill_value().__ge__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f1.via_fill_value(0) >= f2
<FrameGO>
<IndexGO> x      y      <<U1>
<Index>
a         True   True
b         False  False
c         True   False
<<U1>     <bool> <bool>
#end_FrameGO-via_fill_value().__ge__()

#start_FrameGO-via_fill_value().__radd__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 + f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__radd__()

#start_FrameGO-via_fill_value().__rsub__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 - f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rsub__()

#start_FrameGO-via_fill_value().__rmul__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 * f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rmul__()

#start_FrameGO-via_fill_value().__rtruediv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 / f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rtruediv__()

#start_FrameGO-via_fill_value().__rfloordiv__()
>>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')
>>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')
>>> f2 // f1.via_fill_value(0)
<FrameGO: y>
<IndexGO>    x        y        <<U1>
<Index>
b            FrameGO  FrameGO
c            FrameGO  FrameGO
<<U1>        <object> <object>
#end_FrameGO-via_fill_value().__rfloordiv__()

#start_FrameGO-via_re().search()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').search()
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   True   True
<int64>      <bool> <bool> <bool>
#end_FrameGO-via_re().search()

#start_FrameGO-via_re().match()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').match()
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            True   False  True
1            True   True   True
2            False  True   True
3            True   False  True
<int64>      <bool> <bool> <bool>
#end_FrameGO-via_re().match()

#start_FrameGO-via_re().fullmatch()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('123').fullmatch()
<FrameGO: x>
<IndexGO>    a      b      c      <<U1>
<Index>
0            False  False  False
1            False  False  False
2            False  True   False
3            False  False  False
<int64>      <bool> <bool> <bool>
#end_FrameGO-via_re().fullmatch()

#start_FrameGO-via_re().split()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').split()
<FrameGO: x>
<IndexGO>    a         b                c                    <<U1>
<Index>
0            ('', '0') ('qrs ',)        ('', '5', '7-0', ...
1            ('', '')  ('', 'YZ')       ('', '5', '7-04-0...
2            ('8',)    ('', '', '', '') ('', '5', '7-', '...
3            ('', '')  (' w', ' ')      ('', '5', '7-06-'...
<int64>      <object>  <object>         <object>
#end_FrameGO-via_re().split()

#start_FrameGO-via_re().findall()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').findall()
<FrameGO: x>
<IndexGO>    a        b               c                    <<U1>
<Index>
0            ('1',)   ()              ('1', '1', '1', '1')
1            ('2',)   ('X',)          ('1', '1', '1')
2            ()       ('1', '2', '3') ('1', '1', '1', '...
3            ('3',)   ('X',)          ('1', '1', '3')
<int64>      <object> <object>        <object>
#end_FrameGO-via_re().findall()

#start_FrameGO-via_re().sub()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').sub('==')
<FrameGO: x>
<IndexGO>    a     b      c                <<U1>
<Index>
0            ==0   qrs    ==5==7-0==-0==
1            ==    ==YZ   ==5==7-04-0==
2            8     ====== ==5==7-====-====
3            ==     w==   ==5==7-06-==0
<int64>      <<U3> <<U6>  <<U16>
#end_FrameGO-via_re().sub()

#start_FrameGO-via_re().subn()
>>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')
>>> f
<FrameGO: x>
<IndexGO>    a       b     c               <<U1>
<Index>
0            10      qrs   1517-01-01
1            2       XYZ   1517-04-01
2            8       123   1517-12-31
3            3        wX   1517-06-30
<int64>      <int64> <<U4> <datetime64[D]>
>>> f.via_re('[X123]').subn('==', 1)
<FrameGO: x>
<IndexGO>    a          b            c                  <<U1>
<Index>
0            ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)
1            ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)
2            ('8', 0)   ('==23', 1)  ('==517-12-31', 1)
3            ('==', 1)  (' w== ', 1) ('==517-06-30', 1)
<int64>      <object>   <object>     <object>
#end_FrameGO-via_re().subn()

#start_FrameGO-via_values.apply()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> f.via_values.apply(np.sin)
<FrameGO: x>
<IndexGO>    a                   b                   c                   <<U1>
<Index>
p            -0.5440211108893699 0.9893582466233818  0.8414709848078965
q            -0.9092974268256817 -0.1411200080598672 0.0
r            0.0                 0.9893582466233818  0.4121184852417566
s            0.0                 0.0                 -0.5365729180004349
<<U1>        <float64>           <float64>           <float64>
#end_FrameGO-via_values.apply()

#start_FrameGO-via_values.__array_ufunc__()
>>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')
>>> np.sin(f.via_values)
[[-0.54402111  0.98935825  0.84147098]
 [-0.90929743 -0.14112001  0.        ]
 [ 0.          0.98935825  0.41211849]
 [ 0.          0.         -0.53657292]]
#end_FrameGO-via_values.__array_ufunc__()

