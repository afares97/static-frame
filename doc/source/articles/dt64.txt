



Why Datetimes Need Units: Avoiding a Y2262 Problem & Harnessing the Power of NumPy's datetime64





================================================================================

Talks

Talks are 30-minute sessions including time for Q&A. A talk proposal is a short description of a talk that is aiming to convince someone to part with 30 minutes of their time, in order to learn about something. A good proposal should disclose:

    The topic (the WHAT) and WHY it is interesting
    The audience to WHOM the talk is addressed
    The TYPE of talk (lots of maths, hands-on, etc) and possibly the tone (light-hearted, informative etc)
    The TAKEAWAY, a.k.a. what will I learn

There are two parts to a proposal:

    Brief Summary – This informs attendees what the talk is about. Discloses the topic, domain and overall purpose. This is at most a few lines long, and will be printed in the conference programme.

    Description – This is a self-contained statement that summarises the aspects of the talk. It should be structured and present the objective of the talk, its outline, central thesis and key takeaways. After reading the description, the audience should have an idea of the overall presentation and know what to expect. The description should also make clear what background knowledge is expected from the attendees. Both this and the summary will be included in the talk details online.

While there is no strict template for this, you should make sure that the audience can understand why your talk is relevant for them.

#-------------------------------------------------------------------------------

Brief Summary
maximum 400 characters.

This talk will introduce NumPy's ``datetime64`` arrays and describe their features and performance in comparison to Python's ``date`` and ``datetime`` types. Practical examples of working with, and converting between, these formats will be provided. The usage of ``datetime64`` in Pandas and StaticFrame index objects will be compared, and StaticFrame's ``via_dt`` interface will be introduced.

#-------------------------------------------------------------------------------

Brief Bullet Point Outline
Brief outline.

Introduction

why we need datetime64
    Python's date and datetime
    The problem with datetime PyObjects in arrays
    The datetime64 array
        The application of a time unit to a 64-bit signed integer
        A wide range of time units
        Time units permit maximizing range

Comparing datetime and datetime64
    Interface and features
        PyObject versus an int64
        Units
        Initialization
            string v. discrete integers
        Attributes and methods
        Transformations, operator overloading, and timedeltas
        NaT
        np.datetime_data()
    Performance comparsions
        Arrays of datetime64 compared to arrays of datetime PyObjects
        Slicing and selecting
        Transforming, applying timedeltas

Converting between datetime and datetime64
    Units not supported in datetime
        Date objects cannot represent months or years without a date
        Datetime objects cannot represent sub-microsecond timestamps
    From datetime64 to datetime
        astype(object), tolist(), item()
    From datetime to datetime64
        np.array(), np.datetime64()

Benefits of unit-specification of dates and times
    More narrow typing
    Monthly timeseries data
    Specifying the resolution of a measurement

Labelling data with datetime64 in Pandas and StaticFrame
    Pandas exclusive usage of nanoseconds
    Explicit support for datetime64 units in StaticFrame indices

via_dt: Making datetime64 as easy to work with as datetime
    Getting date-component attributes
    Utilities for string parsing and formatting




Description
Detailed outline.


NumPy supports a date and time array type called ``datetime64``. Unlike Python's standard library types (``datetime`` and ``date``), ``datetime64`` supports an extensive range of time units, from year to attosecond. This specification of unit permits more narrow typing of time information, and permits taking full advantage of time ranges that fit within the underlying representation (a 64-bit signed integer). This talk will introduce ``datetime64`` arrays and describe their features and performance in comparison to Python's ``date`` and ``datetime`` types. Practical examples of working with, and converting between, these formats will be provided. As date and time information is particularly useful for labelling data, the usage of ``datetime64`` in Pandas and StaticFrame indices will be examined. Pandas use of only a single unit (nanosecond) will be shown to lead to a "Y2262" problem and offer other disadvantages compared to StaticFrame's full support for ``datetime64`` units. Finally, StaticFrame's ``via_dt`` interface will be shown to offer utilities that make working with ``datetime64`` as easy as working with Python's ``date`` and ``datetime`` objects.

The audience for this talk is anyone working with NumPy ``datetime64`` or Pandas ``DatetimeIndex`` types, or those wanting to better understand Python's ``date`` and ``datetime`` objects. Basic familiarity with these types is helpful but not required. Audience members will come away with a firm understanding of the limits and opportunities of these types. This will be an informative presentation with concise code examples and practical tips for working with these types.




================================================================================










#-------------------------------------------------------------------------------

Pandas models all date or timestamp values as NumPy ``datetime64[ns]`` (nanosecond) arrays, regardless of if nanosecond-level resolution is practical or appropriate. This creates a "Y2262 problem" for Pandas: dates beyond 2262-04-11 cannot be expressed. While I can create a ``pd.DatetimeIndex`` up to 2262-04-11, one day further and Pandas raises an error.

>>> pd.date_range('1980', '2262-04-11')
DatetimeIndex(['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04',
               '1980-01-05', '1980-01-06', '1980-01-07', '1980-01-08',
               '1980-01-09', '1980-01-10',
               ...
               '2262-04-02', '2262-04-03', '2262-04-04', '2262-04-05',
               '2262-04-06', '2262-04-07', '2262-04-08', '2262-04-09',
               '2262-04-10', '2262-04-11'],
              dtype='datetime64[ns]', length=103100, freq='D')
>>> pd.date_range('1980', '2262-04-12')
Traceback (most recent call last):
pandas._libs.tslibs.np_datetime.OutOfBoundsDatetime: Out of bounds nanosecond timestamp: 2262-04-12 00:00:00


As indices are often used for date-time values far less granular than nanoseconds (such as dates, months, or years), StaticFrame offers the full range of NumPy typed ``datetime64`` indices. This permits exact date-time type specification, and avoids the limits of nanosecond-based units.

While not possible with Pandas, creating an index of years or dates extending to 3000 is simple with StaticFrame.


#-------------------------------------------------------------------------------

